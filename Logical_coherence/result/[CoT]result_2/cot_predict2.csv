task_id,prompt,answer,prediction,refine_prediction,label,correct_flag,correct_logic
576224,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 6], [6, 4]],
then this grids change to output grids below
[[8, 6, 8, 6, 8, 6], [6, 4, 6, 4, 6, 4], [6, 8, 6, 8, 6, 8], [4, 6, 4, 6, 4, 6], [8, 6, 8, 6, 8, 6], [6, 4, 6, 4, 6, 4]].

Example 2
If input grids are like that
[[7, 9], [4, 3]],
then this grids change to output grids below
[[7, 9, 7, 9, 7, 9], [4, 3, 4, 3, 4, 3], [9, 7, 9, 7, 9, 7], [3, 4, 3, 4, 3, 4], [7, 9, 7, 9, 7, 9], [4, 3, 4, 3, 4, 3]].

Quiz
If input grids are like that
[[3, 2], [7, 8]],
then output grids?

=========","The output grids would be:

[[3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8], [2, 3, 2, 3, 2, 3], [8, 7, 8, 7, 8, 7], [3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8]].

The pattern in this problem is that each row of the input grid is repeated three times in the output grid, and the order of the numbers in each row is reversed every other row.","[[3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8], [2, 3, 2, 3, 2, 3], [8, 7, 8, 7, 8, 7], [3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8]]","[[3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8], [2, 3, 2, 3, 2, 3], [8, 7, 8, 7, 8, 7], [3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8]]","[[3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8], [2, 3, 2, 3, 2, 3], [8, 7, 8, 7, 8, 7], [3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8]]",TRUE,TRUE
009d5c81,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 8, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 8, 0, 8, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 8, 0, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 0, 3, 0, 3, 3, 0, 0, 0], [0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 0], [0, 0, 0, 0, 3, 3, 0, 3, 0, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 8, 0, 8], [0, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 8], [0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2], [0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern in this problem is that the color of the objects (represented by the number 8 in the input grid) changes to a different color (represented by the number 2 in the output grid). The rest of the grid remains the same.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2], [0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2], [0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7], [0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 7, 0, 7], [0, 0, 0, 0, 0, 7, 0, 7, 0, 7, 0, 0, 0, 7], [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
00dbd492,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[2, 2, 2, 2, 2, 0, 0], [2, 0, 0, 0, 2, 0, 0], [2, 0, 2, 0, 2, 0, 0], [2, 0, 0, 0, 2, 0, 0], [2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[2, 2, 2, 2, 2, 0, 0], [2, 8, 8, 8, 2, 0, 0], [2, 8, 2, 8, 2, 0, 0], [2, 8, 8, 8, 2, 0, 0], [2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[2, 2, 2, 2, 2, 2, 2, 0, 0], [2, 0, 0, 0, 0, 0, 2, 0, 0], [2, 0, 0, 0, 0, 0, 2, 0, 0], [2, 0, 0, 2, 0, 0, 2, 0, 0], [2, 0, 0, 0, 0, 0, 2, 0, 0], [2, 0, 0, 0, 0, 0, 2, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[2, 2, 2, 2, 2, 2, 2, 0, 0], [2, 4, 4, 4, 4, 4, 2, 0, 0], [2, 4, 4, 4, 4, 4, 2, 0, 0], [2, 4, 4, 2, 4, 4, 2, 0, 0], [2, 4, 4, 4, 4, 4, 2, 0, 0], [2, 4, 4, 4, 4, 4, 2, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that the cells enclosed by the number 2 are filled with the number 8. The cells that are not enclosed remain the same. 

So, the output for the quiz would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 8, 8, 8, 2, 0, 0, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 2, 8, 2, 8, 2, 0, 0, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 2, 8, 8, 8, 2, 0, 0, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 8, 8, 8, 2, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 2, 8, 8, 8, 2, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 8, 2, 8, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 8, 8, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 2, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 8, 8, 8, 2, 0, 0, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 2, 8, 2, 8, 2, 0, 0, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 2, 8, 8, 8, 2, 0, 0, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 8, 8, 8, 2, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 2, 8, 8, 8, 2, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 8, 2, 8, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 8, 8, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 2, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 8, 8, 8, 2, 0, 0, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 2, 8, 2, 8, 2, 0, 0, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 2, 8, 8, 8, 2, 0, 0, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 8, 8, 8, 2, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 2, 8, 8, 8, 2, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 8, 2, 8, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 8, 8, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 2, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 8, 8, 8, 2, 0, 0, 0, 0], [0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 0, 2, 8, 2, 8, 2, 0, 0, 0, 0], [0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 0, 2, 8, 8, 8, 2, 0, 0, 0, 0], [0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 3, 3, 3, 2, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0, 0, 2, 8, 8, 8, 2, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 8, 2, 8, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 8, 8, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 4, 4, 4, 4, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 4, 4, 4, 4, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 4, 4, 2, 4, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 4, 4, 4, 4, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 4, 4, 4, 4, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
3560426,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4], [1, 1, 0, 0, 0, 0, 0, 0, 0, 4], [1, 1, 0, 2, 2, 0, 3, 3, 0, 4], [1, 1, 0, 2, 2, 0, 3, 3, 0, 4]],
then this grids change to output grids below
[[1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 3, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 7, 7, 0, 2, 2, 2], [8, 8, 8, 0, 7, 7, 0, 2, 2, 2]],
then this grids change to output grids below
[[8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [8, 8, 7, 7, 0, 0, 0, 0, 0, 0], [0, 0, 7, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 8, 8, 0, 6, 0, 0, 0, 0], [7, 0, 8, 8, 0, 6, 0, 3, 3, 0], [7, 0, 8, 8, 0, 6, 0, 3, 3, 0]],
then output grids?

=========","The output grids would be:

[[7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 8, 6, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

The pattern here is that the objects are moving upwards. The objects in the bottom row move up to the top row, the objects in the second bottom row move up to the second top row, and so on. The objects in the top row are removed.","[[7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 8, 6, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 8, 6, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [8, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
0607ce86,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 3, 6, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 3, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 3, 0, 0, 0], [0, 3, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 3, 0, 0, 0, 3, 0, 0], [0, 3, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 3, 6, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 3, 8, 3, 3, 8, 3, 0, 3, 0, 0, 0, 3], [0, 0, 8, 8, 3, 3, 3, 8, 0, 0, 3, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 0], [3, 3, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 3, 6, 6, 6, 0, 3, 6, 6, 6, 3, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 3, 0], [0, 0, 8, 3, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 3, 0, 0, 0, 3, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 1, 1, 1, 2, 3, 3, 0, 3, 0, 0], [0, 1, 1, 3, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 3, 0, 3, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 1, 3, 3, 0, 0, 0, 3], [0, 1, 3, 3, 3, 1, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 1, 3, 3, 3, 0, 3, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 3, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 3, 2, 1, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [1, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 3, 1, 3, 2, 3, 3, 0, 0, 0, 0], [0, 8, 1, 8, 8, 3, 0, 8, 8, 8, 8, 8, 0, 1, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 3, 0], [0, 1, 1, 3, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 1, 3, 3, 0, 1, 1, 2, 3, 1, 0, 0, 0, 0], [1, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 1, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [3, 8, 8, 8, 3, 3, 1, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 3, 0, 3, 0, 1, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 2, 2, 8, 3, 2, 0, 2, 2, 8, 2, 2, 0, 3, 2, 8, 2, 2, 0, 0, 0, 3], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [3, 8, 8, 3, 3, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 3, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0], [0, 2, 3, 8, 2, 2, 0, 2, 2, 3, 2, 3, 0, 2, 2, 8, 2, 2, 0, 0, 0, 3], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 3, 0, 8, 8, 8, 3, 8, 0, 0, 0, 0], [0, 8, 8, 8, 3, 8, 0, 8, 3, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 3, 0], [0, 3, 3, 3, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 8, 8, 8, 8, 0, 8, 8, 3, 3, 8, 0, 8, 8, 3, 8, 8, 0, 3, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 3, 8, 8, 0, 3, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 3, 0, 0, 0, 0, 3, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
0692e18c,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 7, 0], [7, 7, 7], [0, 7, 0]],
then this grids change to output grids below
[[0, 0, 0, 7, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 7, 0, 0, 0], [7, 0, 7, 7, 0, 7, 7, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 7, 7, 0, 7, 7, 0, 7], [0, 0, 0, 7, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 7, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 6], [0, 6, 0], [6, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 6, 6, 0], [0, 0, 0, 0, 0, 0, 6, 0, 6], [0, 0, 0, 0, 0, 0, 0, 6, 6], [0, 0, 0, 6, 6, 0, 0, 0, 0], [0, 0, 0, 6, 0, 6, 0, 0, 0], [0, 0, 0, 0, 6, 6, 0, 0, 0], [6, 6, 0, 0, 0, 0, 0, 0, 0], [6, 0, 6, 0, 0, 0, 0, 0, 0], [0, 6, 6, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 3], [3, 3, 0], [0, 3, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 3, 3, 0], 
 [0, 0, 0, 3, 3, 0, 0, 0, 0], 
 [0, 0, 0, 0, 3, 3, 0, 0, 0], 
 [3, 3, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [3, 3, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 3, 3, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 3, 3, 0, 0, 0]].

The pattern here is that each cell in the input grid is expanded into a 3x3 grid in the output. The value from the input cell is placed in the same relative position in each of the 3x3 grids. For example, the top left cell in the input (0,0) becomes the top left 3x3 grid in the output, and the value 0 is placed in the top right, middle left, and bottom middle positions of that 3x3 grid. This pattern is repeated for each cell in the input to produce the output.","[[0, 0, 0, 0, 0, 0, 3, 3, 0], 
 [0, 0, 0, 3, 3, 0, 0, 0, 0], 
 [0, 0, 0, 0, 3, 3, 0, 0, 0], 
 [3, 3, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [3, 3, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 3, 3, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 3, 3, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 3, 3, 0], 
 [0, 0, 0, 3, 3, 0, 0, 0, 0], 
 [0, 0, 0, 0, 3, 3, 0, 0, 0], 
 [3, 3, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [3, 3, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 3, 3, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 3, 3, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 3, 0, 3], [3, 3, 0, 3, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 3, 0, 0, 0], [3, 0, 3, 3, 0, 3, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0]]",FALSE,
08573cc6,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 5, 5, 1, 0, 6, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 6, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 2, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 3, 3, 1, 0, 2, 0, 0], [0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 2, 3, 3, 3, 3, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 8, 0, 2, 2, 1, 0, 0, 0, 0, 0, 8], [0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 8, 0, 8, 2, 2, 2, 2, 2, 2, 2, 8], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]]

The pattern is that the objects (2 and 8) form a square around the center object (1). The square is filled with the first object (2) and the border is made up of the second object (8). The size of the square is determined by the distance of the center object (1) from the top and bottom of the grid.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 8, 0, 2, 2, 1, 0, 0, 0, 0, 0, 8], [0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 8, 0, 8, 2, 2, 2, 2, 2, 2, 2, 8], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 8, 0, 2, 2, 1, 0, 0, 0, 0, 0, 8], [0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 8, 0, 8, 2, 2, 2, 2, 2, 2, 2, 8], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8], [8, 0, 2, 2, 2, 2, 2, 2, 8, 0, 8, 0, 8], [8, 0, 8, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8], [8, 0, 8, 0, 2, 2, 1, 0, 8, 0, 8, 0, 8], [8, 0, 8, 0, 8, 0, 0, 0, 8, 0, 8, 0, 8], [8, 0, 8, 0, 8, 0, 0, 0, 8, 0, 8, 0, 8], [8, 0, 8, 0, 8, 2, 2, 2, 2, 0, 8, 0, 8], [8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8], [8, 0, 8, 2, 2, 2, 2, 2, 2, 2, 2, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]",FALSE,
0934a4d8,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[3, 1, 1, 9, 5, 6, 7, 1, 1, 4, 5, 7, 3, 9, 9, 1, 1, 9, 9, 3, 7, 5, 4, 1, 1, 7, 6, 5, 9, 1], [1, 3, 9, 5, 6, 5, 1, 7, 4, 1, 7, 5, 4, 3, 1, 3, 3, 1, 3, 4, 5, 7, 1, 4, 7, 1, 5, 6, 5, 9], [6, 9, 3, 1, 7, 1, 5, 6, 9, 9, 1, 4, 9, 1, 1, 4, 4, 1, 1, 9, 4, 1, 9, 9, 6, 5, 1, 7, 1, 3], [9, 1, 1, 3, 1, 7, 6, 5, 9, 9, 4, 1, 1, 3, 4, 1, 1, 4, 3, 1, 1, 4, 9, 9, 5, 6, 7, 1, 3, 1], [6, 6, 6, 7, 3, 1, 5, 9, 3, 4, 9, 1, 6, 7, 2, 5, 5, 2, 7, 6, 1, 9, 4, 3, 9, 5, 1, 3, 7, 6], [6, 6, 7, 6, 1, 3, 9, 1, 9, 3, 1, 3, 7, 6, 5, 2, 2, 5, 6, 7, 3, 1, 3, 9, 1, 9, 3, 1, 6, 7], [6, 7, 6, 6, 1, 9, 3, 1, 9, 1, 1, 4, 6, 9, 6, 7, 7, 6, 9, 6, 4, 1, 1, 9, 1, 3, 9, 1, 6, 6], [7, 6, 6, 6, 9, 6, 1, 3, 1, 3, 4, 1, 9, 6, 7, 6, 6, 7, 6, 9, 1, 4, 3, 1, 3, 1, 8, 8, 8, 8], [1, 4, 9, 9, 3, 9, 9, 1, 1, 1, 6, 1, 5, 2, 5, 5, 5, 5, 2, 5, 1, 6, 1, 1, 1, 9, 8, 8, 8, 8], [4, 1, 9, 9, 4, 3, 1, 3, 1, 1, 1, 6, 2, 5, 5, 5, 5, 5, 5, 2, 6, 1, 1, 1, 3, 1, 8, 8, 8, 8], [5, 7, 1, 4, 9, 1, 1, 4, 2, 2, 1, 1, 5, 5, 5, 2, 2, 5, 5, 5, 1, 1, 2, 2, 4, 1, 8, 8, 8, 8], [7, 5, 4, 1, 1, 3, 4, 1, 2, 1, 1, 1, 5, 5, 2, 5, 5, 2, 5, 5, 1, 1, 1, 2, 1, 4, 3, 1, 1, 4], [3, 4, 9, 1, 6, 7, 6, 9, 7, 6, 3, 3, 1, 1, 6, 1, 1, 6, 1, 1, 3, 3, 6, 7, 9, 6, 7, 6, 1, 9], [9, 3, 1, 3, 7, 6, 9, 6, 6, 7, 3, 3, 1, 1, 1, 6, 6, 1, 1, 1, 3, 3, 7, 6, 6, 9, 6, 7, 3, 1], [9, 1, 1, 4, 2, 5, 6, 7, 3, 3, 7, 6, 1, 2, 1, 1, 1, 1, 2, 1, 6, 7, 3, 3, 7, 6, 5, 2, 4, 1], [1, 3, 4, 1, 5, 2, 7, 6, 3, 3, 6, 7, 2, 2, 1, 1, 1, 1, 2, 2, 7, 6, 3, 3, 6, 7, 2, 5, 1, 4], [1, 3, 4, 1, 5, 2, 7, 6, 3, 3, 6, 7, 2, 2, 1, 1, 1, 1, 2, 2, 7, 6, 3, 3, 6, 7, 2, 5, 1, 4], [9, 1, 1, 4, 2, 5, 6, 7, 3, 3, 7, 6, 1, 2, 1, 1, 1, 1, 2, 1, 6, 7, 3, 3, 7, 6, 5, 2, 4, 1], [9, 3, 1, 3, 7, 6, 9, 6, 6, 7, 3, 3, 1, 1, 1, 6, 6, 1, 1, 1, 3, 3, 7, 6, 6, 9, 6, 7, 3, 1], [3, 4, 9, 1, 6, 7, 6, 9, 7, 6, 3, 3, 1, 1, 6, 1, 1, 6, 1, 1, 3, 3, 6, 7, 9, 6, 7, 6, 1, 9], [7, 5, 4, 1, 1, 3, 4, 1, 2, 1, 1, 1, 5, 5, 2, 5, 5, 2, 5, 5, 1, 1, 1, 2, 1, 4, 3, 1, 1, 4], [5, 7, 1, 4, 9, 1, 1, 4, 2, 2, 1, 1, 5, 5, 5, 2, 2, 5, 5, 5, 1, 1, 2, 2, 4, 1, 1, 9, 4, 1], [4, 1, 9, 9, 4, 3, 1, 3, 1, 1, 1, 6, 2, 5, 5, 5, 5, 5, 5, 2, 6, 1, 1, 1, 3, 1, 3, 4, 9, 9], [1, 4, 9, 9, 3, 9, 9, 1, 1, 1, 6, 1, 5, 2, 5, 5, 5, 5, 2, 5, 1, 6, 1, 1, 1, 9, 9, 3, 9, 9], [7, 6, 6, 6, 9, 6, 1, 3, 1, 3, 4, 1, 9, 6, 7, 6, 6, 7, 6, 9, 1, 4, 3, 1, 3, 1, 6, 9, 6, 6], [6, 7, 6, 6, 1, 9, 3, 1, 9, 1, 1, 4, 6, 9, 6, 7, 7, 6, 9, 6, 4, 1, 1, 9, 1, 3, 9, 1, 6, 6], [6, 6, 7, 6, 1, 3, 9, 1, 9, 3, 1, 3, 7, 6, 5, 2, 2, 5, 6, 7, 3, 1, 3, 9, 1, 9, 3, 1, 6, 7], [6, 6, 6, 7, 3, 1, 5, 9, 3, 4, 9, 1, 6, 7, 2, 5, 5, 2, 7, 6, 1, 9, 4, 3, 9, 5, 1, 3, 7, 6], [9, 1, 1, 3, 1, 7, 6, 5, 9, 9, 4, 1, 1, 3, 4, 1, 1, 4, 3, 1, 1, 4, 9, 9, 5, 6, 7, 1, 3, 1], [6, 9, 3, 1, 7, 1, 5, 6, 9, 9, 1, 4, 9, 1, 1, 4, 4, 1, 1, 9, 4, 1, 9, 9, 6, 5, 1, 7, 1, 3]],
then this grids change to output grids below
[[6, 9, 6, 6], [9, 3, 9, 9], [3, 4, 9, 9], [1, 9, 4, 1]].

Example 2
If input grids are like that
[[9, 9, 2, 3, 4, 4, 7, 5, 3, 3, 6, 6, 3, 5, 6, 4, 4, 6, 5, 3, 6, 6, 3, 3, 5, 7, 4, 4, 3, 2], [7, 9, 3, 5, 4, 4, 5, 7, 3, 3, 6, 6, 6, 3, 4, 6, 6, 4, 3, 6, 6, 6, 3, 3, 7, 5, 4, 4, 5, 3], [3, 2, 9, 9, 7, 5, 4, 4, 4, 1, 3, 3, 6, 4, 4, 7, 7, 4, 4, 6, 3, 8, 8, 8, 8, 8, 5, 7, 9, 9], [2, 3, 7, 9, 5, 7, 4, 4, 1, 4, 3, 3, 4, 6, 7, 4, 4, 7, 6, 4, 3, 8, 8, 8, 8, 8, 7, 5, 9, 7], [7, 7, 9, 3, 9, 9, 5, 3, 3, 6, 6, 4, 6, 7, 9, 9, 9, 9, 7, 6, 4, 8, 8, 8, 8, 8, 9, 9, 3, 9], [7, 7, 3, 9, 7, 9, 3, 2, 5, 3, 4, 6, 2, 6, 9, 9, 9, 9, 6, 2, 6, 8, 8, 8, 8, 8, 9, 7, 9, 3], [9, 3, 7, 7, 3, 2, 9, 9, 6, 4, 4, 7, 9, 2, 6, 7, 7, 6, 2, 9, 7, 4, 4, 6, 9, 9, 2, 3, 7, 7], [3, 9, 7, 7, 2, 3, 7, 9, 4, 6, 7, 4, 2, 9, 2, 6, 6, 2, 9, 2, 4, 7, 6, 4, 9, 7, 3, 2, 7, 7], [3, 3, 4, 1, 3, 5, 6, 4, 2, 4, 7, 7, 1, 6, 7, 2, 2, 7, 6, 1, 7, 7, 4, 2, 4, 6, 5, 3, 1, 4], [3, 3, 1, 4, 6, 3, 4, 6, 2, 2, 7, 1, 6, 1, 2, 7, 7, 2, 1, 6, 1, 7, 2, 2, 6, 4, 3, 6, 4, 1], [6, 6, 3, 3, 6, 4, 4, 7, 1, 1, 2, 4, 7, 2, 1, 6, 6, 1, 2, 7, 4, 2, 1, 1, 7, 4, 4, 6, 3, 3], [6, 6, 3, 3, 4, 6, 7, 4, 1, 3, 2, 2, 2, 7, 6, 1, 1, 6, 7, 2, 2, 2, 3, 1, 4, 7, 6, 4, 3, 3], [3, 6, 6, 4, 6, 2, 9, 2, 9, 9, 9, 7, 2, 4, 1, 7, 7, 1, 4, 2, 7, 9, 9, 9, 2, 9, 2, 6, 4, 6], [5, 3, 4, 6, 7, 6, 2, 9, 9, 9, 7, 9, 2, 2, 7, 7, 7, 7, 2, 2, 9, 7, 9, 9, 9, 2, 6, 7, 6, 4], [6, 4, 4, 7, 9, 9, 6, 2, 9, 7, 9, 9, 3, 1, 2, 4, 4, 2, 1, 3, 9, 9, 7, 9, 2, 6, 9, 9, 7, 4], [4, 6, 7, 4, 9, 9, 7, 6, 7, 9, 9, 9, 1, 1, 2, 2, 2, 2, 1, 1, 9, 9, 9, 7, 6, 7, 9, 9, 4, 7], [4, 6, 7, 4, 9, 9, 7, 6, 7, 9, 9, 9, 1, 1, 2, 2, 2, 2, 1, 1, 9, 9, 9, 7, 6, 7, 9, 9, 4, 7], [6, 4, 4, 7, 9, 9, 6, 2, 9, 7, 9, 9, 3, 1, 2, 4, 4, 2, 1, 3, 9, 9, 7, 9, 2, 6, 9, 9, 7, 4], [5, 3, 4, 6, 7, 6, 2, 9, 9, 9, 7, 9, 2, 2, 7, 7, 7, 7, 2, 2, 9, 7, 9, 9, 9, 2, 6, 7, 6, 4], [3, 6, 6, 4, 6, 2, 9, 2, 9, 9, 9, 7, 2, 4, 1, 7, 7, 1, 4, 2, 7, 9, 9, 9, 2, 9, 2, 6, 4, 6], [6, 6, 3, 3, 4, 6, 7, 4, 1, 3, 2, 2, 2, 7, 6, 1, 1, 6, 7, 2, 2, 2, 3, 1, 4, 7, 6, 4, 3, 3], [6, 6, 3, 3, 6, 4, 4, 7, 1, 1, 2, 4, 7, 2, 1, 6, 6, 1, 2, 7, 4, 2, 1, 1, 7, 4, 4, 6, 3, 3], [3, 3, 1, 4, 6, 3, 4, 6, 2, 2, 7, 1, 6, 1, 2, 7, 7, 2, 1, 6, 1, 7, 2, 2, 6, 4, 3, 6, 4, 1], [3, 3, 4, 1, 3, 5, 6, 4, 2, 4, 7, 7, 1, 6, 7, 2, 2, 7, 6, 1, 7, 7, 4, 2, 4, 6, 5, 3, 1, 4], [3, 9, 7, 7, 2, 3, 7, 9, 4, 6, 7, 4, 2, 9, 2, 6, 6, 2, 9, 2, 4, 7, 6, 4, 9, 7, 3, 2, 7, 7], [9, 3, 7, 7, 3, 2, 9, 9, 6, 4, 4, 7, 9, 2, 6, 7, 7, 6, 2, 9, 7, 4, 4, 6, 9, 9, 2, 3, 7, 7], [7, 7, 3, 9, 7, 9, 3, 2, 5, 3, 4, 6, 2, 6, 9, 9, 9, 9, 6, 2, 6, 4, 3, 5, 2, 3, 9, 7, 9, 3], [7, 7, 9, 3, 9, 9, 5, 3, 3, 6, 6, 4, 6, 7, 9, 9, 9, 9, 7, 6, 4, 6, 6, 3, 3, 5, 9, 9, 3, 9], [2, 3, 7, 9, 5, 7, 4, 4, 1, 4, 3, 3, 4, 6, 7, 4, 4, 7, 6, 4, 3, 3, 4, 1, 4, 4, 7, 5, 9, 7], [3, 2, 9, 9, 7, 5, 4, 4, 4, 1, 3, 3, 6, 4, 4, 7, 7, 4, 4, 6, 3, 3, 1, 4, 4, 4, 5, 7, 9, 9]],
then this grids change to output grids below
[[3, 1, 4, 4, 4], [3, 4, 1, 4, 4], [6, 6, 3, 3, 5], [4, 3, 5, 2, 3]].

Quiz
If input grids are like that
[[4, 4, 1, 3, 5, 7, 7, 9, 6, 1, 6, 6, 4, 4, 7, 7, 7, 7, 4, 4, 6, 6, 1, 6, 9, 7, 7, 5, 3, 1], [4, 4, 3, 3, 7, 5, 9, 7, 6, 6, 6, 6, 4, 4, 7, 2, 2, 7, 4, 4, 6, 6, 6, 6, 7, 9, 5, 7, 3, 3], [3, 4, 4, 4, 7, 9, 5, 7, 5, 1, 6, 1, 7, 7, 9, 9, 9, 9, 7, 7, 1, 6, 1, 5, 7, 5, 9, 7, 4, 4], [4, 3, 4, 4, 9, 7, 7, 5, 1, 5, 6, 6, 7, 2, 1, 9, 9, 1, 2, 7, 6, 6, 5, 1, 5, 7, 7, 9, 4, 4], [9, 7, 7, 4, 4, 4, 3, 3, 4, 4, 7, 7, 9, 7, 3, 2, 2, 3, 7, 9, 7, 7, 4, 4, 3, 3, 4, 4, 4, 7], [7, 9, 4, 7, 4, 4, 3, 1, 4, 4, 7, 2, 7, 9, 2, 3, 3, 2, 9, 7, 2, 7, 4, 4, 1, 3, 4, 4, 7, 4], [7, 4, 9, 7, 3, 4, 4, 4, 7, 7, 9, 1, 7, 4, 9, 7, 7, 9, 4, 7, 1, 9, 7, 7, 4, 4, 4, 3, 7, 9], [4, 7, 7, 9, 4, 3, 4, 4, 7, 2, 9, 9, 4, 7, 7, 9, 9, 7, 7, 4, 9, 9, 2, 7, 4, 4, 3, 4, 9, 7], [6, 6, 5, 1, 4, 4, 7, 7, 7, 2, 2, 6, 4, 6, 2, 2, 2, 2, 6, 4, 6, 2, 2, 7, 7, 7, 4, 4, 1, 5], [1, 6, 1, 5, 4, 4, 7, 2, 3, 7, 6, 6, 6, 4, 2, 2, 2, 2, 4, 6, 6, 6, 7, 3, 2, 7, 4, 4, 5, 1], [6, 6, 6, 6, 7, 7, 9, 9, 9, 1, 7, 2, 2, 2, 4, 6, 6, 4, 2, 2, 2, 7, 1, 9, 9, 9, 7, 7, 6, 6], [6, 6, 1, 6, 7, 2, 1, 9, 1, 5, 3, 7, 2, 2, 6, 4, 4, 6, 2, 2, 7, 3, 5, 1, 9, 1, 2, 7, 6, 1], [4, 4, 7, 7, 9, 7, 7, 4, 9, 9, 1, 6, 7, 2, 6, 6, 6, 6, 2, 7, 6, 1, 9, 9, 4, 7, 7, 9, 7, 7], [4, 4, 7, 2, 7, 9, 4, 7, 9, 9, 6, 1, 3, 7, 6, 2, 2, 6, 7, 3, 1, 6, 9, 9, 7, 4, 9, 7, 2, 7], [8, 8, 8, 1, 3, 2, 9, 7, 1, 6, 9, 9, 5, 1, 7, 2, 2, 7, 1, 5, 9, 9, 6, 1, 7, 9, 2, 3, 1, 9], [8, 8, 8, 9, 2, 3, 7, 9, 6, 1, 9, 9, 1, 9, 3, 7, 7, 3, 9, 1, 9, 9, 1, 6, 9, 7, 3, 2, 9, 9], [8, 8, 8, 9, 2, 3, 7, 9, 6, 1, 9, 9, 1, 9, 3, 7, 7, 3, 9, 1, 9, 9, 1, 6, 9, 7, 3, 2, 9, 9], [8, 8, 8, 1, 3, 2, 9, 7, 1, 6, 9, 9, 5, 1, 7, 2, 2, 7, 1, 5, 9, 9, 6, 1, 7, 9, 2, 3, 1, 9], [8, 8, 8, 2, 7, 9, 4, 7, 9, 9, 6, 1, 3, 7, 6, 2, 2, 6, 7, 3, 1, 6, 9, 9, 7, 4, 9, 7, 2, 7], [8, 8, 8, 7, 9, 7, 7, 4, 9, 9, 1, 6, 7, 2, 6, 6, 6, 6, 2, 7, 6, 1, 9, 9, 4, 7, 7, 9, 7, 7], [8, 8, 8, 6, 7, 2, 1, 9, 1, 5, 3, 7, 2, 2, 6, 4, 4, 6, 2, 2, 7, 3, 5, 1, 9, 1, 2, 7, 6, 1], [8, 8, 8, 6, 7, 7, 9, 9, 9, 1, 7, 2, 2, 2, 4, 6, 6, 4, 2, 2, 2, 7, 1, 9, 9, 9, 7, 7, 6, 6], [8, 8, 8, 5, 4, 4, 7, 2, 3, 7, 6, 6, 6, 4, 2, 2, 2, 2, 4, 6, 6, 6, 7, 3, 2, 7, 4, 4, 5, 1], [6, 6, 5, 1, 4, 4, 7, 7, 7, 2, 2, 6, 4, 6, 2, 2, 2, 2, 6, 4, 6, 2, 2, 7, 7, 7, 4, 4, 1, 5], [4, 7, 7, 9, 4, 3, 4, 4, 7, 2, 9, 9, 4, 7, 7, 9, 9, 7, 7, 4, 9, 9, 2, 7, 4, 4, 3, 4, 9, 7], [7, 4, 9, 7, 3, 4, 4, 4, 7, 7, 9, 1, 7, 4, 9, 7, 7, 9, 4, 7, 1, 9, 7, 7, 4, 4, 4, 3, 7, 9], [7, 9, 4, 7, 4, 4, 3, 1, 4, 4, 7, 2, 7, 9, 2, 3, 3, 2, 9, 7, 2, 7, 4, 4, 1, 3, 4, 4, 7, 4], [9, 7, 7, 4, 4, 4, 3, 3, 4, 4, 7, 7, 9, 7, 3, 2, 2, 3, 7, 9, 7, 7, 4, 4, 3, 3, 4, 4, 4, 7], [4, 3, 4, 4, 9, 7, 7, 5, 1, 5, 6, 6, 7, 2, 1, 9, 9, 1, 2, 7, 6, 6, 5, 1, 5, 7, 7, 9, 4, 4], [3, 4, 4, 4, 7, 9, 5, 7, 5, 1, 6, 1, 7, 7, 9, 9, 9, 9, 7, 7, 1, 6, 1, 5, 7, 5, 9, 7, 4, 4]],
then output grids?

=========","The output grids are:

[[4, 4, 7, 7, 7], [4, 4, 7, 2, 7], [7, 7, 9, 9, 9], [7, 2, 9, 9, 9]].","[[4, 4, 7, 7, 7], [4, 4, 7, 2, 7], [7, 7, 9, 9, 9], [7, 2, 9, 9, 9]]","[[4, 4, 7, 7, 7], [4, 4, 7, 2, 7], [7, 7, 9, 9, 9], [7, 2, 9, 9, 9]]","[[7, 7, 9], [7, 2, 9], [7, 2, 9], [7, 7, 9], [4, 4, 7], [4, 4, 7], [6, 6, 1], [6, 6, 6], [1, 6, 1]]",FALSE,
09c534e7,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 3, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1], [0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 1, 2, 2, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 3, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 3, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 1, 3, 1, 1, 1, 3, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 1, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 3, 1, 1, 1, 1, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 1, 3, 3, 3, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 3, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 1, 0, 0, 0, 1, 3, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 3, 3, 3, 3, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 3, 3, 3, 3, 1, 1, 1, 3, 1, 0, 0, 0, 1, 4, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 2, 2, 1, 1, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 2, 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 4, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 4, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0,",not_complete,not_complete,"[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 4, 4, 4, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 4, 4, 4, 4, 1, 0], [0, 0, 1, 4, 4, 1, 1, 1, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4, 1, 0], [0, 0, 1, 4, 4, 1, 0, 0, 1, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 4, 4, 4, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 4, 4, 4, 4, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 4, 4, 1, 1, 1, 4, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 8, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 8, 8, 8, 1, 1, 1, 8, 8, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 1, 0, 0, 0, 1, 8, 8, 8, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 1, 8, 1, 1, 1, 8, 1, 0, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 0, 0, 0, 0, 1, 6, 6, 1, 0], [0, 1, 1, 1, 0, 1, 8, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 0, 0, 0, 0, 1, 6, 6, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 0, 0, 0, 0, 1, 6, 6, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 1, 6, 6, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 6, 6, 1, 0], [0, 0, 1, 6, 6, 1, 1, 1, 1, 6, 6, 1, 1, 1, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0]]",FALSE,
0a1d4ef5,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 2, 0, 0, 0, 2, 5, 2, 2, 0, 5, 2, 5, 5, 0, 2, 2, 5, 2, 2, 5, 5, 0, 2, 0, 0, 2, 0, 0, 0], [5, 0, 0, 5, 2, 2, 5, 2, 5, 0, 0, 2, 2, 5, 5, 2, 2, 5, 0, 5, 2, 0, 0, 0, 5, 0, 5, 5, 0, 2], [5, 0, 2, 2, 8, 8, 8, 8, 8, 8, 8, 5, 0, 2, 4, 4, 4, 4, 5, 0, 0, 2, 3, 3, 3, 3, 3, 0, 0, 2], [0, 5, 0, 5, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 4, 4, 4, 4, 0, 0, 2, 0, 3, 3, 3, 3, 3, 0, 2, 0], [5, 0, 5, 0, 8, 8, 8, 8, 8, 8, 8, 2, 2, 0, 4, 4, 4, 4, 2, 2, 0, 2, 3, 3, 3, 3, 3, 5, 0, 5], [0, 0, 0, 5, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 4, 4, 4, 4, 0, 0, 2, 2, 3, 3, 3, 3, 3, 0, 0, 2], [0, 0, 0, 2, 5, 5, 5, 2, 2, 0, 0, 0, 2, 5, 0, 5, 2, 0, 2, 0, 5, 0, 5, 2, 0, 2, 0, 5, 5, 2], [0, 0, 2, 2, 5, 5, 0, 0, 2, 0, 5, 0, 5, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 5, 2, 0, 0, 0, 5, 2, 0, 5, 2, 0, 0, 5, 2, 0, 0], [0, 2, 0, 2, 0, 0, 2, 0, 0, 0, 2, 5, 2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 5, 0, 5, 0], [0, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 0, 0, 7, 7, 7, 7, 7, 0, 0, 5, 0], [0, 0, 0, 2, 1, 1, 1, 1, 1, 0, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 0, 7, 7, 7, 7, 7, 2, 5, 5, 5], [0, 0, 5, 2, 1, 1, 1, 1, 1, 5, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 2, 7, 7, 7, 7, 7, 0, 2, 5, 2], [2, 5, 0, 2, 1, 1, 1, 1, 1, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 2, 5, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 5, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 7, 7, 7, 7, 7, 2, 0, 2, 2], [0, 0, 2, 0, 0, 5, 0, 2, 0, 2, 0, 5, 5, 0, 0, 2, 0, 5, 2, 2, 2, 2, 0, 5, 2, 0, 0, 2, 2, 0], [0, 0, 5, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 2, 2, 0, 0, 0, 0, 5, 5, 0, 2, 0, 0, 5], [0, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 0, 5, 4, 4, 4, 4, 4, 2, 0, 0, 2, 0, 0, 5, 0, 0, 0, 2, 0], [0, 0, 2, 0, 8, 8, 8, 8, 8, 2, 2, 5, 0, 4, 4, 4, 4, 4, 0, 2, 5, 0, 1, 1, 1, 1, 1, 2, 0, 2], [2, 2, 0, 0, 8, 8, 8, 8, 8, 5, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 5, 5, 1, 1, 1, 1, 1, 5, 0, 0], [2, 5, 5, 0, 8, 8, 8, 8, 8, 0, 5, 0, 5, 4, 4, 4, 4, 4, 0, 5, 0, 2, 1, 1, 1, 1, 1, 0, 0, 0], [2, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 5, 2, 5, 0, 0, 2, 5, 0, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0], [0, 5, 2, 5, 5, 2, 2, 0, 2, 0, 0, 2, 5, 0, 5, 0, 0, 5, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], [2, 0, 0, 0, 2, 5, 0, 0, 5, 5, 2, 0, 2, 2, 0, 0, 5, 5, 0, 0, 0, 5, 0, 2, 0, 5, 0, 0, 2, 5], [0, 0, 5, 0, 0, 0, 0, 2, 0, 5, 5, 0, 2, 5, 0, 0, 0, 2, 0, 2, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5], [0, 2, 0, 2, 0, 5, 2, 5, 0, 5, 2, 0, 0, 0, 0, 0, 0, 5, 2, 2, 5, 2, 0, 0, 0, 0, 0, 5, 5, 0], [0, 0, 0, 5, 5, 0, 2, 2, 2, 0, 0, 2, 0, 2, 0, 0, 5, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 5, 2, 2, 2, 0, 0, 0, 5], [2, 2, 2, 0, 0, 0, 0, 2, 0, 5, 5, 0, 0, 0, 5, 0, 2, 0, 5, 0, 0, 0, 5, 0, 2, 0, 2, 2, 2, 5], [5, 0, 0, 2, 2, 5, 2, 2, 0, 0, 0, 0, 2, 5, 0, 2, 0, 5, 0, 0, 5, 5, 5, 0, 0, 2, 0, 0, 0, 5]],
then this grids change to output grids below
[[8, 4, 3], [1, 3, 7], [8, 4, 1]].

Example 2
If input grids are like that
[[0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 2, 8, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 8, 8, 2, 0, 0, 0, 0, 0, 0], [8, 0, 2, 3, 3, 3, 3, 3, 3, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [8, 0, 8, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0, 8, 9, 9, 9, 9, 9, 8, 8], [2, 8, 0, 3, 3, 3, 3, 3, 3, 8, 8, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 9, 9, 9, 9, 9, 0, 0], [8, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 2, 2, 2, 8, 8, 8, 8, 0, 2, 8, 2, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 8, 0, 0, 8, 0, 0, 2, 8, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 8, 0, 9, 9, 9, 9, 9, 8, 8], [0, 8, 8, 8, 0, 0, 2, 0, 8, 0, 0, 0, 2, 8, 8, 0, 0, 0, 8, 0, 2, 0, 2, 0, 8, 0, 0, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 8, 8, 2, 0, 0, 2, 0, 0, 2, 0, 0, 8, 2, 8, 0], [8, 0, 0, 0, 0, 0, 8, 2, 8, 2, 8, 0, 0, 0, 0, 0, 0, 2, 8, 2, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 2, 6, 6, 6, 6, 0, 8, 0, 0, 4, 4, 4, 4, 4, 4, 2, 0, 0, 0, 8, 0, 0, 2, 0, 0, 0, 2, 0], [8, 0, 8, 6, 6, 6, 6, 0, 8, 0, 8, 4, 4, 4, 4, 4, 4, 2, 0, 2, 2, 2, 0, 1, 1, 1, 1, 1, 8, 0], [0, 2, 0, 6, 6, 6, 6, 8, 0, 2, 2, 4, 4, 4, 4, 4, 4, 8, 0, 8, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2], [0, 2, 8, 6, 6, 6, 6, 8, 0, 8, 0, 4, 4, 4, 4, 4, 4, 0, 8, 2, 2, 0, 2, 1, 1, 1, 1, 1, 0, 8], [0, 0, 2, 6, 6, 6, 6, 0, 0, 0, 2, 4, 4, 4, 4, 4, 4, 0, 0, 8, 0, 8, 8, 1, 1, 1, 1, 1, 8, 0], [0, 0, 0, 6, 6, 6, 6, 0, 0, 2, 8, 0, 8, 8, 2, 8, 0, 8, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2], [2, 8, 0, 6, 6, 6, 6, 0, 2, 0, 0, 0, 0, 2, 8, 0, 0, 0, 2, 8, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 2, 0, 0, 0, 0, 0, 8, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 0, 0, 0, 2], [0, 0, 2, 0, 8, 0, 0, 0, 2, 8, 0, 8, 0, 0, 0, 8, 0, 8, 8, 8, 0, 8, 0, 0, 8, 0, 2, 2, 0, 2], [8, 0, 0, 0, 0, 0, 8, 8, 2, 2, 8, 0, 8, 2, 2, 8, 0, 0, 0, 0, 8, 0, 2, 0, 8, 0, 0, 0, 8, 2], [2, 2, 0, 0, 0, 0, 2, 8, 0, 8, 0, 0, 2, 2, 8, 0, 0, 2, 0, 0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 8], [0, 8, 8, 0, 0, 8, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 8, 2, 0, 0], [0, 0, 2, 8, 2, 0, 2, 0, 0, 8, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 8, 8, 0, 8, 0, 2, 0, 0, 0, 8], [2, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 8, 8, 0], [8, 2, 0, 0, 0, 8, 0, 8, 0, 8, 2, 0, 0, 0, 8, 0, 0, 8, 0, 2, 0, 0, 8, 0, 2, 2, 8, 0, 0, 0], [0, 8, 0, 2, 2, 8, 2, 8, 0, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 8, 0, 8, 0, 0, 8, 2], [0, 0, 2, 8, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 2, 0, 2, 2, 0, 0, 8, 0, 2, 0, 0, 8, 8], [0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 2, 8, 0, 0, 8, 0], [8, 2, 0, 2, 8, 8, 0, 0, 0, 2, 0, 0, 0, 8, 8, 0, 8, 0, 0, 0, 8, 2, 8, 8, 0, 2, 8, 2, 2, 2], [2, 0, 8, 8, 0, 0, 0, 8, 0, 0, 8, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 8, 0, 8, 0, 0, 2, 8, 0, 0]],
then this grids change to output grids below
[[3, 1, 9], [6, 4, 1]].

Quiz
If input grids are like that
[[5, 5, 0, 0, 0, 8, 5, 0, 0, 8, 8, 8, 0, 8, 0, 0, 5, 5, 0, 5, 0, 5, 8, 0, 0, 0, 0, 0, 0, 8], [8, 8, 5, 5, 0, 8, 0, 0, 5, 8, 0, 0, 5, 8, 0, 8, 0, 8, 0, 8, 0, 0, 5, 0, 8, 8, 0, 0, 0, 0], [0, 5, 5, 5, 0, 5, 8, 0, 5, 8, 0, 0, 0, 5, 0, 5, 8, 8, 5, 8, 5, 0, 5, 0, 0, 0, 0, 0, 5, 5], [0, 0, 0, 5, 5, 5, 8, 8, 0, 0, 0, 5, 8, 3, 3, 3, 3, 3, 5, 0, 8, 0, 8, 8, 0, 8, 8, 0, 0, 5], [0, 5, 0, 5, 2, 2, 2, 2, 2, 2, 0, 5, 8, 3, 3, 3, 3, 3, 8, 8, 8, 3, 3, 3, 3, 3, 3, 0, 0, 5], [8, 8, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 5, 8, 0, 3, 3, 3, 3, 3, 3, 0, 8, 0], [8, 5, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 8, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 5, 0, 0], [5, 0, 8, 8, 2, 2, 2, 2, 2, 2, 8, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 5], [0, 0, 0, 5, 0, 8, 0, 5, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0], [0, 0, 5, 0, 5, 5, 0, 8, 0, 8, 8, 0, 0, 5, 8, 0, 0, 0, 0, 5, 0, 0, 1, 1, 1, 1, 1, 5, 5, 5], [8, 0, 8, 4, 4, 4, 4, 4, 5, 0, 5, 8, 7, 7, 7, 7, 7, 0, 0, 8, 5, 0, 1, 1, 1, 1, 1, 0, 5, 0], [8, 5, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 5, 0, 0, 1, 1, 1, 1, 1, 0, 5, 0], [0, 8, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 5, 0, 0, 5, 8, 1, 1, 1, 1, 1, 5, 5, 0], [0, 8, 5, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 8, 0, 8, 0, 1, 1, 1, 1, 1, 5, 5, 0], [0, 5, 8, 4, 4, 4, 4, 4, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 5, 8], [8, 8, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 5, 8, 0, 5, 0, 5, 8, 0, 0, 0, 5], [0, 8, 0, 5, 0, 0, 0, 5, 5, 8, 5, 5, 3, 3, 3, 3, 3, 3, 3, 8, 0, 5, 0, 7, 7, 7, 7, 5, 0, 5], [0, 0, 5, 5, 0, 5, 1, 1, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 8, 8, 8, 7, 7, 7, 7, 8, 0, 8], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 5, 8, 3, 3, 3, 3, 3, 3, 3, 8, 5, 0, 8, 7, 7, 7, 7, 0, 5, 5], [0, 5, 0, 8, 0, 5, 1, 1, 1, 1, 5, 0, 3, 3, 3, 3, 3, 3, 3, 5, 0, 5, 0, 7, 7, 7, 7, 5, 0, 0], [0, 0, 5, 0, 0, 8, 1, 1, 1, 1, 0, 0, 5, 8, 0, 0, 5, 8, 8, 0, 0, 8, 0, 7, 7, 7, 7, 8, 0, 0], [5, 0, 5, 8, 0, 0, 8, 0, 5, 0, 0, 0, 0, 0, 5, 8, 0, 0, 5, 8, 0, 0, 5, 0, 8, 8, 8, 0, 0, 5], [0, 5, 0, 5, 5, 4, 4, 4, 5, 0, 5, 0, 6, 6, 6, 6, 6, 6, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 5, 5], [0, 8, 0, 5, 5, 4, 4, 4, 0, 8, 5, 0, 6, 6, 6, 6, 6, 6, 0, 0, 2, 2, 2, 2, 2, 2, 5, 0, 8, 5], [8, 0, 0, 0, 0, 4, 4, 4, 5, 0, 8, 0, 6, 6, 6, 6, 6, 6, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 4, 5, 5, 0, 8, 6, 6, 6, 6, 6, 6, 5, 0, 2, 2, 2, 2, 2, 2, 0, 0, 8, 0], [5, 5, 0, 0, 0, 5, 5, 8, 5, 8, 0, 0, 6, 6, 6, 6, 6, 6, 8, 5, 8, 0, 0, 8, 5, 0, 8, 5, 0, 0], [0, 5, 8, 5, 0, 8, 5, 5, 5, 0, 8, 8, 0, 0, 5, 0, 8, 5, 5, 0, 0, 0, 5, 8, 0, 0, 0, 0, 8, 5], [0, 0, 0, 0, 8, 0, 0, 5, 8, 8, 8, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 0, 8, 0, 5, 5, 0, 0, 8], [8, 0, 5, 0, 0, 0, 0, 0, 5, 8, 8, 8, 0, 0, 5, 5, 5, 5, 8, 5, 0, 0, 5, 8, 5, 8, 5, 5, 0, 5]],
then output grids?

=========","The output grids would be [[3, 1, 7], [2, 4, 1]].","[[3, 1, 7], [2, 4, 1]]","[[3, 1, 7], [2, 4, 1]]","[[2, 3, 3], [4, 7, 1], [1, 3, 7], [4, 6, 2]]",FALSE,
0a2355a6,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8], [0, 0, 8, 8, 8, 0, 0, 8, 8, 8, 8], [0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 8, 0, 8, 0, 0, 0, 8, 8, 8], [0, 0, 8, 0, 8, 0, 0, 0, 8, 0, 8], [0, 0, 8, 8, 8, 0, 0, 0, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [8, 0, 8, 0, 0, 0, 8, 8, 8, 8, 0], [8, 8, 8, 8, 8, 0, 8, 0, 0, 8, 0], [8, 0, 0, 0, 8, 0, 8, 0, 0, 8, 0], [8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 2, 0, 2, 0, 0, 0, 1, 1, 1], [0, 0, 2, 0, 2, 0, 0, 0, 1, 0, 1], [0, 0, 2, 2, 2, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 0, 0, 1, 1, 1, 1, 0], [3, 3, 3, 3, 3, 0, 1, 0, 0, 1, 0], [3, 0, 0, 0, 3, 0, 1, 0, 0, 1, 0], [3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0], [0, 0, 8, 0, 0, 8, 0, 0, 8, 8, 8, 0, 0, 8, 0, 8, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 0, 8, 0, 0, 8, 8, 8, 0], [0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 8, 0, 8, 0], [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [0, 0, 1, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 2, 0, 2, 0], [0, 0, 1, 1, 1, 1, 1, 1, 2, 0, 2, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 5, 5, 5, 5, 5, 5, 5], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 5, 0, 0, 5, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5]].

The pattern here is that each separate group of 8's in the input grid is replaced with a unique number in the output grid, starting from 1 and incrementing by 1 for each new group.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [0, 0, 1, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 2, 0, 2, 0], [0, 0, 1, 1, 1, 1, 1, 1, 2, 0, 2, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 5, 5, 5, 5, 5, 5, 5], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 5, 0, 0, 5, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [0, 0, 1, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 2, 0, 2, 0], [0, 0, 1, 1, 1, 1, 1, 1, 2, 0, 2, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 5, 5, 5, 5, 5, 5, 5], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 5, 0, 0, 5, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [0, 0, 4, 0, 0, 4, 0, 0, 4, 4, 4, 0, 0, 2, 0, 2, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 3, 0, 0, 3, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3]]",FALSE,
0b17323b,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern in this problem is that for each row that contains a 1, a 2 is added three rows below the last 1 in the column that contains the 1. If there is no room to add a 2 three rows below (because it would be outside of the grid), then no 2 is added.","[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
0bb8deee,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 3, 3], [0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 3, 3, 0], [0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 0, 3, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 4, 0, 4, 0, 0, 0, 2, 0, 5, 5, 0, 0], [0, 0, 4, 0, 0, 0, 0, 2, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[1, 1, 0, 0, 3, 3], [0, 1, 0, 3, 3, 0], [0, 1, 1, 0, 3, 0], [0, 4, 0, 5, 5, 0], [4, 0, 4, 0, 5, 0], [0, 4, 0, 0, 0, 5]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0], [0, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 0, 1, 0, 0, 8, 0, 8, 0, 0, 0], [0, 5, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 2, 2, 3, 0, 0], [2, 2, 2, 0, 3, 3], [0, 2, 0, 0, 3, 0], [0, 0, 5, 8, 0, 8], [5, 5, 5, 0, 8, 0], [0, 5, 0, 8, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 3, 3, 0], [0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 3, 3, 0], [0, 0, 2, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0], [0, 2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0], [0, 0, 6, 6, 0, 0, 1, 0, 0, 4, 0, 4, 0], [0, 6, 0, 6, 0, 0, 1, 0, 0, 0, 4, 0, 0], [0, 6, 6, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[2, 2, 3, 3, 3, 0], [0, 2, 0, 0, 3, 3], [2, 0, 2, 0, 3, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 6, 6, 4, 0, 0], [6, 0, 6, 0, 4, 0], [6, 6, 0, 0, 0, 0]].

The pattern in this problem is that the objects are moved to the left side of the grid, and the grid is then cropped to only include rows that contain objects. The objects maintain their relative positions to each other.","[[2, 2, 3, 3, 3, 0], [0, 2, 0, 0, 3, 3], [2, 0, 2, 0, 3, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 6, 6, 4, 0, 0], [6, 0, 6, 0, 4, 0], [6, 6, 0, 0, 0, 0]]","[[2, 2, 3, 3, 3, 0], [0, 2, 0, 0, 3, 3], [2, 0, 2, 0, 3, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 6, 6, 4, 0, 0], [6, 0, 6, 0, 4, 0], [6, 6, 0, 0, 0, 0]]","[[0, 2, 2, 3, 3, 3], [0, 2, 0, 0, 3, 3], [2, 0, 2, 3, 0, 0], [0, 6, 6, 0, 4, 0], [6, 0, 6, 4, 0, 4], [6, 6, 0, 0, 4, 0]]",FALSE,
0becf7df,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[4, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 7, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 3, 4, 4, 0, 0], [0, 0, 0, 0, 0, 3, 2, 4, 0, 0], [0, 0, 0, 7, 7, 3, 2, 4, 0, 0], [0, 0, 0, 7, 3, 3, 2, 0, 0, 0], [0, 0, 0, 7, 0, 0, 2, 2, 0, 0], [0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[4, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 7, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 7, 2, 2, 0, 0], [0, 0, 0, 0, 0, 7, 4, 2, 0, 0], [0, 0, 0, 3, 3, 7, 4, 2, 0, 0], [0, 0, 0, 3, 7, 7, 4, 0, 0, 0], [0, 0, 0, 3, 0, 0, 4, 4, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[1, 3, 0, 0, 0, 0, 0, 0, 0, 0], [2, 8, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 3, 3, 3, 3, 1, 8, 0, 0], [0, 0, 3, 3, 2, 0, 8, 8, 0, 0], [0, 0, 0, 0, 2, 0, 8, 8, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[1, 3, 0, 0, 0, 0, 0, 0, 0, 0], [2, 8, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 0, 0, 0], [0, 0, 1, 1, 1, 1, 3, 2, 0, 0], [0, 0, 1, 1, 8, 0, 2, 2, 0, 0], [0, 0, 0, 0, 8, 0, 2, 2, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[8, 9, 0, 0, 0, 0, 0, 0, 0, 0], [2, 4, 0, 0, 0, 9, 9, 0, 0, 0], [0, 0, 0, 8, 8, 8, 9, 0, 0, 0], [0, 0, 0, 2, 8, 8, 9, 0, 0, 0], [0, 0, 0, 2, 4, 2, 0, 0, 0, 0], [0, 0, 0, 2, 2, 4, 0, 0, 0, 0], [0, 0, 0, 2, 4, 4, 0, 0, 0, 0], [0, 0, 0, 9, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[8, 9, 0, 0, 0, 0, 0, 0, 0, 0], [2, 4, 0, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 9, 9, 2, 2, 0, 0, 0], [0, 0, 0, 8, 9, 2, 2, 0, 0, 0], [0, 0, 0, 2, 4, 9, 0, 0, 0, 0], [0, 0, 0, 2, 4, 4, 0, 0, 0, 0], [0, 0, 0, 2, 4, 4, 0, 0, 0, 0], [0, 0, 0, 8, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

The pattern in this problem is that the objects in the grid are moving upwards. The objects in the bottom row move to the top row, the objects in the second bottom row move to the second top row, and so on.","[[8, 9, 0, 0, 0, 0, 0, 0, 0, 0], [2, 4, 0, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 9, 9, 2, 2, 0, 0, 0], [0, 0, 0, 8, 9, 2, 2, 0, 0, 0], [0, 0, 0, 2, 4, 9, 0, 0, 0, 0], [0, 0, 0, 2, 4, 4, 0, 0, 0, 0], [0, 0, 0, 2, 4, 4, 0, 0, 0, 0], [0, 0, 0, 8, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[8, 9, 0, 0, 0, 0, 0, 0, 0, 0], [2, 4, 0, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 9, 9, 2, 2, 0, 0, 0], [0, 0, 0, 8, 9, 2, 2, 0, 0, 0], [0, 0, 0, 2, 4, 9, 0, 0, 0, 0], [0, 0, 0, 2, 4, 4, 0, 0, 0, 0], [0, 0, 0, 2, 4, 4, 0, 0, 0, 0], [0, 0, 0, 8, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[8, 9, 0, 0, 0, 0, 0, 0, 0, 0], [2, 4, 0, 0, 0, 8, 8, 0, 0, 0], [0, 0, 0, 9, 9, 9, 8, 0, 0, 0], [0, 0, 0, 4, 9, 9, 8, 0, 0, 0], [0, 0, 0, 4, 2, 4, 0, 0, 0, 0], [0, 0, 0, 4, 4, 2, 0, 0, 0, 0], [0, 0, 0, 4, 2, 2, 0, 0, 0, 0], [0, 0, 0, 8, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
0c786b71,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[6, 2, 4, 2], [2, 2, 6, 6], [6, 4, 2, 4]],
then this grids change to output grids below
[[4, 2, 4, 6, 6, 4, 2, 4], [6, 6, 2, 2, 2, 2, 6, 6], [2, 4, 2, 6, 6, 2, 4, 2], [2, 4, 2, 6, 6, 2, 4, 2], [6, 6, 2, 2, 2, 2, 6, 6], [4, 2, 4, 6, 6, 4, 2, 4]].

Example 2
If input grids are like that
[[5, 5, 9, 9], [9, 5, 5, 5], [5, 7, 5, 7]],
then this grids change to output grids below
[[7, 5, 7, 5, 5, 7, 5, 7], [5, 5, 5, 9, 9, 5, 5, 5], [9, 9, 5, 5, 5, 5, 9, 9], [9, 9, 5, 5, 5, 5, 9, 9], [5, 5, 5, 9, 9, 5, 5, 5], [7, 5, 7, 5, 5, 7, 5, 7]].

Quiz
If input grids are like that
[[8, 5, 7, 8], [7, 7, 8, 8], [5, 5, 8, 5]],
then output grids?

=========","The pattern in this problem is that the input grid is mirrored both horizontally and vertically to form the output grid. 

So, if the input grid is 
[[8, 5, 7, 8], [7, 7, 8, 8], [5, 5, 8, 5]],

First, we mirror the grid horizontally:
[[8, 5, 7, 8, 8, 7, 5, 8], [7, 7, 8, 8, 8, 8, 7, 7], [5, 5, 8, 5, 5, 8, 5, 5]]

Then, we mirror the grid vertically:
[[8, 5, 7, 8, 8, 7, 5, 8], 
 [7, 7, 8, 8, 8, 8, 7, 7], 
 [5, 5, 8, 5, 5, 8, 5, 5], 
 [5, 5, 8, 5, 5, 8, 5, 5], 
 [7, 7, 8, 8, 8, 8, 7, 7], 
 [8, 5, 7, 8, 8, 7, 5, 8]]

So, the output grid is 
[[8, 5, 7, 8, 8, 7, 5, 8], 
 [7, 7, 8, 8, 8, 8, 7, 7], 
 [5, 5, 8, 5, 5, 8, 5, 5], 
 [5, 5, 8, 5, 5, 8, 5, 5], 
 [7, 7, 8, 8, 8, 8, 7, 7], 
 [8, 5, 7, 8, 8, 7, 5, 8]].","[[8, 5, 7, 8], [7, 7, 8, 8], [5, 5, 8, 5]],

First, we mirror the grid horizontally:
[[8, 5, 7, 8, 8, 7, 5, 8], [7, 7, 8, 8, 8, 8, 7, 7], [5, 5, 8, 5, 5, 8, 5, 5]]

Then, we mirror the grid vertically:
[[8, 5, 7, 8, 8, 7, 5, 8], 
 [7, 7, 8, 8, 8, 8, 7, 7], 
 [5, 5, 8, 5, 5, 8, 5, 5], 
 [5, 5, 8, 5, 5, 8, 5, 5], 
 [7, 7, 8, 8, 8, 8, 7, 7], 
 [8, 5, 7, 8, 8, 7, 5, 8]]

So, the output grid is 
[[8, 5, 7, 8, 8, 7, 5, 8], 
 [7, 7, 8, 8, 8, 8, 7, 7], 
 [5, 5, 8, 5, 5, 8, 5, 5], 
 [5, 5, 8, 5, 5, 8, 5, 5], 
 [7, 7, 8, 8, 8, 8, 7, 7], 
 [8, 5, 7, 8, 8, 7, 5, 8]]","[[8, 5, 7, 8, 8, 7, 5, 8], 
 [7, 7, 8, 8, 8, 8, 7, 7], 
 [5, 5, 8, 5, 5, 8, 5, 5], 
 [5, 5, 8, 5, 5, 8, 5, 5], 
 [7, 7, 8, 8, 8, 8, 7, 7], 
 [8, 5, 7, 8, 8, 7, 5, 8]]","[[5, 8, 5, 5, 5, 5, 8, 5], [8, 8, 7, 7, 7, 7, 8, 8], [8, 7, 5, 8, 8, 5, 7, 8], [8, 7, 5, 8, 8, 5, 7, 8], [8, 8, 7, 7, 7, 7, 8, 8], [5, 8, 5, 5, 5, 5, 8, 5]]",FALSE,
0c9aba6e,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 2, 2, 0], [2, 0, 0, 0], [0, 2, 0, 2], [2, 2, 2, 2], [0, 0, 2, 0], [0, 0, 2, 2], [7, 7, 7, 7], [0, 6, 6, 0], [0, 0, 0, 0], [6, 6, 6, 6], [6, 6, 0, 6], [0, 6, 6, 6], [0, 0, 6, 0]],
then this grids change to output grids below
[[8, 0, 0, 8], [0, 8, 8, 8], [0, 0, 0, 0], [0, 0, 0, 0], [8, 0, 0, 0], [8, 8, 0, 0]].

Example 2
If input grids are like that
[[2, 2, 0, 2], [2, 0, 2, 2], [2, 2, 0, 0], [0, 2, 0, 2], [0, 2, 2, 0], [2, 0, 0, 2], [7, 7, 7, 7], [6, 0, 6, 6], [0, 6, 0, 0], [0, 0, 0, 0], [0, 0, 0, 6], [6, 6, 0, 0], [6, 0, 6, 0]],
then this grids change to output grids below
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 8, 8], [8, 0, 8, 0], [0, 0, 0, 8], [0, 8, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 2], [0, 2, 2, 0], [2, 0, 0, 2], [0, 2, 2, 0], [2, 0, 2, 2], [0, 0, 0, 2], [7, 7, 7, 7], [6, 6, 0, 6], [6, 6, 6, 0], [0, 0, 0, 0], [6, 6, 0, 6], [6, 0, 6, 0], [0, 0, 6, 6]],
then output grids?

=========","The output grids would be 
[[0, 0, 0, 0], [0, 0, 0, 0], [8, 0, 0, 8], [0, 8, 8, 0], [8, 0, 0, 8], [0, 0, 0, 0]]. 

The pattern in this problem is that the 2's in the input grid are replaced with 8's in the output grid, and the 6's in the input grid are ignored. The output grid is also smaller, with only the rows containing 2's in the input grid being included. The 8's in the output grid are placed in the same positions as the 2's in the input grid.","[[0, 0, 0, 0], [0, 0, 0, 0], [8, 0, 0, 8], [0, 8, 8, 0], [8, 0, 0, 8], [0, 0, 0, 0]]","[[0, 0, 0, 0], [0, 0, 0, 0], [8, 0, 0, 8], [0, 8, 8, 0], [8, 0, 0, 8], [0, 0, 0, 0]]","[[0, 0, 8, 0], [0, 0, 0, 8], [0, 8, 8, 0], [0, 0, 0, 0], [0, 8, 0, 0], [8, 8, 0, 0]]",FALSE,
0e671a1a,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 4, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 0], [0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern here is that the number 5 is filled in a straight line between the numbers 2 and 4, and also filled in a straight line between the numbers 2 and 3.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
0f63c0b9,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]].

The pattern here is that each non-zero number in the input grid expands to fill its row and column in the output grid, with the exception of cells that are already filled by a number that appeared earlier in the grid.","[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]","[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]","[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]",FALSE,
103eff5b,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 1, 1, 3, 3, 3, 3, 0, 0, 0], [0, 0, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0], [0, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0], [0, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 4, 4, 4, 0, 0, 0, 0, 0], [0, 2, 2, 2, 4, 4, 4, 0, 0, 0, 0, 0], [0, 2, 2, 2, 4, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 4, 4, 4, 0, 0, 0, 1, 1, 1, 0, 0], [0, 4, 4, 4, 0, 0, 0, 1, 1, 1, 0, 0], [0, 4, 4, 4, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4",not_complete,not_complete,"[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
12422b43,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[5, 0, 6, 0, 0], [5, 4, 4, 4, 0], [0, 0, 6, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]],
then this grids change to output grids below
[[5, 0, 6, 0, 0], [5, 4, 4, 4, 0], [0, 0, 6, 0, 0], [0, 0, 6, 0, 0], [0, 4, 4, 4, 0]].

Example 2
If input grids are like that
[[5, 0, 8, 8, 0, 0, 0], [5, 0, 0, 7, 0, 0, 0], [5, 0, 0, 4, 4, 0, 0], [0, 0, 3, 3, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[5, 0, 8, 8, 0, 0, 0], [5, 0, 0, 7, 0, 0, 0], [5, 0, 0, 4, 4, 0, 0], [0, 0, 3, 3, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 4, 4, 0, 0]].

Quiz
If input grids are like that
[[5, 0, 4, 4, 4, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that the objects in the grid are mirrored vertically. The objects in the top half of the grid are copied to the bottom half in reverse order. 

So, if the input grids are like that
[[5, 0, 4, 4, 4, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then the output grids would be
[[5, 0, 4, 4, 4, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 4, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0]].","[[5, 0, 4, 4, 4, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then the output grids would be
[[5, 0, 4, 4, 4, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 4, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0]]","[[5, 0, 4, 4, 4, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 4, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0]]","[[5, 0, 4, 4, 4, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 4, 4, 4, 0, 0], [0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0], [0, 0, 4, 4, 4, 0, 0], [0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0]]",FALSE,
12997ef3,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 3, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[2, 0, 2, 3, 0, 3, 4, 0, 4], [0, 2, 0, 0, 3, 0, 0, 4, 0], [2, 2, 2, 3, 3, 3, 4, 4, 4]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 8, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 3, 3], [3, 3, 3], [0, 3, 0], [0, 6, 6], [6, 6, 6], [0, 6, 0], [0, 8, 8], [8, 8, 8], [0, 8, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 8, 0, 3, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 2, 2], [2, 2, 2], [0, 2, 0], [0, 8, 8], [8, 8, 8], [0, 8, 0], [0, 3, 3], [3, 3, 3], [0, 3, 0], [0, 6, 6], [6, 6, 6], [0, 6, 0]].

The pattern in this problem is that each non-zero number in the input grid is expanded into a 3x3 square in the output grid, with the original number at the center. The rest of the square is filled with the same number, except for the corners, which are filled with 0.","[[0, 2, 2], [2, 2, 2], [0, 2, 0], [0, 8, 8], [8, 8, 8], [0, 8, 0], [0, 3, 3], [3, 3, 3], [0, 3, 0], [0, 6, 6], [6, 6, 6], [0, 6, 0]]","[[0, 2, 2], [2, 2, 2], [0, 2, 0], [0, 8, 8], [8, 8, 8], [0, 8, 0], [0, 3, 3], [3, 3, 3], [0, 3, 0], [0, 6, 6], [6, 6, 6], [0, 6, 0]]","[[0, 2, 2, 0, 8, 8, 0, 3, 3, 0, 6, 6], [2, 2, 0, 8, 8, 0, 3, 3, 0, 6, 6, 0], [2, 2, 0, 8, 8, 0, 3, 3, 0, 6, 6, 0]]",FALSE,
12eac192,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 1, 0, 7, 7, 7, 0], [8, 8, 0, 0, 5, 5, 0, 0], [0, 8, 8, 0, 0, 5, 5, 0], [0, 1, 1, 0, 8, 0, 0, 1], [0, 7, 0, 1, 8, 0, 0, 0], [8, 0, 0, 0, 1, 0, 7, 0], [0, 8, 8, 8, 1, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 3, 0, 7, 7, 7, 0], [8, 8, 0, 0, 5, 5, 0, 0], [0, 8, 8, 0, 0, 5, 5, 0], [0, 3, 3, 0, 3, 0, 0, 3], [0, 3, 0, 3, 3, 0, 0, 0], [3, 0, 0, 0, 3, 0, 3, 0], [0, 8, 8, 8, 3, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 1, 8, 1, 1, 1, 0], [1, 5, 1, 7, 1, 1, 0, 0], [0, 8, 0, 7, 7, 7, 8, 8], [0, 8, 8, 0, 0, 0, 8, 0], [0, 7, 0, 0, 8, 5, 5, 0], [1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 8, 7, 7, 8, 0, 0], [0, 0, 8, 7, 7, 0, 8, 8], [0, 8, 8, 0, 8, 0, 8, 8]],
then this grids change to output grids below
[[0, 0, 3, 3, 1, 1, 1, 0], [3, 3, 3, 7, 1, 1, 0, 0], [0, 8, 0, 7, 7, 7, 8, 8], [0, 8, 8, 0, 0, 0, 8, 0], [0, 3, 0, 0, 3, 3, 3, 0], [3, 0, 0, 0, 0, 0, 0, 3], [3, 0, 8, 7, 7, 3, 0, 0], [0, 0, 8, 7, 7, 0, 8, 8], [0, 8, 8, 0, 3, 0, 8, 8]].

Quiz
If input grids are like that
[[0, 5, 0, 1, 5, 5, 0, 5], [1, 1, 0, 0, 0, 1, 1, 0], [0, 7, 7, 0, 0, 0, 0, 5], [1, 1, 0, 5, 0, 1, 0, 0], [0, 1, 0, 5, 5, 5, 0, 1], [0, 7, 0, 0, 7, 0, 0, 7], [1, 0, 1, 0, 0, 0, 1, 7], [0, 0, 1, 1, 0, 1, 0, 7]],
then output grids?

=========","The pattern in this problem is that the number 1 is replaced by the number 3 in the same position. So, if the input grids are like that
[[0, 5, 0, 1, 5, 5, 0, 5], [1, 1, 0, 0, 0, 1, 1, 0], [0, 7, 7, 0, 0, 0, 0, 5], [1, 1, 0, 5, 0, 1, 0, 0], [0, 1, 0, 5, 5, 5, 0, 1], [0, 7, 0, 0, 7, 0, 0, 7], [1, 0, 1, 0, 0, 0, 1, 7], [0, 0, 1, 1, 0, 1, 0, 7]],
then the output grids will be
[[0, 5, 0, 3, 5, 5, 0, 5], [3, 3, 0, 0, 0, 3, 3, 0], [0, 7, 7, 0, 0, 0, 0, 5], [3, 3, 0, 5, 0, 3, 0, 0], [0, 3, 0, 5, 5, 5, 0, 3], [0, 7, 0, 0, 7, 0, 0, 7], [3, 0, 3, 0, 0, 0, 3, 7], [0, 0, 3, 3, 0, 3, 0, 7]].","[[0, 5, 0, 1, 5, 5, 0, 5], [1, 1, 0, 0, 0, 1, 1, 0], [0, 7, 7, 0, 0, 0, 0, 5], [1, 1, 0, 5, 0, 1, 0, 0], [0, 1, 0, 5, 5, 5, 0, 1], [0, 7, 0, 0, 7, 0, 0, 7], [1, 0, 1, 0, 0, 0, 1, 7], [0, 0, 1, 1, 0, 1, 0, 7]],
then the output grids will be
[[0, 5, 0, 3, 5, 5, 0, 5], [3, 3, 0, 0, 0, 3, 3, 0], [0, 7, 7, 0, 0, 0, 0, 5], [3, 3, 0, 5, 0, 3, 0, 0], [0, 3, 0, 5, 5, 5, 0, 3], [0, 7, 0, 0, 7, 0, 0, 7], [3, 0, 3, 0, 0, 0, 3, 7], [0, 0, 3, 3, 0, 3, 0, 7]]","[[0, 5, 0, 3, 5, 5, 0, 5], [3, 3, 0, 0, 0, 3, 3, 0], [0, 7, 7, 0, 0, 0, 0, 5], [3, 3, 0, 5, 0, 3, 0, 0], [0, 3, 0, 5, 5, 5, 0, 3], [0, 7, 0, 0, 7, 0, 0, 7], [3, 0, 3, 0, 0, 0, 3, 7], [0, 0, 3, 3, 0, 3, 0, 7]]","[[0, 3, 0, 3, 3, 3, 0, 3], [3, 3, 0, 0, 0, 3, 3, 0], [0, 3, 3, 0, 0, 0, 0, 3], [1, 1, 0, 5, 0, 3, 0, 0], [0, 1, 0, 5, 5, 5, 0, 3], [0, 3, 0, 0, 3, 0, 0, 7], [3, 0, 1, 0, 0, 0, 3, 7], [0, 0, 1, 1, 0, 3, 0, 7]]",FALSE,
136b0064,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[1, 1, 0, 0, 2, 0, 2, 4, 0, 0, 0, 5, 0, 0, 0], [1, 0, 1, 0, 2, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 2, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [6, 0, 6, 0, 3, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 3, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 2, 2, 0], [0, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[2, 0, 2, 0, 6, 0, 6, 4, 0, 5, 0, 0, 0, 0, 0], [2, 0, 2, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 3, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 3, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 6, 0, 6, 4, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [6, 0, 6, 0, 1, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 1, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 5, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 6, 0, 0], [0, 3, 3, 3, 3, 0, 0], [0, 6, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[1, 1, 0, 0, 1, 1, 0, 4, 0, 0, 5, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 1, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 1, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [6, 0, 6, 0, 6, 0, 6, 4, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 3, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 3, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [6, 0, 6, 0, 2, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 2, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 2, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0]].

The pattern here is that the objects are moved to the center column, maintaining their original order from top to bottom. The rest of the grid is filled with zeros.","[[0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 5, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 6, 0, 0], [0, 3, 3, 3, 3, 0, 0], [2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]",FALSE,
137f0df0,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[5, 5, 0, 5, 5, 0, 5, 5, 0, 0], [5, 5, 0, 5, 5, 0, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 0, 5, 5, 0, 5, 5, 0, 0], [5, 5, 0, 5, 5, 0, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 0, 5, 5, 0, 5, 5, 0, 0], [5, 5, 0, 5, 5, 0, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[5, 5, 2, 5, 5, 2, 5, 5, 0, 0], [5, 5, 2, 5, 5, 2, 5, 5, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 1, 1], [5, 5, 2, 5, 5, 2, 5, 5, 0, 0], [5, 5, 2, 5, 5, 2, 5, 5, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 1, 1], [5, 5, 2, 5, 5, 2, 5, 5, 0, 0], [5, 5, 2, 5, 5, 2, 5, 5, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 5, 5, 0, 0, 5, 5, 0, 0], [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 5, 5, 2, 2, 5, 5, 0, 0], [0, 0, 5, 5, 2, 2, 5, 5, 0, 0], [1, 1, 2, 2, 2, 2, 2, 2, 1, 1], [0, 0, 5, 5, 2, 2, 5, 5, 0, 0], [0, 0, 5, 5, 2, 2, 5, 5, 0, 0], [1, 1, 2, 2, 2, 2, 2, 2, 1, 1], [0, 0, 5, 5, 2, 2, 5, 5, 0, 0], [0, 0, 5, 5, 2, 2, 5, 5, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 0, 0, 5, 5, 0, 5, 5], [0, 5, 5, 0, 0, 5, 5, 0, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 0, 0, 5, 5, 0, 5, 5], [0, 5, 5, 0, 0, 5, 5, 0, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 0, 0, 5, 5, 0, 5, 5], [0, 5, 5, 0, 0, 5, 5, 0, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0]].

The pattern here is that the 0's in the middle of the 5's are replaced with 2's, and the 0's in the middle of the grid are replaced with 1's. The 0's at the edges of the grid remain 0's.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0]]","[[0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0]]",FALSE,
140c817e,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
then this grids change to output grids below
[[8, 8, 1, 8, 8, 1, 8, 8, 8, 1, 3, 1, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1], [8, 3, 1, 3, 8, 1, 8, 8, 8, 1, 3, 1, 3], [1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 3, 1, 3, 8, 1, 8, 8, 8, 1, 8, 1, 8], [8, 8, 1, 8, 8, 1, 8, 8, 3, 1, 3, 1, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1], [8, 8, 1, 8, 8, 1, 8, 8, 3, 1, 3, 1, 8], [8, 8, 1, 8, 3, 1, 3, 8, 8, 1, 8, 1, 8], [1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1], [8, 8, 1, 8, 3, 1, 3, 8, 8, 1, 8, 1, 8], [8, 8, 1, 8, 8, 1, 8, 8, 8, 1, 8, 1, 8], [8, 8, 1, 8, 8, 1, 8, 8, 8, 1, 8, 1, 8]].

Example 2
If input grids are like that
[[9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 1, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 1, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9]],
then this grids change to output grids below
[[9, 9, 9, 1, 9, 9, 1, 9, 9], [9, 9, 9, 1, 9, 9, 1, 9, 9], [9, 9, 3, 1, 3, 9, 1, 9, 9], [1, 1, 1, 2, 1, 1, 1, 1, 1], [9, 9, 3, 1, 3, 9, 1, 9, 9], [9, 9, 9, 1, 9, 3, 1, 3, 9], [1, 1, 1, 1, 1, 1, 2, 1, 1], [9, 9, 9, 1, 9, 3, 1, 3, 9], [9, 9, 9, 1, 9, 9, 1, 9, 9]].

Quiz
If input grids are like that
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1]],
then output grids?

=========","The output grids would be:

[[8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 3, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 2]]

The pattern here is that the 1's are surrounded by 2's and 3's in a cross pattern, with the 2's being on the same row or column as the 1's and the 3's being diagonally adjacent to the 1's. The rest of the grid remains as 8's.","[[8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 3, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 2]]","[[8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 3, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 2]]","[[8, 8, 1, 8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 1], [8, 8, 1, 8, 1, 8, 3, 1, 3, 8, 8, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1], [8, 8, 1, 8, 1, 8, 3, 1, 3, 8, 8, 8, 8, 1], [8, 3, 1, 3, 1, 8, 8, 1, 8, 8, 8, 8, 8, 1], [1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 3, 1, 3, 1, 8, 8, 1, 8, 8, 8, 8, 8, 1], [8, 8, 1, 8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 1], [8, 8, 1, 8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 1], [8, 8, 1, 8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 1], [8, 8, 1, 3, 1, 3, 8, 1, 8, 8, 8, 8, 8, 1], [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 1, 3, 1, 3, 8, 1, 8, 8, 8, 8, 3, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]]",FALSE,
14754a24,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 5, 0, 5, 5, 0, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0, 5, 0], [0, 0, 0, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 5, 5, 0, 0, 0], [0, 5, 5, 0, 0, 0, 5, 0, 5, 5, 0, 0, 0, 0, 5, 0, 0, 5, 0], [0, 0, 5, 5, 0, 5, 5, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 0], [0, 0, 5, 0, 0, 4, 0, 5, 0, 5, 0, 5, 0, 0, 0, 5, 5, 0, 5], [0, 0, 5, 0, 4, 5, 4, 5, 5, 0, 5, 0, 0, 0, 5, 4, 5, 5, 5], [5, 0, 0, 0, 0, 4, 0, 0, 5, 5, 0, 0, 0, 0, 5, 4, 4, 5, 0], [5, 0, 5, 5, 5, 5, 0, 5, 0, 0, 0, 5, 0, 5, 0, 4, 5, 0, 0], [5, 5, 0, 0, 5, 0, 5, 0, 5, 5, 0, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 0, 0, 5, 5, 5, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0], [0, 0, 5, 5, 0, 0, 0, 0, 5, 4, 5, 0, 5, 5, 0, 0, 0, 0, 0], [5, 5, 5, 4, 0, 5, 0, 5, 5, 4, 4, 5, 0, 0, 5, 5, 5, 5, 0], [0, 0, 4, 5, 0, 0, 5, 5, 0, 4, 5, 0, 5, 0, 0, 5, 5, 5, 5], [0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 5, 0, 5, 0, 0, 5, 5], [5, 5, 0, 5, 0, 0, 0, 5, 5, 5, 5, 5, 0, 5, 0, 0, 0, 0, 0], [5, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 5], [5, 0, 5, 0, 5, 5, 0, 5, 5, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0], [0, 5, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 5, 0, 5, 5, 0, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0, 5, 0], [0, 0, 0, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 5, 5, 0, 0, 0], [0, 5, 5, 0, 0, 0, 5, 0, 5, 5, 0, 0, 0, 0, 5, 0, 0, 5, 0], [0, 0, 5, 5, 0, 5, 5, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 0], [0, 0, 5, 0, 0, 4, 0, 5, 0, 5, 0, 5, 0, 0, 0, 5, 5, 0, 5], [0, 0, 5, 0, 4, 2, 4, 5, 5, 0, 5, 0, 0, 0, 5, 4, 5, 5, 5], [5, 0, 0, 0, 0, 4, 0, 0, 5, 5, 0, 0, 0, 0, 2, 4, 4, 5, 0], [5, 0, 5, 5, 5, 5, 0, 5, 0, 0, 0, 5, 0, 5, 0, 4, 5, 0, 0], [5, 5, 0, 0, 5, 0, 5, 0, 5, 5, 0, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 0, 0, 5, 5, 5, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0], [0, 0, 2, 5, 0, 0, 0, 0, 5, 4, 5, 0, 5, 5, 0, 0, 0, 0, 0], [5, 2, 2, 4, 0, 5, 0, 5, 2, 4, 4, 5, 0, 0, 5, 5, 5, 5, 0], [0, 0, 4, 5, 0, 0, 5, 5, 0, 4, 5, 0, 5, 0, 0, 5, 5, 5, 5], [0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 5, 0, 5, 0, 0, 5, 5], [5, 5, 0, 5, 0, 0, 0, 5, 5, 5, 5, 5, 0, 5, 0, 0, 0, 0, 0], [5, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 5], [5, 0, 5, 0, 5, 5, 0, 5, 5, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0], [0, 5, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 5, 0, 0, 5, 5, 0, 0, 0, 5, 5, 0, 5, 0, 0, 5], [5, 5, 0, 0, 0, 0, 5, 0, 5, 0, 0, 5, 5, 5, 0, 0], [0, 0, 4, 5, 0, 5, 0, 5, 5, 0, 0, 4, 5, 5, 5, 0], [0, 5, 5, 4, 0, 0, 5, 0, 0, 5, 0, 0, 4, 0, 0, 5], [0, 0, 4, 5, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 5, 0], [0, 0, 0, 5, 0, 5, 5, 5, 5, 0, 5, 0, 5, 5, 0, 5], [5, 0, 5, 0, 0, 4, 5, 4, 5, 5, 5, 5, 0, 5, 0, 0], [0, 0, 0, 0, 5, 5, 4, 5, 5, 0, 0, 0, 0, 0, 0, 5], [0, 0, 5, 5, 0, 0, 5, 0, 5, 5, 0, 5, 5, 4, 5, 0], [0, 0, 5, 0, 0, 5, 0, 0, 0, 5, 5, 0, 5, 5, 4, 5], [5, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 5, 5], [5, 5, 4, 5, 4, 5, 0, 5, 5, 5, 0, 0, 0, 0, 5, 5], [5, 0, 0, 5, 5, 5, 0, 5, 4, 5, 4, 0, 5, 0, 0, 0], [5, 0, 0, 5, 5, 0, 0, 5, 0, 4, 0, 0, 0, 5, 5, 0], [5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 5, 5, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 5, 5, 5, 5, 0, 5], [5, 0, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 5, 0, 0], [5, 0, 0, 0, 0, 5, 0, 0, 5, 5, 5, 5, 0, 0, 0, 5]],
then this grids change to output grids below
[[0, 5, 0, 0, 5, 5, 0, 0, 0, 5, 5, 0, 5, 0, 0, 5], [5, 5, 0, 0, 0, 0, 5, 0, 5, 0, 0, 5, 2, 5, 0, 0], [0, 0, 4, 5, 0, 5, 0, 5, 5, 0, 0, 4, 2, 2, 5, 0], [0, 2, 2, 4, 0, 0, 5, 0, 0, 5, 0, 0, 4, 0, 0, 5], [0, 0, 4, 5, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 5, 0], [0, 0, 0, 5, 0, 5, 2, 5, 5, 0, 5, 0, 5, 5, 0, 5], [5, 0, 5, 0, 0, 4, 2, 4, 5, 5, 5, 5, 0, 5, 0, 0], [0, 0, 0, 0, 5, 5, 4, 5, 5, 0, 0, 0, 0, 0, 0, 5], [0, 0, 5, 5, 0, 0, 5, 0, 5, 5, 0, 5, 5, 4, 5, 0], [0, 0, 5, 0, 0, 5, 0, 0, 0, 5, 5, 0, 2, 2, 4, 5], [5, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 2, 5, 5], [5, 5, 4, 2, 4, 5, 0, 5, 5, 2, 0, 0, 0, 0, 5, 5], [5, 0, 0, 2, 5, 5, 0, 5, 4, 2, 4, 0, 5, 0, 0, 0], [5, 0, 0, 5, 5, 0, 0, 5, 0, 4, 0, 0, 0, 5, 5, 0], [5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 5, 5, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 5, 5, 5, 5, 0, 5], [5, 0, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 5, 0, 0], [5, 0, 0, 0, 0, 5, 0, 0, 5, 5, 5, 5, 0, 0, 0, 5]].

Quiz
If input grids are like that
[[0, 0, 5, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 5, 4, 5, 0, 0, 5], [0, 5, 5, 0, 5, 4, 5, 5, 5, 0, 5, 5, 0, 4, 5, 0, 5, 5, 0], [5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 0, 5, 5, 5, 5, 0, 5, 0, 5], [5, 5, 4, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 5], [5, 4, 5, 5, 5, 5, 0, 5, 0, 0, 5, 5, 0, 5, 5, 0, 5, 0, 0], [5, 5, 0, 5, 0, 0, 0, 5, 5, 0, 5, 4, 5, 0, 0, 5, 0, 5, 5], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 4, 4, 5, 0, 5, 5, 0, 0, 0], [5, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 5, 5, 0, 0, 5, 0], [0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 5], [0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 5, 0], [0, 0, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 4, 0, 0, 0, 5, 0], [5, 5, 4, 5, 5, 5, 5, 5, 0, 0, 5, 0, 4, 5, 4, 0, 5, 0, 5], [5, 5, 5, 4, 0, 0, 0, 5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 5, 5], [0, 0, 4, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5], [5, 0, 5, 0, 0, 5, 0, 4, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5], [5, 5, 0, 5, 5, 0, 5, 5, 4, 0, 0, 5, 5, 5, 0, 5, 0, 5, 5], [5, 5, 5, 0, 5, 5, 5, 4, 0, 5, 5, 0, 5, 5, 0, 0, 5, 5, 0], [5, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0], [0, 5, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5]],
then output grids?

=========","The output grids would be:

[[0, 0, 5, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 5, 4, 5, 0, 0, 5], [0, 5, 5, 0, 5, 4, 5, 5, 5, 0, 5, 5, 0, 4, 5, 0, 5, 5, 0], [5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 0, 5, 5, 5, 5, 0, 5, 0, 5], [5, 5, 4, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 5], [5, 4, 5, 5, 5, 5, 0, 5, 0, 0, 5, 5, 0, 5, 5, 0, 5, 0, 0], [5, 5, 0, 5, 0, 0, 0, 5, 5, 0, 5, 4, 5, 0, 0, 5, 0, 5, 5], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 4, 4, 5, 0, 5, 5, 0, 0, 0], [5, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 5, 5, 0, 0, 5, 0], [0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 5], [0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 5, 0], [0, 0, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 4, 0, 0, 0, 5, 0], [5, 5, 4, 5, 5, 5, 5, 5, 0, 0, 5, 0, 4, 5, 4, 0, 5, 0, 5], [5, 5, 5, 4, 0, 0, 0, 5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 5, 5], [0, 0, 4, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5], [5, 0, 5, 0, 0, 5, 0, 4, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5], [5, 5, 0, 5, 5, 0, 5, 5, 4, 0, 0, 5, 5, 5, 0, 5, 0, 5, 5], [5, 5, 5, 0, 5, 5, 5, 4, 0, 5, 5, 0, 5, 5, 0, 0, 5, 5, 0], [5, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0], [0, 5, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5]]

The pattern here is that the number 4 is replaced by the number 2 in the grid.","[[0, 0, 5, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 5, 4, 5, 0, 0, 5], [0, 5, 5, 0, 5, 4, 5, 5, 5, 0, 5, 5, 0, 4, 5, 0, 5, 5, 0], [5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 0, 5, 5, 5, 5, 0, 5, 0, 5], [5, 5, 4, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 5], [5, 4, 5, 5, 5, 5, 0, 5, 0, 0, 5, 5, 0, 5, 5, 0, 5, 0, 0], [5, 5, 0, 5, 0, 0, 0, 5, 5, 0, 5, 4, 5, 0, 0, 5, 0, 5, 5], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 4, 4, 5, 0, 5, 5, 0, 0, 0], [5, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 5, 5, 0, 0, 5, 0], [0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 5], [0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 5, 0], [0, 0, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 4, 0, 0, 0, 5, 0], [5, 5, 4, 5, 5, 5, 5, 5, 0, 0, 5, 0, 4, 5, 4, 0, 5, 0, 5], [5, 5, 5, 4, 0, 0, 0, 5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 5, 5], [0, 0, 4, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5], [5, 0, 5, 0, 0, 5, 0, 4, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5], [5, 5, 0, 5, 5, 0, 5, 5, 4, 0, 0, 5, 5, 5, 0, 5, 0, 5, 5], [5, 5, 5, 0, 5, 5, 5, 4, 0, 5, 5, 0, 5, 5, 0, 0, 5, 5, 0], [5, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0], [0, 5, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5]]","[[0, 0, 5, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 5, 4, 5, 0, 0, 5], [0, 5, 5, 0, 5, 4, 5, 5, 5, 0, 5, 5, 0, 4, 5, 0, 5, 5, 0], [5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 0, 5, 5, 5, 5, 0, 5, 0, 5], [5, 5, 4, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 5], [5, 4, 5, 5, 5, 5, 0, 5, 0, 0, 5, 5, 0, 5, 5, 0, 5, 0, 0], [5, 5, 0, 5, 0, 0, 0, 5, 5, 0, 5, 4, 5, 0, 0, 5, 0, 5, 5], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 4, 4, 5, 0, 5, 5, 0, 0, 0], [5, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 5, 5, 0, 0, 5, 0], [0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 5], [0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 5, 0], [0, 0, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 4, 0, 0, 0, 5, 0], [5, 5, 4, 5, 5, 5, 5, 5, 0, 0, 5, 0, 4, 5, 4, 0, 5, 0, 5], [5, 5, 5, 4, 0, 0, 0, 5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 5, 5], [0, 0, 4, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5], [5, 0, 5, 0, 0, 5, 0, 4, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5], [5, 5, 0, 5, 5, 0, 5, 5, 4, 0, 0, 5, 5, 5, 0, 5, 0, 5, 5], [5, 5, 5, 0, 5, 5, 5, 4, 0, 5, 5, 0, 5, 5, 0, 0, 5, 5, 0], [5, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0], [0, 5, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5]]","[[0, 0, 5, 0, 0, 5, 2, 0, 5, 0, 5, 0, 2, 2, 4, 5, 0, 0, 5], [0, 5, 5, 0, 5, 4, 2, 2, 5, 0, 5, 5, 0, 4, 5, 0, 5, 5, 0], [5, 2, 5, 0, 5, 5, 4, 0, 5, 5, 0, 5, 5, 5, 5, 0, 5, 0, 5], [2, 2, 4, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 5], [5, 4, 5, 5, 5, 5, 0, 5, 0, 0, 5, 5, 0, 5, 5, 0, 5, 0, 0], [5, 5, 0, 5, 0, 0, 0, 5, 5, 0, 5, 4, 5, 0, 0, 5, 0, 5, 5], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 4, 4, 2, 0, 5, 5, 0, 0, 0], [5, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 2, 0, 5, 5, 0, 0, 5, 0], [0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 5], [0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 5, 0], [0, 0, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 4, 0, 0, 0, 5, 0], [5, 5, 4, 5, 5, 5, 5, 5, 0, 0, 5, 0, 4, 2, 4, 0, 5, 0, 5], [5, 2, 2, 4, 0, 0, 0, 5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 5, 5], [0, 0, 4, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5], [5, 0, 5, 0, 0, 5, 0, 4, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5], [5, 5, 0, 5, 5, 0, 2, 2, 4, 0, 0, 5, 5, 5, 0, 5, 0, 5, 5], [5, 5, 5, 0, 5, 5, 5, 4, 0, 5, 5, 0, 5, 5, 0, 0, 5, 5, 0], [5, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0], [0, 5, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5]]",FALSE,
15113be4,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 1, 0, 4, 0, 0, 0], [4, 8, 8, 0, 0, 8, 8, 4, 0, 0, 1, 4, 0, 1, 0, 4, 0, 0, 0, 4, 0, 1, 0], [4, 8, 8, 0, 0, 8, 8, 4, 0, 1, 1, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0], [4, 0, 0, 8, 8, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 0, 0, 8, 8, 0, 0, 4, 1, 1, 1, 4, 0, 1, 0, 4, 0, 0, 0, 4, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 0, 1, 0, 4, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 0, 1, 0, 4, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 1, 0], [0, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 1, 1, 4, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 1, 4, 0, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 4, 0, 1, 1, 4, 0, 1, 0], [0, 0, 0, 4, 0, 1, 1, 4, 0, 1, 1, 4, 1, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0], [0, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 1, 1, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 1], [0, 1, 0, 4, 1, 0, 1, 4, 0, 1, 0, 4, 0, 1, 0, 4, 0, 0, 1, 4, 1, 0, 0], [1, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 0, 1], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 0, 0, 1, 4, 1, 1, 0], [1, 1, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 0, 1, 0, 4, 1, 1, 0, 4, 1, 0, 1], [1, 0, 0, 4, 1, 1, 1, 4, 0, 1, 0, 4, 0, 1, 1, 4, 1, 1, 1, 4, 0, 0, 0]],
then this grids change to output grids below
[[4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1, 4, 8, 0, 8, 4, 0, 1, 0, 4, 0, 0, 0], [4, 8, 8, 0, 0, 8, 8, 4, 0, 0, 1, 4, 0, 8, 0, 4, 0, 0, 0, 4, 0, 1, 0], [4, 8, 8, 0, 0, 8, 8, 4, 0, 1, 1, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0], [4, 0, 0, 8, 8, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 0, 0, 8, 8, 0, 0, 4, 8, 1, 8, 4, 0, 1, 0, 4, 0, 0, 0, 4, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 4, 0, 8, 1, 4, 0, 1, 0, 4, 0, 1, 0, 4, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 0, 1, 0, 4, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 1, 0], [0, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 1, 1, 4, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 1, 4, 0, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 4, 0, 1, 1, 4, 0, 1, 0], [0, 0, 0, 4, 0, 1, 1, 4, 0, 1, 1, 4, 1, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0], [0, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 1, 1, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 1], [0, 1, 0, 4, 1, 0, 1, 4, 0, 1, 0, 4, 0, 1, 0, 4, 0, 0, 1, 4, 1, 0, 0], [1, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 0, 1], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 0, 0, 1, 4, 1, 1, 0], [1, 1, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 0, 1, 0, 4, 1, 1, 0, 4, 1, 0, 1], [1, 0, 0, 4, 1, 1, 1, 4, 0, 1, 0, 4, 0, 1, 1, 4, 1, 1, 1, 4, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 1, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 0, 0, 1, 4, 0, 1, 0], [1, 1, 0, 4, 0, 1, 0, 4, 1, 0, 1, 4, 1, 1, 1, 4, 1, 1, 0, 4, 0, 0, 1], [1, 1, 1, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 0, 1, 4, 0, 0, 1, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 1, 0, 0], [0, 0, 0, 4, 0, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1], [0, 1, 0, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 0, 4, 0, 1, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 0, 1, 0, 4, 0, 1, 1], [0, 0, 0, 4, 0, 1, 0, 4, 0, 0, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 0, 0, 1], [0, 1, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 1, 4, 1, 1, 0, 4, 1, 0, 0, 4, 0, 0, 1, 4, 0, 0, 1, 4, 0, 0, 1], [1, 1, 1, 4, 1, 0, 1, 4, 0, 0, 1, 4, 0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0], [1, 1, 0, 4, 1, 1, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 0, 1, 1, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 0, 1, 0, 4, 1, 0, 1, 4, 1, 0, 1, 4, 0, 0, 0, 0, 6, 6, 4], [1, 1, 0, 4, 0, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0, 0, 6, 6, 4], [0, 0, 0, 4, 0, 0, 1, 4, 0, 0, 0, 4, 0, 1, 1, 4, 6, 6, 6, 6, 0, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 0, 0, 4], [0, 0, 1, 4, 1, 0, 0, 4, 0, 1, 0, 4, 1, 1, 0, 4, 0, 0, 6, 6, 0, 0, 4], [1, 1, 1, 4, 0, 0, 0, 4, 1, 1, 1, 4, 0, 0, 1, 4, 0, 0, 6, 6, 0, 0, 4], [0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4]],
then this grids change to output grids below
[[0, 0, 6, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 0, 0, 1, 4, 0, 1, 0], [6, 6, 0, 4, 0, 1, 0, 4, 1, 0, 1, 4, 1, 1, 1, 4, 1, 1, 0, 4, 0, 0, 1], [1, 6, 1, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 0, 1, 4, 0, 0, 1, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 1, 0, 0], [0, 0, 0, 4, 0, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1], [0, 1, 0, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 0, 4, 0, 1, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 0, 1, 0, 4, 0, 1, 1], [0, 0, 0, 4, 0, 1, 0, 4, 0, 0, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 0, 0, 1], [0, 1, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 6, 4, 1, 1, 0, 4, 1, 0, 0, 4, 0, 0, 1, 4, 0, 0, 6, 4, 0, 0, 1], [6, 6, 1, 4, 1, 0, 1, 4, 0, 0, 1, 4, 0, 0, 0, 4, 6, 6, 0, 4, 1, 0, 0], [1, 6, 0, 4, 1, 1, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 0, 6, 1, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 0, 1, 0, 4, 1, 0, 1, 4, 1, 0, 1, 4, 0, 0, 0, 0, 6, 6, 4], [1, 1, 0, 4, 0, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0, 0, 6, 6, 4], [0, 0, 0, 4, 0, 0, 1, 4, 0, 0, 0, 4, 0, 1, 1, 4, 6, 6, 6, 6, 0, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 0, 0, 4], [0, 0, 1, 4, 1, 0, 0, 4, 0, 1, 0, 4, 1, 1, 0, 4, 0, 0, 6, 6, 0, 0, 4], [1, 1, 1, 4, 0, 0, 0, 4, 1, 1, 1, 4, 0, 0, 1, 4, 0, 0, 6, 6, 0, 0, 4], [0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4]].

Quiz
If input grids are like that
[[1, 0, 1, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 0, 7, 7, 4], [0, 1, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 4, 0, 0, 0, 0, 7, 7, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 4], [0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 4], [0, 1, 0, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 1, 4, 7, 7, 0, 0, 0, 0, 4], [1, 0, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 0, 1, 0, 4, 7, 7, 0, 0, 0, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 0, 0, 1, 4, 1, 1, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 1, 1, 0], [1, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0], [0, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 1, 4, 0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 0, 4, 0, 0, 0, 4, 0, 0, 1], [1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 1, 1, 0, 4, 0, 0, 0], [0, 1, 1, 4, 0, 1, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0], [0, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0], [1, 1, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 1, 0, 1, 4, 0, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 1, 1, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 1, 0, 4, 1, 1, 0, 4, 0, 1, 0], [0, 0, 0, 4, 1, 1, 1, 4, 1, 1, 1, 4, 0, 1, 1, 4, 1, 0, 1, 4, 1, 1, 0], [0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0]],
then output grids?

=========","The output grids would be:

[[1, 0, 6, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4], [6, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 0, 7, 7, 4], [0, 6, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 4, 0, 0, 0, 0, 7, 7, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 4], [0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 4], [0, 1, 0, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 1, 4, 7, 7, 0, 0, 0, 0, 4], [1, 0, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 0, 1, 0, 4, 7, 7, 0, 0, 0, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 0, 0, 1, 4, 1, 1, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 1, 1, 0], [1, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0], [0, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 6, 4, 0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 0, 4, 0, 0, 0, 4, 0, 0, 1], [6, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 1, 1, 0, 4, 0, 0, 0], [0, 6, 1, 4, 0, 1, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0], [0, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0], [1, 1, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 1, 0, 1, 4, 0, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 1, 1, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 1, 0, 4, 1, 1, 0, 4, 0, 1, 0], [0, 0, 0, 4, 1, 1, 1, 4, 1, 1, 1, 4, 0, 1, 1, 4, 1, 0, 1, 4, 1, 1, 0], [0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0]]","[[1, 0, 6, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4], [6, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 0, 7, 7, 4], [0, 6, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 4, 0, 0, 0, 0, 7, 7, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 4], [0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 4], [0, 1, 0, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 1, 4, 7, 7, 0, 0, 0, 0, 4], [1, 0, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 0, 1, 0, 4, 7, 7, 0, 0, 0, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 0, 0, 1, 4, 1, 1, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 1, 1, 0], [1, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0], [0, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 6, 4, 0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 0, 4, 0, 0, 0, 4, 0, 0, 1], [6, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 1, 1, 0, 4, 0, 0, 0], [0, 6, 1, 4, 0, 1, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0], [0, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0], [1, 1, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 1, 0, 1, 4, 0, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 1, 1, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 1, 0, 4, 1, 1, 0, 4, 0, 1, 0], [0, 0, 0, 4, 1, 1, 1, 4, 1, 1, 1, 4, 0, 1, 1, 4, 1, 0, 1, 4, 1, 1, 0], [0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0]]","[[1, 0, 6, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4], [6, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 0, 7, 7, 4], [0, 6, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 4, 0, 0, 0, 0, 7, 7, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 4], [0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 4], [0, 1, 0, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 1, 4, 7, 7, 0, 0, 0, 0, 4], [1, 0, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 0, 1, 0, 4, 7, 7, 0, 0, 0, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 0, 0, 1, 4, 1, 1, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 1, 1, 0], [1, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0], [0, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 6, 4, 0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 0, 4, 0, 0, 0, 4, 0, 0, 1], [6, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 1, 1, 0, 4, 0, 0, 0], [0, 6, 1, 4, 0, 1, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0], [0, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0], [1, 1, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 1, 0, 1, 4, 0, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 1, 1, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 1, 0, 4, 1, 1, 0, 4, 0, 1, 0], [0, 0, 0, 4, 1, 1, 1, 4, 1, 1, 1, 4, 0, 1, 1, 4, 1, 0, 1, 4, 1, 1, 0], [0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0]]","[[1, 0, 1, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 0, 7, 7, 4], [0, 1, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 4, 0, 0, 0, 0, 7, 7, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 4], [0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 4], [0, 1, 0, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 1, 4, 7, 7, 0, 0, 0, 0, 4], [1, 0, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 0, 1, 0, 4, 7, 7, 0, 0, 0, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 0, 0, 7, 4, 1, 1, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 1, 1, 0], [1, 0, 0, 4, 7, 7, 7, 4, 0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0], [0, 0, 0, 4, 7, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 1, 4, 0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 0, 4, 0, 0, 0, 4, 0, 0, 1], [1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 1, 1, 0, 4, 0, 0, 0], [0, 1, 1, 4, 0, 1, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0], [0, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0], [1, 1, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 1, 0, 1, 4, 0, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 1, 1, 4, 0, 0, 7, 4, 1, 0, 7, 4, 0, 1, 0, 4, 1, 1, 0, 4, 0, 1, 0], [0, 0, 0, 4, 7, 7, 7, 4, 7, 7, 7, 4, 0, 1, 1, 4, 1, 0, 1, 4, 1, 1, 0], [0, 0, 0, 4, 7, 0, 1, 4, 7, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0]]",FALSE,
15663ba9,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 3, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 3, 3, 4, 0, 0, 0, 0, 0], [0, 0, 4, 3, 2, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 2, 3, 4, 0, 0, 0, 0, 0], [0, 0, 4, 3, 3, 4, 0, 0, 0, 4, 3, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0], [0, 0, 0, 0, 4, 3, 3, 3, 2, 0, 0, 3, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 0, 0, 0, 2, 3, 3, 4, 0], [0, 0, 0, 0, 4, 3, 3, 3, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 8, 8, 8, 8, 8], [0, 0, 8, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 0, 8], [0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8], [0, 0, 8, 8, 8, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0], [0, 0, 8, 0, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0], [0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 8, 8, 8, 8, 8, 4, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 4, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 4, 8, 8, 8, 4], [0, 0, 8, 0, 2, 8, 8, 4, 0, 0, 8, 0, 0, 0, 8], [0, 0, 4, 8, 4, 0, 0, 0, 0, 0, 4, 2, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 2, 0, 2, 4], [0, 0, 4, 8, 4, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0], [0, 0, 8, 0, 8, 0, 0, 0, 0, 4, 8, 8, 8, 4, 0], [0, 0, 4, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 0], [0, 3, 3, 3, 0, 0, 3, 3, 3, 3, 0, 3, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 3, 3, 0, 3, 0], [0, 3, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 0, 3, 0], [0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 3, 4, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0], [0, 4, 3, 0, 3, 2, 3, 4, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 3, 3, 4, 0], [0, 4, 3, 3, 0, 0, 2, 3, 2, 4, 0, 3, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 4, 2, 0, 3, 0], [0, 4, 3, 3, 0, 0, 3, 2, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 2, 3, 3, 4, 0, 0, 4, 3, 3, 0, 3, 0], [0, 4, 3, 3, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 4, 3, 3, 0, 0, 0, 0, 4, 3, 3, 3, 4, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

The pattern here is that the color of the cells at the corners of each object changes to 4, the color of the cells at the edges of each object changes to 2, and the color of the cells inside each object remains the same.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 3, 4, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0], [0, 4, 3, 0, 3, 2, 3, 4, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 3, 3, 4, 0], [0, 4, 3, 3, 0, 0, 2, 3, 2, 4, 0, 3, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 4, 2, 0, 3, 0], [0, 4, 3, 3, 0, 0, 3, 2, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 2, 3, 3, 4, 0, 0, 4, 3, 3, 0, 3, 0], [0, 4, 3, 3, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 4, 3, 3, 0, 0, 0, 0, 4, 3, 3, 3, 4, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 3, 4, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0], [0, 4, 3, 0, 3, 2, 3, 4, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 3, 3, 4, 0], [0, 4, 3, 3, 0, 0, 2, 3, 2, 4, 0, 3, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 4, 2, 0, 3, 0], [0, 4, 3, 3, 0, 0, 3, 2, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 2, 3, 3, 4, 0, 0, 4, 3, 3, 0, 3, 0], [0, 4, 3, 3, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 4, 3, 3, 0, 0, 0, 0, 4, 3, 3, 3, 4, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 3, 4, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0], [0, 4, 2, 0, 2, 3, 3, 2, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 3, 3, 4, 0], [0, 4, 3, 2, 0, 0, 2, 3, 3, 4, 0, 3, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 4, 2, 0, 3, 0], [0, 4, 3, 2, 0, 0, 2, 4, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 2, 3, 3, 4, 0, 0, 4, 3, 2, 0, 3, 0], [0, 4, 3, 3, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 4, 3, 3, 3, 4, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
15696249,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[4, 4, 6], [3, 3, 3], [6, 6, 4]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 6, 4, 4, 6, 4, 4, 6], [3, 3, 3, 3, 3, 3, 3, 3, 3], [6, 6, 4, 6, 6, 4, 6, 6, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[2, 4, 3], [2, 3, 4], [2, 3, 4]],
then this grids change to output grids below
[[2, 4, 3, 0, 0, 0, 0, 0, 0], [2, 3, 4, 0, 0, 0, 0, 0, 0], [2, 3, 4, 0, 0, 0, 0, 0, 0], [2, 4, 3, 0, 0, 0, 0, 0, 0], [2, 3, 4, 0, 0, 0, 0, 0, 0], [2, 3, 4, 0, 0, 0, 0, 0, 0], [2, 4, 3, 0, 0, 0, 0, 0, 0], [2, 3, 4, 0, 0, 0, 0, 0, 0], [2, 3, 4, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[6, 6, 3], [4, 4, 3], [4, 4, 3]],
then output grids?

=========","The pattern in this problem is that each row in the input grid is repeated three times in the output grid, and each row is also extended three times horizontally. The new cells added to the right of the original cells are filled with 0.

So, if the input grid is
[[6, 6, 3], [4, 4, 3], [4, 4, 3]],
then the output grid would be
[[6, 6, 3, 6, 6, 3, 6, 6, 3], [4, 4, 3, 4, 4, 3, 4, 4, 3], [4, 4, 3, 4, 4, 3, 4, 4, 3], [6, 6, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [6, 6, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0]].","[[6, 6, 3], [4, 4, 3], [4, 4, 3]],
then the output grid would be
[[6, 6, 3, 6, 6, 3, 6, 6, 3], [4, 4, 3, 4, 4, 3, 4, 4, 3], [4, 4, 3, 4, 4, 3, 4, 4, 3], [6, 6, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [6, 6, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0]]","[[6, 6, 3, 6, 6, 3, 6, 6, 3], [4, 4, 3, 4, 4, 3, 4, 4, 3], [4, 4, 3, 4, 4, 3, 4, 4, 3], [6, 6, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [6, 6, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 6, 6, 3], [0, 0, 0, 0, 0, 0, 4, 4, 3], [0, 0, 0, 0, 0, 0, 4, 4, 3], [0, 0, 0, 0, 0, 0, 6, 6, 3], [0, 0, 0, 0, 0, 0, 4, 4, 3], [0, 0, 0, 0, 0, 0, 4, 4, 3], [0, 0, 0, 0, 0, 0, 6, 6, 3], [0, 0, 0, 0, 0, 0, 4, 4, 3], [0, 0, 0, 0, 0, 0, 4, 4, 3]]",FALSE,
17b80ad2,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 4, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 9, 0, 0, 0, 7, 0, 0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], [7, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 9], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 2, 0, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0], [0, 0, 6, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0]],
then this grids change to output grids below
[[0, 4, 0, 0, 8, 9, 0, 0, 0, 7, 0, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 9, 0, 0, 0, 7, 0, 0, 0, 0, 9, 4, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 9, 0, 0], [0, 0, 3, 0, 0, 2, 0, 0, 0, 4, 4, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 6, 0, 7], [7, 0, 0, 0, 0, 2, 0, 9, 0, 4, 0, 0, 0, 0, 6, 0, 9], [0, 0, 0, 3, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 6, 0, 0], [0, 2, 0, 0, 0, 2, 0, 0, 0, 4, 3, 0, 0, 0, 6, 4, 0], [6, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 4, 0, 0, 0, 6, 0, 6], [0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 2, 0, 0, 6, 0, 0], [0, 8, 0, 0, 0, 2, 0, 0, 0, 4, 7, 0, 0, 0, 6, 0, 0], [0, 0, 6, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0]].

Example 2
If input grids are like that
[[8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6], [0, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 2, 0], [0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 6], [0, 0, 0, 8, 4, 0, 8, 0, 6, 0, 0, 2, 0], [0, 0, 7, 0, 4, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 4, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 6, 1, 0, 0, 0], [0, 0, 0, 0, 8, 0, 3, 0, 6, 0, 0, 0, 0], [0, 3, 0, 0, 8, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 0, 0, 2], [0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 2, 3, 0, 9, 0, 4, 0, 0, 0, 3, 0, 0, 8], [0, 0, 3, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 9, 4, 9, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 1, 0, 1, 0, 6, 0, 0, 0, 7], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 3, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 1, 9, 0, 0, 0, 7, 0, 0, 1, 2, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 4, 9, 0, 3, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 2, 3, 4, 9, 1, 4, 1, 0, 0, 3, 9, 0, 8], [0, 0, 3, 0, 2, 3, 4, 4, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 2, 3, 4, 0, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 2, 3, 4, 0, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 2, 3, 4, 1, 8, 4, 1, 0, 9, 4, 9, 0, 0], [0, 0, 0, 6, 2, 3, 4, 1, 1, 4, 1, 1, 6, 4, 9, 0, 7], [0, 0, 0, 0, 2, 8, 4, 1, 1, 4, 1, 3, 6, 4, 9, 0, 0], [0, 0, 0, 0, 7, 3, 4, 1, 1, 3, 1, 3, 6, 4, 9, 0, 0], [0, 0, 4, 0, 2, 3, 4, 1, 1, 3, 1, 3, 6, 4, 9, 0, 0], [0, 0, 0, 2, 2, 3, 1, 9, 1, 3, 1, 7, 6, 4, 1, 2, 0], [0, 0, 0, 3, 2, 3, 1, 9, 1, 3, 1, 7, 6, 4, 1, 2, 0], [0, 4, 0, 4, 2, 3, 1, 9, 1, 3, 9, 7, 6, 4, 1, 2, 0], [0, 0, 0, 0, 2, 3, 1, 9, 1, 3, 9, 7, 6, 3, 1, 2, 0], [0, 0, 0, 0, 2, 3, 1, 3, 1, 3, 9, 7, 6, 2, 1, 2, 0], [0, 0, 0, 1, 2, 3, 1, 3, 6, 3, 9, 4, 9, 3, 3, 2, 3], [0, 0, 0, 0, 2, 3, 1, 3, 6, 3, 9, 4, 9, 1, 3, 2, 0], [0, 0, 0, 0, 2, 5, 1, 3, 5, 3, 9, 5, 9, 1, 3, 2, 0]].

The pattern here is that the numbers in the 5th column are copied to","[[0, 0, 0, 0, 2, 3, 4, 9, 1, 4, 1, 0, 0, 3, 9, 0, 8], [0, 0, 3, 0, 2, 3, 4, 4, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 2, 3, 4, 0, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 2, 3, 4, 0, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 2, 3, 4, 1, 8, 4, 1, 0, 9, 4, 9, 0, 0], [0, 0, 0, 6, 2, 3, 4, 1, 1, 4, 1, 1, 6, 4, 9, 0, 7], [0, 0, 0, 0, 2, 8, 4, 1, 1, 4, 1, 3, 6, 4, 9, 0, 0], [0, 0, 0, 0, 7, 3, 4, 1, 1, 3, 1, 3, 6, 4, 9, 0, 0], [0, 0, 4, 0, 2, 3, 4, 1, 1, 3, 1, 3, 6, 4, 9, 0, 0], [0, 0, 0, 2, 2, 3, 1, 9, 1, 3, 1, 7, 6, 4, 1, 2, 0], [0, 0, 0, 3, 2, 3, 1, 9, 1, 3, 1, 7, 6, 4, 1, 2, 0], [0, 4, 0, 4, 2, 3, 1, 9, 1, 3, 9, 7, 6, 4, 1, 2, 0], [0, 0, 0, 0, 2, 3, 1, 9, 1, 3, 9, 7, 6, 3, 1, 2, 0], [0, 0, 0, 0, 2, 3, 1, 3, 1, 3, 9, 7, 6, 2, 1, 2, 0], [0, 0, 0, 1, 2, 3, 1, 3, 6, 3, 9, 4, 9, 3, 3, 2, 3], [0, 0, 0, 0, 2, 3, 1, 3, 6, 3, 9, 4, 9, 1, 3, 2, 0], [0, 0, 0, 0, 2, 5, 1, 3, 5, 3, 9, 5, 9, 1, 3, 2, 0]]","[[0, 0, 0, 0, 2, 3, 4, 9, 1, 4, 1, 0, 0, 3, 9, 0, 8], [0, 0, 3, 0, 2, 3, 4, 4, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 2, 3, 4, 0, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 2, 3, 4, 0, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 2, 3, 4, 1, 8, 4, 1, 0, 9, 4, 9, 0, 0], [0, 0, 0, 6, 2, 3, 4, 1, 1, 4, 1, 1, 6, 4, 9, 0, 7], [0, 0, 0, 0, 2, 8, 4, 1, 1, 4, 1, 3, 6, 4, 9, 0, 0], [0, 0, 0, 0, 7, 3, 4, 1, 1, 3, 1, 3, 6, 4, 9, 0, 0], [0, 0, 4, 0, 2, 3, 4, 1, 1, 3, 1, 3, 6, 4, 9, 0, 0], [0, 0, 0, 2, 2, 3, 1, 9, 1, 3, 1, 7, 6, 4, 1, 2, 0], [0, 0, 0, 3, 2, 3, 1, 9, 1, 3, 1, 7, 6, 4, 1, 2, 0], [0, 4, 0, 4, 2, 3, 1, 9, 1, 3, 9, 7, 6, 4, 1, 2, 0], [0, 0, 0, 0, 2, 3, 1, 9, 1, 3, 9, 7, 6, 3, 1, 2, 0], [0, 0, 0, 0, 2, 3, 1, 3, 1, 3, 9, 7, 6, 2, 1, 2, 0], [0, 0, 0, 1, 2, 3, 1, 3, 6, 3, 9, 4, 9, 3, 3, 2, 3], [0, 0, 0, 0, 2, 3, 1, 3, 6, 3, 9, 4, 9, 1, 3, 2, 0], [0, 0, 0, 0, 2, 5, 1, 3, 5, 3, 9, 5, 9, 1, 3, 2, 0]]","[[0, 0, 0, 0, 2, 3, 0, 9, 8, 4, 0, 3, 0, 3, 0, 0, 8], [0, 0, 3, 0, 0, 8, 4, 4, 8, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 1, 8, 0, 0, 3, 9, 4, 9, 0, 0], [0, 0, 0, 6, 0, 8, 0, 0, 1, 0, 1, 3, 6, 0, 0, 0, 7], [0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 5, 3, 0, 1, 3, 0, 7, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 5, 0, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 5, 1, 9, 1, 0, 0, 7, 0, 0, 1, 2, 0], [0, 0, 0, 3, 0, 5, 0, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0], [0, 4, 0, 4, 0, 5, 0, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 6, 0, 9, 4, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 5, 0, 3, 6, 0, 0, 4, 0, 2, 0, 0, 0], [0, 0, 0, 1, 0, 5, 0, 0, 6, 0, 0, 4, 9, 0, 3, 0, 3], [0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0]]",FALSE,
17cae0c1,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[5, 5, 5, 0, 0, 0, 0, 0, 5], [5, 0, 5, 0, 5, 0, 0, 5, 0], [5, 5, 5, 0, 0, 0, 5, 0, 0]],
then this grids change to output grids below
[[3, 3, 3, 4, 4, 4, 9, 9, 9], [3, 3, 3, 4, 4, 4, 9, 9, 9], [3, 3, 3, 4, 4, 4, 9, 9, 9]].

Example 2
If input grids are like that
[[0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 5, 0], [5, 0, 0, 5, 5, 5, 0, 0, 0]],
then this grids change to output grids below
[[9, 9, 9, 1, 1, 1, 4, 4, 4], [9, 9, 9, 1, 1, 1, 4, 4, 4], [9, 9, 9, 1, 1, 1, 4, 4, 4]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 5, 5, 5, 5], [0, 0, 0, 0, 5, 0, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[4, 4, 4, 1, 1, 1, 9, 9, 9], [4, 4, 4, 1, 1, 1, 9, 9, 9], [4, 4, 4, 1, 1, 1, 9, 9, 9]].

The pattern in this problem is that each third of the grid is filled with a different number. The first third is filled with 4, the second third is filled with 1, and the last third is filled with 9. The position of the number 5 in the input grid determines which third it is in.","[[4, 4, 4, 1, 1, 1, 9, 9, 9], [4, 4, 4, 1, 1, 1, 9, 9, 9], [4, 4, 4, 1, 1, 1, 9, 9, 9]]","[[4, 4, 4, 1, 1, 1, 9, 9, 9], [4, 4, 4, 1, 1, 1, 9, 9, 9], [4, 4, 4, 1, 1, 1, 9, 9, 9]]","[[1, 1, 1, 9, 9, 9, 6, 6, 6], [1, 1, 1, 9, 9, 9, 6, 6, 6], [1, 1, 1, 9, 9, 9, 6, 6, 6]]",FALSE,
184a9768,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 5, 0], [5, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 6, 6, 6, 6, 6, 6], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6], [0, 0, 0, 8, 8, 8, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 4, 4, 4, 4, 2, 2, 2, 4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 8, 8, 8, 8, 8, 8, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 8, 8, 8, 8, 8, 8, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 6, 6, 6, 6, 6, 6, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 6, 6, 6, 6, 6, 6, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 6, 6, 6, 6, 6, 6, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 4, 4, 4, 0, 5, 0, 0, 3, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 5], [0, 0, 0, 0, 5, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 4, 4, 4, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 4, 4, 3, 3, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 0, 8, 8, 8, 8, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 8, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 8, 8, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 0, 0, 8, 0], [0, 3, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 8, 8, 0, 0, 8, 0, 0, 8, 0], [0, 3, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 1, 0, 0, 0, 8, 8, 0, 0, 8, 8, 8, 8, 0], [0, 3, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0",not_complete,not_complete,"[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 2, 2, 2, 2, 4, 4, 4, 4, 3, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 2, 2, 2, 2, 4, 1, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 3, 8, 8, 8, 8, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 4, 4, 4, 4, 4, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 3, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 3, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 3, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1, 1, 8, 8, 3, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1, 1, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1, 1, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1, 1, 8, 7, 7, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1, 1, 8, 7, 7, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1, 1, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
195ba7dc,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 7, 7, 0, 7, 7, 2, 7, 0, 0, 0, 0, 7], [7, 0, 0, 0, 0, 7, 2, 7, 0, 0, 7, 7, 0], [7, 0, 7, 7, 0, 7, 2, 7, 0, 0, 7, 0, 0], [0, 7, 0, 0, 0, 0, 2, 7, 0, 7, 0, 7, 0], [7, 7, 0, 7, 7, 0, 2, 0, 7, 0, 0, 7, 0]],
then this grids change to output grids below
[[1, 1, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 1, 0], [1, 1, 0, 1, 1, 0]].

Example 2
If input grids are like that
[[0, 7, 7, 7, 0, 7, 2, 7, 7, 0, 7, 0, 7], [0, 0, 0, 7, 0, 7, 2, 0, 7, 7, 7, 0, 7], [7, 0, 7, 0, 0, 0, 2, 7, 7, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0, 2, 7, 7, 0, 0, 7, 7], [0, 7, 7, 0, 7, 7, 2, 7, 7, 7, 0, 0, 7]],
then this grids change to output grids below
[[1, 1, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0], [1, 1, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1]].

Quiz
If input grids are like that
[[7, 7, 0, 0, 0, 0, 2, 0, 7, 7, 0, 0, 7], [0, 7, 0, 0, 0, 0, 2, 7, 0, 0, 7, 0, 7], [7, 7, 7, 0, 0, 7, 2, 0, 7, 7, 7, 0, 7], [0, 0, 0, 0, 0, 0, 2, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 7, 0, 2, 0, 7, 7, 0, 7, 7]],
then output grids?

=========","The pattern in this problem is that the grid is divided into two parts by the column that contains the number 2. The left part of the grid is ignored and the right part is transformed into a new grid where the number 7 is replaced by 1 and the number 0 remains the same. 

So, if the input grid is 
[[7, 7, 0, 0, 0, 0, 2, 0, 7, 7, 0, 0, 7], [0, 7, 0, 0, 0, 0, 2, 7, 0, 0, 7, 0, 7], [7, 7, 7, 0, 0, 7, 2, 0, 7, 7, 7, 0, 7], [0, 0, 0, 0, 0, 0, 2, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 7, 0, 2, 0, 7, 7, 0, 7, 7]],

then the output grid will be 
[[0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1]].","[[7, 7, 0, 0, 0, 0, 2, 0, 7, 7, 0, 0, 7], [0, 7, 0, 0, 0, 0, 2, 7, 0, 0, 7, 0, 7], [7, 7, 7, 0, 0, 7, 2, 0, 7, 7, 7, 0, 7], [0, 0, 0, 0, 0, 0, 2, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 7, 0, 2, 0, 7, 7, 0, 7, 7]],

then the output grid will be 
[[0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1]]","[[0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1]]","[[1, 1, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1]]",FALSE,
1990f7a8,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 2, 0, 0], [0, 2, 0, 0, 0, 2, 2], [2, 2, 2, 0, 2, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[2, 0, 2, 0, 2, 2, 0], [0, 2, 2, 0, 2, 0, 2], [0, 0, 2, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 2, 2, 0], [2, 0, 2, 0, 0, 2, 0], [2, 2, 2, 0, 2, 0, 2]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[2, 0, 2, 0, 2, 2, 0], [0, 2, 0, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 0, 2], [2, 0, 0, 0, 2, 0, 2]]","[[2, 0, 2, 0, 2, 2, 0], [0, 2, 0, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 0, 2], [2, 0, 0, 0, 2, 0, 2]]","[[2, 0, 2, 0, 2, 2, 0], [0, 2, 0, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 0, 2], [2, 0, 0, 0, 2, 0, 2]]","[[2, 0, 2, 0, 0, 0, 2], [0, 2, 0, 0, 0, 2, 2], [2, 2, 2, 0, 2, 0, 2], [0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2], [2, 0, 0, 0, 2, 0, 2]]",FALSE,
19bb5feb,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 2, 2, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 2, 2, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 3, 3, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 3, 3, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[2, 0], [0, 3]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 8, 1, 1, 8, 8, 8, 3, 3, 8, 8, 8, 8, 0], [0, 8, 8, 1, 1, 8, 8, 8, 3, 3, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 2, 2, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 2, 2, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[1, 3], [0, 2]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 8, 8, 2, 2, 8, 8, 8, 8, 6, 6, 8, 8, 0], [0, 0, 8, 8, 2, 2, 8, 8, 8, 8, 6, 6, 8, 8, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 8, 8, 1, 1, 8, 8, 8, 8, 3, 3, 8, 8, 0], [0, 0, 8, 8, 1, 1, 8, 8, 8, 8, 3, 3, 8, 8, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be [[2, 6], [1, 3]]. 

This is because the pattern in the problem is to take the 2x2 squares of non-zero numbers in the input grid and place them in a 2x2 output grid in the order they appear from top to bottom. In the input grid, the first 2x2 square of non-zero numbers is '2' and the second is '6'. The third is '1' and the fourth is '3'. Therefore, the output grid is [[2, 6], [1, 3]].","[[2, 6], [1, 3]]. 

This is because the pattern in the problem is to take the 2x2 squares of non-zero numbers in the input grid and place them in a 2x2 output grid in the order they appear from top to bottom. In the input grid, the first 2x2 square of non-zero numbers is '2' and the second is '6'. The third is '1' and the fourth is '3'. Therefore, the output grid is [[2, 6], [1, 3]]","[[2, 6], [1, 3]]","[[2, 6], [1, 3]]",TRUE,TRUE
1a2e2828,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 2, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0], [3, 2, 2, 3, 3, 3, 3, 8, 3, 3, 3, 3], [3, 2, 2, 3, 3, 3, 3, 8, 3, 3, 3, 3], [0, 2, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 2, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0]],
then this grids change to output grids below
[[6]].

Example 2
If input grids are like that
[[0, 0, 0, 4, 4, 0, 0, 0, 8, 0, 0], [0, 0, 0, 4, 4, 0, 0, 0, 8, 0, 0], [3, 3, 3, 4, 4, 3, 3, 3, 8, 3, 3], [0, 0, 0, 4, 4, 0, 0, 0, 8, 0, 0], [0, 0, 0, 4, 4, 0, 0, 0, 8, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6], [0, 0, 0, 4, 4, 0, 0, 0, 8, 0, 0], [0, 0, 0, 4, 4, 0, 0, 0, 8, 0, 0]],
then this grids change to output grids below
[[8]].

Quiz
If input grids are like that
[[0, 0, 0, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0], [1, 1, 1, 3, 3, 1, 1, 1, 1, 7, 1, 1, 1], [1, 1, 1, 3, 3, 1, 1, 1, 1, 7, 1, 1, 1], [0, 0, 0, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6], [0, 0, 0, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0]],
then output grids?

=========","The output grid would be [[7]]. 

The pattern in this problem is that the output grid is a single cell containing the value of the cell that is in the same position in all rows of the input grid. In this case, the 10th cell in each row is always 7, so the output grid is [[7]].","[[7]]. 

The pattern in this problem is that the output grid is a single cell containing the value of the cell that is in the same position in all rows of the input grid. In this case, the 10th cell in each row is always 7, so the output grid is [[7]]",[[7]],[[7]],TRUE,FALSE
1a6449f1,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[5, 3, 0, 8, 0, 6, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 4], [0, 8, 4, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0], [7, 8, 0, 0, 6, 0, 0, 7, 5, 8, 4, 8, 3], [2, 8, 4, 2, 0, 0, 0, 8, 0, 8, 0, 0, 0], [0, 8, 9, 1, 9, 6, 0, 0, 0, 8, 0, 0, 7], [1, 8, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0], [0, 8, 0, 0, 0, 0, 4, 0, 4, 8, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 7, 8, 0, 6, 0, 0, 0, 3], [5, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 9, 4, 0, 0, 6, 0, 7, 7, 7, 7, 7], [0, 0, 2, 2, 4, 0, 0, 0, 7, 0, 0, 0, 7], [8, 8, 0, 3, 0, 0, 0, 1, 7, 0, 8, 4, 7], [7, 0, 0, 0, 0, 5, 0, 5, 7, 0, 6, 8, 7], [0, 0, 7, 0, 0, 6, 0, 0, 7, 7, 7, 7, 7], [3, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 9, 1], [0, 0, 0, 8, 0, 8, 6, 0, 0, 0, 0, 0, 1]],
then this grids change to output grids below
[[4, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 7, 5], [4, 2, 0, 0, 0, 8, 0], [9, 1, 9, 6, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 4, 0, 4]].

Example 2
If input grids are like that
[[0, 3, 0, 9, 0, 0, 0, 9, 5, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 4, 0, 8, 0], [0, 3, 0, 0, 0, 0, 0, 9, 0, 0, 9, 0, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2], [0, 0, 8, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 2, 8, 0, 0, 7, 0, 0, 0, 2, 0, 0, 1, 0, 0, 4, 0, 7, 9, 8], [0, 0, 7, 0, 2, 0, 1, 5, 3, 0, 6, 5, 2, 5, 0, 0, 1, 1, 5, 0, 0, 0, 0], [9, 0, 0, 8, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 8, 0, 7], [8, 0, 4, 0, 2, 0, 9, 5, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9], [1, 0, 0, 0, 2, 3, 0, 0, 0, 2, 0, 0, 2, 0, 0, 6, 4, 4, 8, 0, 0, 0, 0], [8, 0, 0, 0, 2, 0, 0, 1, 4, 0, 0, 8, 2, 0, 0, 0, 4, 2, 7, 0, 9, 1, 6], [0, 4, 4, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 8, 0, 3, 0, 6, 0], [0, 7, 0, 0, 0, 8, 0, 3, 7, 0, 9, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 2, 5, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 3, 3, 3, 3, 3, 0, 0, 4, 0, 4, 6, 0, 0, 0, 1, 1, 0, 0, 6, 0, 4], [6, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 6, 0, 6, 0, 4, 0, 0, 0, 4], [0, 0, 3, 7, 9, 0, 3, 0, 0, 0, 6, 4, 0, 0, 3, 0, 0, 8, 0, 7, 0, 5, 4], [0, 7, 3, 0, 0, 0, 3, 0, 2, 8, 0, 4, 4, 0, 3, 4, 0, 3, 0, 0, 8, 0, 4], [0, 8, 3, 0, 9, 0, 3, 0, 3, 3, 0, 4, 0, 0, 3, 7, 7, 5, 0, 0, 1, 0, 4], [0, 0, 3, 3, 3, 3, 3, 6, 5, 0, 0, 4, 3, 0, 0, 0, 0, 9, 0, 0, 0, 0, 4], [0, 9, 2, 0, 0, 2, 3, 0, 0, 0, 9, 4, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4], [0, 5, 8, 0, 0, 0, 1, 0, 6, 0, 9, 4, 3, 0, 0, 0, 0, 0, 0, 9, 0, 0, 4], [9, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
then this grids change to output grids below
[[6, 0, 0, 0, 1, 1, 0, 0, 6, 0], [0, 0, 6, 0, 6, 0, 4, 0, 0, 0], [0, 0, 3, 0, 0, 8, 0, 7, 0, 5], [4, 0, 3, 4, 0, 3, 0, 0, 8, 0], [0, 0, 3, 7, 7, 5, 0, 0, 1, 0], [3, 0, 0, 0, 0, 9, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 9, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 2, 4, 0, 0, 0, 9, 0], [0, 0, 3, 3, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 5, 0, 0, 4, 0, 4], [0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 6, 0], [0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 5, 4, 0, 0, 3, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 8, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0, 6, 7, 3, 0, 3, 0, 0, 9, 0], [6, 3, 0, 0, 0, 0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 2, 7, 0], [7, 0, 0, 8, 3, 0, 0, 3, 0, 3, 9, 0, 0, 0, 6, 7, 0, 0, 3, 0, 0, 0, 0, 0, 0], [5, 7, 0, 0, 8, 8, 7, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 3, 4, 0, 0, 2, 0, 1], [7, 0, 0, 0, 9, 0, 0, 3, 0, 1, 0, 0, 0, 8, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 3, 0, 2, 3, 0, 3, 3, 0, 0, 2], [0, 0, 7, 0, 0, 0, 7, 3, 0, 0, 0, 0, 0, 5, 0, 0, 1, 0, 3, 0, 0, 7, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 3, 7, 0, 0, 0, 0, 0, 0, 0, 8, 1, 3, 4, 0, 0, 6, 0, 8], [0, 0, 0, 3, 0, 4, 2, 3, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 3, 0, 9, 9, 0, 0, 9], [5, 0, 1, 0, 0, 0, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 3, 0, 0, 7, 0, 5, 0, 3, 0, 0, 0, 0], [0, 5, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 2, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0, 6], [4, 0, 0, 0, 7, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 5, 0, 0, 7, 7, 7, 7, 7, 7], [9, 0, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 5, 8, 8, 0, 0, 0, 0, 7, 0, 0, 8, 0, 7], [2, 0, 0, 0, 6, 2, 8, 0, 0, 9, 0, 0, 0, 8, 5, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7], [8, 0, 1, 0, 8, 0, 8, 0, 7, 0, 0, 6, 0, 8, 0, 0, 0, 0, 7, 7, 0, 0, 0, 2, 7], [5, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 5, 6, 8, 4, 0, 8, 0, 5, 7, 7, 7, 7, 7, 7], [0, 0, 0, 0, 4, 0, 8, 0, 9, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 2], [8, 0, 0, 0, 0, 0, 8, 0, 0, 2, 0, 2, 0, 8, 0, 6, 0, 0, 0, 3, 0, 3, 0, 8, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 3, 0, 0, 5, 1, 0, 0, 0, 0], [0, 0, 6, 0, 9, 6, 0, 5, 9, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 1, 5, 3, 0, 0, 6], [5, 0, 0, 0, 8, 8, 0, 9, 8, 0, 0, 0, 0, 0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 2, 0], [8, 0, 0, 0, 3, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 0, 2, 5, 0, 0]],
then output grids?

=========","The output grids would be:

[[5, 4, 0, 0, 3, 0, 0, 9, 0], [0, 0, 6, 7, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [4, 0, 0, 0, 0, 0, 3, 4, 0], [0, 0, 6, 0, 0, 0, 3, 0, 0], [0, 0, 1, 0, 0, 0, 3, 0, 0], [0, 0, 8, 1, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0]].

The pattern here is that the objects in the grid are moved to the left side of the grid, and the rest of the grid is filled with zeros. The objects are moved in the same order as they appear in the input grid.","[[5, 4, 0, 0, 3, 0, 0, 9, 0], [0, 0, 6, 7, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [4, 0, 0, 0, 0, 0, 3, 4, 0], [0, 0, 6, 0, 0, 0, 3, 0, 0], [0, 0, 1, 0, 0, 0, 3, 0, 0], [0, 0, 8, 1, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0]]","[[5, 4, 0, 0, 3, 0, 0, 9, 0], [0, 0, 6, 7, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [4, 0, 0, 0, 0, 0, 3, 4, 0], [0, 0, 6, 0, 0, 0, 3, 0, 0], [0, 0, 1, 0, 0, 0, 3, 0, 0], [0, 0, 8, 1, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0]]","[[0, 0, 0, 0, 0, 3, 5, 4, 0, 0], [0, 9, 0, 0, 0, 0, 0, 0, 6, 7], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 9, 0, 0, 0, 6, 7, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 8, 0, 0, 4, 0], [0, 0, 0, 6, 0, 0, 0, 3, 0, 2], [0, 0, 0, 0, 0, 5, 0, 0, 1, 0], [7, 0, 0, 0, 0, 0, 0, 0, 8, 1], [0, 0, 0, 0, 0, 4, 0, 2, 0, 0]]",FALSE,
1acc24af,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 5, 5, 5, 0, 5, 5, 0, 5, 5, 0, 0], [0, 5, 5, 0, 0, 5, 5, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 2, 2, 2, 0, 2, 2, 0, 5, 5, 0, 0], [0, 2, 2, 0, 0, 2, 2, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 5, 5, 0, 0, 0, 0, 5, 0], [0, 5, 5, 0, 5, 0, 0, 5, 5, 0, 5, 0], [0, 0, 5, 0, 5, 0, 0, 5, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 5, 5, 0, 0, 0, 0, 2, 0], [0, 2, 2, 0, 5, 0, 0, 2, 2, 0, 2, 0], [0, 0, 2, 0, 5, 0, 0, 2, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern here is that the color 5 is replaced by color 2 in the shape of the color 1.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 5, 5, 0, 0, 0, 0, 2, 0], [0, 2, 2, 0, 5, 0, 0, 2, 2, 0, 2, 0], [0, 0, 2, 0, 5, 0, 0, 2, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 5, 5, 0, 0, 0, 0, 2, 0], [0, 2, 2, 0, 5, 0, 0, 2, 2, 0, 2, 0], [0, 0, 2, 0, 5, 0, 0, 2, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0], [0, 2, 2, 0, 2, 0, 0, 5, 5, 0, 2, 0], [0, 0, 2, 0, 2, 0, 0, 5, 5, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
1c02dbbe,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 3, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 1, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 1], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 3, 0, 0, 0]]

The pattern here is that the color of the cells in the middle of the grid is replaced by the color of the cells in the corners of the grid. The color of the cells in the corners of the grid remains the same.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 1, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 1], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 3, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 1, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 1], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 3, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 5, 5, 1, 1, 1, 1, 1, 1, 1, 0], [0, 6, 6, 6, 6, 5, 5, 1, 1, 1, 1, 1, 1, 1, 0], [0, 6, 6, 6, 6, 5, 5, 1, 1, 1, 1, 1, 1, 1, 0], [0, 6, 6, 6, 6, 5, 5, 1, 1, 1, 1, 1, 1, 1, 0], [0, 6, 6, 6, 6, 5, 5, 1, 1, 1, 1, 1, 1, 1, 0], [0, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 3, 3, 3, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 3, 3, 3, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 3, 3, 3, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
1c0d0a4b,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 8, 0, 8, 0, 0, 0, 8, 8, 0, 0], [0, 8, 0, 8, 0, 0, 8, 0, 0, 0, 8, 0, 0], [0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0], [0, 0, 8, 0, 0, 8, 8, 8, 0, 8, 8, 0, 0], [0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 0, 0], [0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 8, 0, 0, 8, 8, 8, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 2, 2, 2, 0, 2, 2, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 8, 0, 8, 0, 0, 8, 0, 0], [0, 8, 0, 8, 0, 8, 8, 8, 0, 0, 8, 8, 0], [0, 8, 8, 8, 0, 8, 0, 0, 0, 8, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 8, 0, 8, 0, 0, 0, 8, 8, 8, 0], [0, 8, 8, 8, 0, 0, 8, 0, 0, 8, 0, 8, 0], [0, 0, 8, 8, 0, 8, 0, 8, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 8, 0, 8, 0, 0, 0, 8, 0], [0, 8, 8, 0, 0, 8, 8, 0, 0, 8, 8, 8, 0], [0, 0, 8, 0, 0, 0, 8, 8, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that the 8's in the input grid are replaced with 2's in the output grid, but only if they are surrounded by at least one 8 in the four cardinal directions (up, down, left, right). If an 8 is not surrounded by any other 8's, it is replaced with a 0 in the output grid.

Applying this pattern to the quiz input, the output grid would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

In this case, none of the 8's in the input grid are surrounded by any other 8's, so they are all replaced with 0's in the output grid.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 2, 0, 0, 2, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
1c56ad9f,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern here is that the 7's are moving towards the center of the grid, creating a diamond shape.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
1d0a4b61,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 0, 0, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [1, 2, 5, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 5, 4, 5, 0, 0, 2, 5, 4, 5, 2, 1], [1, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 5, 1, 5, 0, 0, 5, 5, 1, 5, 5, 1], [1, 4, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1], [1, 5, 5, 1, 5, 5, 1, 5, 0, 0, 0, 0, 0, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 0, 0, 0, 0, 0, 2, 1, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 0, 0, 0, 0, 0, 2, 1, 2, 5, 4, 5, 2, 1], [1, 5, 5, 0, 0, 0, 1, 5, 5, 1, 5, 5, 0, 0, 0, 0, 0, 5, 1, 5, 5, 1, 5, 5, 1], [1, 4, 1, 0, 0, 0, 1, 4, 1, 4, 1, 4, 0, 0, 0, 0, 0, 4, 1, 4, 1, 4, 1, 4, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 0, 0, 0, 0, 0, 5, 1, 5, 5, 1, 5, 5, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
then this grids change to output grids below
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]].

Example 2
If input grids are like that
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 0, 0, 0, 0, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 0, 0, 0, 0, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 0, 0, 0, 0, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 0, 0, 0, 0, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 0, 0, 0, 0, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 0, 0, 0, 0, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 5, 2, 3, 0, 0, 0, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 2, 3, 5, 0, 0, 0, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 5, 0, 0, 0, 1, 2, 3, 5, 5, 3, 2, 0, 0, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 5, 2, 0, 0, 0, 0, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 3, 5, 0, 0, 0, 0, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 3, 5, 0, 0, 0, 0, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 5, 2, 0, 0, 0, 0, 1, 5, 0, 0, 0, 0, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 2, 3, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 5, 5, 3, 2, 1, 2, 0, 0, 0, 0, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 5, 2, 3, 3, 2, 5, 1, 5, 0, 0, 0, 0, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2]],
then this grids change to output grids below
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2]].

Quiz
If input grids are like that
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 0, 0, 0, 0, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 0, 0, 0, 0, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 0, 0, 0, 0, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 0, 0, 1], [1, 8, 5, 1, 2, 0, 0, 0, 0, 0, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 0, 0, 0, 0, 1, 2, 5, 1, 5, 2, 1, 0, 0, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 0, 0, 0, 0, 1, 8, 2, 1, 2, 8, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 0, 0, 0, 0, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 0, 0, 0, 0, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
then output grids?

=========","The output grids would be:

[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]

The pattern here is that the 0's in the input grid are replaced by the pattern that is repeated in the rows above and below the 0's.","[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]","[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]","[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]",TRUE,TRUE
1d398264,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 5, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 8, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 2, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 5, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 1, 2, 0, 0, 0, 0], [0, 0, 0, 2, 6, 2, 0, 0, 0, 0], [0, 0, 0, 2, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 3, 0, 0, 1, 0, 0, 2, 0, 0], [0, 0, 3, 0, 1, 0, 2, 0, 0, 0], [0, 0, 0, 3, 1, 2, 0, 0, 0, 0], [2, 2, 2, 2, 6, 2, 2, 2, 2, 2], [0, 0, 0, 2, 7, 7, 0, 0, 0, 0], [0, 0, 2, 0, 7, 0, 7, 0, 0, 0], [0, 2, 0, 0, 7, 0, 0, 7, 0, 0], [2, 0, 0, 0, 7, 0, 0, 0, 7, 0], [0, 0, 0, 0, 7, 0, 0, 0, 0, 7], [0, 0, 0, 0, 7, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 7, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 6, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 7, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 3, 3, 1, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0], [0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0], [3, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0]].

The pattern here is that the objects in the grid are expanding outwards from their original position, with the number of objects in each row or column increasing by one for each step away from the original position.","[[0, 6, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 7, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 3, 3, 1, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0], [0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0], [3, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0]]","[[0, 6, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 7, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 3, 3, 1, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0], [0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0], [3, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0]]","[[0, 6, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 7, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 3, 3, 1, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0], [0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0], [3, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0]]",TRUE,FALSE
1e81d6f9,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 8, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 6, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 9, 2, 4, 0, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0], [0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 2, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0], [0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 3, 0, 7, 8, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 9, 2, 0, 0, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 2, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0], [0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 3, 0, 7, 8, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 3, 0, 0, 0, 0, 8, 0, 0, 0, 7], [5, 5, 5, 5, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 6, 2, 0], [0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 1, 0, 8, 7, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 7, 0, 0, 7, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7], [5, 5, 5, 5, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 6, 2, 0], [0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 8, 7, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0]]

The pattern in this problem is that if a cell has a number and the cell to its right is empty, the number moves to the right. If the cell to the right is not empty, the number stays in its place.","[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7], [5, 5, 5, 5, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 6, 2, 0], [0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 8, 7, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0]]","[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7], [5, 5, 5, 5, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 6, 2, 0], [0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 8, 7, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0]]","[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 3, 0, 0, 0, 0, 8, 0, 0, 0, 7], [5, 5, 5, 5, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 6, 2, 0], [0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 7, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 7, 0, 0, 7, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0]]",FALSE,
1e97544e,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 0, 0, 0, 4, 5, 6, 1, 2, 3], [6, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 0, 0, 0, 4, 5, 6, 1, 2, 3], [6, 1, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 0, 0, 0, 4, 5, 6, 1, 2, 3], [6, 1, 2, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 0, 0, 0, 0, 6, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 0, 0, 0, 0, 6, 1, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 0, 0, 0, 0, 6, 1, 2, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 0, 0, 0, 0, 6, 1, 2, 3, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 0, 0, 0, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 0, 0, 0, 4, 5, 6, 1, 2, 0, 0, 0, 0, 0, 2, 2, 3, 4, 5, 6, 1, 2, 3], [6, 0, 0, 0, 4, 5, 6, 1, 2, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 6, 1, 2, 3], [6, 0, 0, 0, 4, 5, 6, 1, 2, 0, 0, 0, 0, 0, 2, 3, 4, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 0, 0, 0, 0, 0, 2, 3, 4, 5, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 0, 0, 0, 2, 3, 4, 5, 6, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 0, 0, 0, 2, 3, 4, 5, 6, 1, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 0, 0, 0, 2, 3, 4, 5, 6, 1, 2, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 3]],
then this grids change to output grids below
[[5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 3]].

Example 2
If input grids are like that
[[3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 0, 0, 0, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 0, 0, 0, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 1, 2, 3, 4, 5, 6, 7, 1, 2, 0, 0, 0, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 2, 3, 4, 5, 6, 7, 1, 2, 0, 0, 0, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 0, 0, 0, 0, 0, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 0, 0, 0, 0, 0, 7, 1, 2, 0, 0, 0, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 6, 7, 1, 2, 0, 0, 0, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 0, 0, 0, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 0, 0, 0, 0, 0, 6, 7, 1, 1, 2, 0, 0, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 0, 0, 0, 0, 0, 6, 7, 1, 2, 2, 0, 0, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 0, 0, 0, 0, 0, 6, 7, 1, 2, 3, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 4]],
then this grids change to output grids below
[[3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 4]].

Quiz
If input grids are like that
[[2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 0, 0, 0, 0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 0, 0, 0, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 0, 0, 0, 4, 5, 6, 7, 8, 9, 1, 0, 0, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 1, 0, 0, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 1, 0, 0, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 0, 0, 0, 0, 0, 7, 8, 9, 1, 0, 0, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 0, 0, 0, 0, 0, 7, 8, 9, 1, 0, 0, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 0, 0, 0, 0, 0, 8, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 0, 0, 0, 0, 0, 8, 9, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 6]],
then output grids?

=========","The output grids would be:

[[2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 6, 7, 8,",not_complete,not_complete,"[[2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 6]]",FALSE,
2072aba6,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 5, 0], [5, 5, 5], [0, 5, 0]],
then this grids change to output grids below
[[0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1], [0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0]].

Example 2
If input grids are like that
[[5, 0, 0], [0, 5, 0], [0, 0, 5]],
then this grids change to output grids below
[[1, 2, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [0, 0, 0, 0, 1, 2], [0, 0, 0, 0, 2, 1]].

Quiz
If input grids are like that
[[0, 0, 0], [0, 5, 0], [5, 5, 5]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1]]","[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1]]","[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1]]","[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1]]",TRUE,None
2.08E+20,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4], [4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4], [4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4], [4, 4, 2, 2, 2, 2, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 2, 2, 2, 2, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 2, 2, 2, 2, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
then this grids change to output grids below
[[3, 3, 3, 3, 1, 2, 2, 2], [3, 3, 3, 3, 1, 2, 2, 2], [1, 1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 1, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2]].

Example 2
If input grids are like that
[[8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 8, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 8, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
then this grids change to output grids below
[[5, 5, 3, 3, 3, 3, 2, 2, 2], [5, 5, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2]].

Quiz
If input grids are like that
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
then output grids?

=========","The output grids would be:

[[6, 6, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [8, 8, 8, 2, 2, 2, 2, 2, 2]].

The pattern in this problem is that the grid is divided into sections by the number 1. Each section is then rotated 90 degrees counterclockwise and placed in the output grid. The sections are placed in the output grid in the order they appear from top to bottom in the input grid.","[[6, 6, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [8, 8, 8, 2, 2, 2, 2, 2, 2]]","[[6, 6, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [8, 8, 8, 2, 2, 2, 2, 2, 2]]","[[6, 6, 8, 3, 2, 2, 2, 2, 2, 2], [8, 8, 8, 3, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]",FALSE,
20981f0e,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2]].

The pattern here is that the 1's are moving towards the center of the grid, while the 2's remain stationary.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2]]",FALSE,
21f83797,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0]]

The pattern here is that the 2's form a square with a border of 2's and the inside filled with 1's. The position of the square is determined by the position of the 2's in the input grid.","[[0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0]]","[[0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0]]","[[0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0]]",FALSE,
22a4bbc2,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[1, 1, 0], [1, 1, 0], [8, 8, 8], [8, 8, 8], [0, 1, 1], [0, 1, 1], [8, 8, 0], [1, 1, 1], [8, 8, 0], [8, 8, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [8, 8, 8], [8, 8, 8]],
then this grids change to output grids below
[[2, 2, 0], [2, 2, 0], [8, 8, 8], [8, 8, 8], [0, 1, 1], [0, 1, 1], [2, 2, 0], [1, 1, 1], [8, 8, 0], [8, 8, 0], [2, 2, 2], [2, 2, 2], [2, 2, 2], [8, 8, 8], [8, 8, 8]].

Example 2
If input grids are like that
[[0, 8, 8, 8, 0], [0, 8, 8, 8, 0], [1, 1, 1, 0, 0], [0, 8, 8, 8, 0], [0, 8, 8, 8, 0], [1, 1, 1, 1, 1], [0, 8, 8, 8, 8], [0, 8, 8, 8, 8], [1, 1, 1, 1, 0], [1, 1, 1, 1, 0], [0, 8, 8, 8, 0], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [8, 8, 8, 0, 0], [0, 0, 0, 1, 1], [8, 8, 8, 0, 0], [8, 8, 8, 0, 0], [0, 0, 1, 1, 0], [0, 0, 1, 1, 0]],
then this grids change to output grids below
[[0, 2, 2, 2, 0], [0, 2, 2, 2, 0], [1, 1, 1, 0, 0], [0, 8, 8, 8, 0], [0, 8, 8, 8, 0], [2, 2, 2, 2, 2], [0, 8, 8, 8, 8], [0, 8, 8, 8, 8], [1, 1, 1, 1, 0], [1, 1, 1, 1, 0], [0, 2, 2, 2, 0], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [8, 8, 8, 0, 0], [0, 0, 0, 2, 2], [8, 8, 8, 0, 0], [8, 8, 8, 0, 0], [0, 0, 1, 1, 0], [0, 0, 1, 1, 0]].

Quiz
If input grids are like that
[[8, 8, 8, 0], [0, 1, 1, 1], [0, 8, 8, 0], [1, 1, 1, 1], [8, 8, 8, 0], [8, 8, 8, 0], [0, 1, 1, 1], [0, 8, 8, 0], [0, 8, 8, 0], [1, 1, 1, 1], [1, 1, 1, 1], [8, 8, 8, 8], [1, 1, 0, 0], [0, 8, 8, 8], [1, 1, 1, 0], [8, 8, 8, 8], [0, 1, 1, 0], [0, 1, 1, 0], [8, 8, 8, 8], [8, 8, 8, 8], [0, 1, 1, 1], [0, 1, 1, 1]],
then output grids?

=========","The pattern in this problem is that all the '1' values that are surrounded by '8' values on both sides (either horizontally or vertically) are changed to '2'. 

So, if the input grids are like that
[[8, 8, 8, 0], [0, 1, 1, 1], [0, 8, 8, 0], [1, 1, 1, 1], [8, 8, 8, 0], [8, 8, 8, 0], [0, 1, 1, 1], [0, 8, 8, 0], [0, 8, 8, 0], [1, 1, 1, 1], [1, 1, 1, 1], [8, 8, 8, 8], [1, 1, 0, 0], [0, 8, 8, 8], [1, 1, 1, 0], [8, 8, 8, 8], [0, 1, 1, 0], [0, 1, 1, 0], [8, 8, 8, 8], [8, 8, 8, 8], [0, 1, 1, 1], [0, 1, 1, 1]],

then the output grids would be
[[8, 8, 8, 0], [0, 2, 2, 2], [0, 8, 8, 0], [2, 2, 2, 2], [8, 8, 8, 0], [8, 8, 8, 0], [0, 2, 2, 2], [0, 8, 8, 0], [0, 8, 8, 0], [2, 2, 2, 2], [2, 2, 2, 2], [8, 8, 8, 8], [2, 2, 0, 0], [0, 8, 8, 8], [2, 2, 2, 0], [8, 8, 8, 8], [0, 2, 2, 0], [0, 2, 2, 0], [8, 8, 8, 8], [8, 8, 8, 8], [0, 2, 2, 2], [0, 2, 2, 2]].","[[8, 8, 8, 0], [0, 1, 1, 1], [0, 8, 8, 0], [1, 1, 1, 1], [8, 8, 8, 0], [8, 8, 8, 0], [0, 1, 1, 1], [0, 8, 8, 0], [0, 8, 8, 0], [1, 1, 1, 1], [1, 1, 1, 1], [8, 8, 8, 8], [1, 1, 0, 0], [0, 8, 8, 8], [1, 1, 1, 0], [8, 8, 8, 8], [0, 1, 1, 0], [0, 1, 1, 0], [8, 8, 8, 8], [8, 8, 8, 8], [0, 1, 1, 1], [0, 1, 1, 1]],

then the output grids would be
[[8, 8, 8, 0], [0, 2, 2, 2], [0, 8, 8, 0], [2, 2, 2, 2], [8, 8, 8, 0], [8, 8, 8, 0], [0, 2, 2, 2], [0, 8, 8, 0], [0, 8, 8, 0], [2, 2, 2, 2], [2, 2, 2, 2], [8, 8, 8, 8], [2, 2, 0, 0], [0, 8, 8, 8], [2, 2, 2, 0], [8, 8, 8, 8], [0, 2, 2, 0], [0, 2, 2, 0], [8, 8, 8, 8], [8, 8, 8, 8], [0, 2, 2, 2], [0, 2, 2, 2]]","[[8, 8, 8, 0], [0, 2, 2, 2], [0, 8, 8, 0], [2, 2, 2, 2], [8, 8, 8, 0], [8, 8, 8, 0], [0, 2, 2, 2], [0, 8, 8, 0], [0, 8, 8, 0], [2, 2, 2, 2], [2, 2, 2, 2], [8, 8, 8, 8], [2, 2, 0, 0], [0, 8, 8, 8], [2, 2, 2, 0], [8, 8, 8, 8], [0, 2, 2, 0], [0, 2, 2, 0], [8, 8, 8, 8], [8, 8, 8, 8], [0, 2, 2, 2], [0, 2, 2, 2]]","[[2, 2, 2, 0], [0, 1, 1, 1], [0, 8, 8, 0], [2, 2, 2, 2], [8, 8, 8, 0], [8, 8, 8, 0], [0, 1, 1, 1], [0, 2, 2, 0], [0, 2, 2, 0], [1, 1, 1, 1], [1, 1, 1, 1], [8, 8, 8, 8], [2, 2, 0, 0], [0, 8, 8, 8], [1, 1, 1, 0], [2, 2, 2, 2], [0, 1, 1, 0], [0, 1, 1, 0], [8, 8, 8, 8], [8, 8, 8, 8], [0, 2, 2, 2], [0, 2, 2, 2]]",FALSE,
25094a63,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[3, 3, 2, 6, 3, 6, 8, 8, 8, 2, 3, 3, 3, 3, 3, 6, 3, 3, 8, 8, 1, 2, 2, 6, 3, 3, 2, 8, 1, 1], [8, 2, 1, 6, 3, 1, 8, 3, 1, 8, 3, 8, 8, 1, 3, 2, 8, 3, 8, 8, 3, 1, 3, 1, 8, 3, 2, 6, 2, 6], [1, 8, 3, 1, 8, 8, 8, 8, 8, 8, 1, 3, 2, 3, 3, 6, 6, 2, 3, 6, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3], [1, 2, 8, 1, 8, 8, 8, 8, 8, 8, 3, 8, 1, 2, 1, 1, 2, 3, 8, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3], [1, 3, 8, 1, 8, 8, 8, 8, 8, 8, 3, 2, 3, 3, 8, 3, 1, 1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 6, 8, 3], [3, 3, 8, 2, 8, 8, 8, 8, 8, 8, 3, 3, 1, 3, 2, 3, 6, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 6, 2], [8, 2, 1, 1, 8, 8, 8, 8, 8, 8, 3, 3, 6, 1, 3, 1, 8, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 8], [1, 3, 3, 6, 8, 8, 8, 8, 8, 8, 8, 1, 2, 8, 2, 8, 2, 1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 8, 6], [3, 1, 3, 8, 3, 2, 3, 8, 1, 3, 1, 8, 1, 3, 1, 2, 3, 1, 8, 6, 2, 1, 3, 1, 1, 8, 3, 1, 6, 3], [2, 8, 6, 3, 1, 3, 8, 2, 1, 3, 2, 3, 3, 3, 3, 1, 8, 3, 3, 6, 2, 8, 2, 2, 6, 2, 1, 6, 2, 3], [8, 8, 2, 2, 3, 1, 1, 3, 2, 3, 3, 8, 2, 3, 3, 8, 8, 6, 6, 2, 1, 2, 6, 2, 3, 3, 3, 2, 6, 3], [6, 3, 2, 2, 8, 3, 2, 3, 3, 1, 3, 2, 2, 3, 2, 6, 3, 2, 2, 1, 1, 2, 1, 8, 6, 3, 2, 1, 8, 2], [8, 6, 2, 8, 2, 2, 2, 3, 3, 8, 1, 1, 3, 1, 6, 1, 3, 2, 8, 3, 8, 3, 3, 3, 3, 3, 3, 1, 8, 1], [8, 8, 2, 8, 8, 6, 8, 6, 3, 8, 6, 1, 3, 2, 8, 3, 6, 6, 2, 6, 3, 8, 3, 3, 3, 3, 3, 3, 8, 1], [1, 8, 2, 6, 2, 8, 1, 3, 6, 3, 8, 2, 2, 3, 6, 1, 6, 2, 8, 3, 8, 3, 3, 3, 3, 3, 3, 2, 2, 3], [3, 2, 8, 1, 1, 3, 2, 2, 2, 6, 8, 3, 8, 8, 1, 2, 8, 6, 1, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 2], [8, 3, 8, 1, 2, 3, 8, 6, 3, 3, 3, 1, 6, 3, 1, 2, 1, 3, 2, 3, 2, 8, 3, 3, 3, 3, 3, 8, 3, 3], [6, 2, 3, 8, 6, 2, 2, 1, 8, 8, 1, 1, 1, 1, 1, 1, 1, 6, 6, 2, 1, 6, 3, 1, 6, 8, 3, 1, 2, 3], [2, 1, 2, 1, 8, 2, 3, 2, 6, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 6, 2, 1, 2, 2, 2, 3, 3, 1], [1, 8, 8, 2, 8, 2, 2, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 8, 2, 3, 2, 3, 6, 6, 2, 3, 3, 3, 6, 3], [2, 6, 8, 3, 6, 1, 3, 8, 3, 6, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 1, 6, 3, 3, 6, 1, 3, 2, 2], [6, 8, 6, 2, 3, 2, 6, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 8, 1, 6, 3, 3, 3, 8, 1, 8, 2, 3], [6, 3, 1, 3, 6, 6, 1, 6, 3, 8, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 6, 3, 3, 8, 1, 8, 3, 8, 2, 1], [3, 2, 2, 3, 1, 1, 2, 3, 8, 6, 1, 3, 3, 1, 8, 3, 1, 8, 8, 3, 8, 3, 1, 8, 8, 1, 1, 2, 1, 8], [3, 2, 3, 6, 1, 8, 3, 6, 3, 3, 2, 2, 1, 3, 6, 3, 2, 3, 8, 3, 8, 3, 2, 2, 2, 2, 3, 3, 1, 6], [2, 8, 6, 2, 2, 1, 8, 3, 1, 6, 8, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 2, 2, 8, 6, 8, 3, 6, 1, 3], [6, 2, 3, 2, 3, 3, 8, 3, 3, 6, 2, 2, 3, 3, 8, 8, 1, 3, 1, 2, 8, 3, 8, 3, 3, 3, 6, 1, 2, 2], [2, 3, 2, 1, 2, 6, 3, 1, 8, 3, 1, 6, 2, 3, 8, 2, 6, 1, 1, 1, 3, 6, 8, 1, 2, 8, 6, 2, 3, 2], [2, 1, 8, 2, 6, 3, 8, 2, 3, 6, 8, 8, 2, 8, 8, 3, 2, 3, 1, 6, 8, 2, 6, 3, 2, 3, 2, 1, 8, 3], [1, 6, 3, 1, 6, 6, 3, 1, 2, 8, 8, 1, 8, 1, 3, 3, 1, 2, 6, 8, 3, 1, 6, 8, 3, 8, 3, 1, 1, 8]],
then this grids change to output grids below
[[3, 3, 2, 6, 3, 6, 8, 8, 8, 2, 3, 3, 3, 3, 3, 6, 3, 3, 8, 8, 1, 2, 2, 6, 3, 3, 2, 8, 1, 1], [8, 2, 1, 6, 3, 1, 8, 3, 1, 8, 3, 8, 8, 1, 3, 2, 8, 3, 8, 8, 3, 1, 3, 1, 8, 3, 2, 6, 2, 6], [1, 8, 3, 1, 4, 4, 4, 4, 4, 4, 1, 3, 2, 3, 3, 6, 6, 2, 3, 6, 4, 4, 4, 4, 4, 4, 4, 3, 2, 3], [1, 2, 8, 1, 4, 4, 4, 4, 4, 4, 3, 8, 1, 2, 1, 1, 2, 3, 8, 3, 4, 4, 4, 4, 4, 4, 4, 2, 1, 3], [1, 3, 8, 1, 4, 4, 4, 4, 4, 4, 3, 2, 3, 3, 8, 3, 1, 1, 3, 3, 4, 4, 4, 4, 4, 4, 4, 6, 8, 3], [3, 3, 8, 2, 4, 4, 4, 4, 4, 4, 3, 3, 1, 3, 2, 3, 6, 1, 1, 2, 4, 4, 4, 4, 4, 4, 4, 3, 6, 2], [8, 2, 1, 1, 4, 4, 4, 4, 4, 4, 3, 3, 6, 1, 3, 1, 8, 1, 2, 1, 4, 4, 4, 4, 4, 4, 4, 2, 3, 8], [1, 3, 3, 6, 4, 4, 4, 4, 4, 4, 8, 1, 2, 8, 2, 8, 2, 1, 3, 3, 4, 4, 4, 4, 4, 4, 4, 2, 8, 6], [3, 1, 3, 8, 3, 2, 3, 8, 1, 3, 1, 8, 1, 3, 1, 2, 3, 1, 8, 6, 2, 1, 3, 1, 1, 8, 3, 1, 6, 3], [2, 8, 6, 3, 1, 3, 8, 2, 1, 3, 2, 3, 3, 3, 3, 1, 8, 3, 3, 6, 2, 8, 2, 2, 6, 2, 1, 6, 2, 3], [8, 8, 2, 2, 3, 1, 1, 3, 2, 3, 3, 8, 2, 3, 3, 8, 8, 6, 6, 2, 1, 2, 6, 2, 3, 3, 3, 2, 6, 3], [6, 3, 2, 2, 8, 3, 2, 3, 3, 1, 3, 2, 2, 3, 2, 6, 3, 2, 2, 1, 1, 2, 1, 8, 6, 3, 2, 1, 8, 2], [8, 6, 2, 8, 2, 2, 2, 3, 3, 8, 1, 1, 3, 1, 6, 1, 3, 2, 8, 3, 8, 3, 4, 4, 4, 4, 4, 1, 8, 1], [8, 8, 2, 8, 8, 6, 8, 6, 3, 8, 6, 1, 3, 2, 8, 3, 6, 6, 2, 6, 3, 8, 4, 4, 4, 4, 4, 3, 8, 1], [1, 8, 2, 6, 2, 8, 1, 3, 6, 3, 8, 2, 2, 3, 6, 1, 6, 2, 8, 3, 8, 3, 4, 4, 4, 4, 4, 2, 2, 3], [3, 2, 8, 1, 1, 3, 2, 2, 2, 6, 8, 3, 8, 8, 1, 2, 8, 6, 1, 3, 1, 2, 4, 4, 4, 4, 4, 2, 2, 2], [8, 3, 8, 1, 2, 3, 8, 6, 3, 3, 3, 1, 6, 3, 1, 2, 1, 3, 2, 3, 2, 8, 4, 4, 4, 4, 4, 8, 3, 3], [6, 2, 3, 8, 6, 2, 2, 1, 8, 8, 4, 4, 4, 4, 4, 4, 4, 6, 6, 2, 1, 6, 3, 1, 6, 8, 3, 1, 2, 3], [2, 1, 2, 1, 8, 2, 3, 2, 6, 8, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 3, 6, 2, 1, 2, 2, 2, 3, 3, 1], [1, 8, 8, 2, 8, 2, 2, 2, 3, 1, 4, 4, 4, 4, 4, 4, 4, 8, 2, 3, 2, 3, 6, 6, 2, 3, 3, 3, 6, 3], [2, 6, 8, 3, 6, 1, 3, 8, 3, 6, 4, 4, 4, 4, 4, 4, 4, 2, 3, 3, 3, 1, 6, 3, 3, 6, 1, 3, 2, 2], [6, 8, 6, 2, 3, 2, 6, 3, 3, 1, 4, 4, 4, 4, 4, 4, 4, 3, 3, 8, 1, 6, 3, 3, 3, 8, 1, 8, 2, 3], [6, 3, 1, 3, 6, 6, 1, 6, 3, 8, 4, 4, 4, 4, 4, 4, 4, 1, 2, 1, 6, 3, 3, 8, 1, 8, 3, 8, 2, 1], [3, 2, 2, 3, 1, 1, 2, 3, 8, 6, 1, 3, 3, 1, 8, 3, 1, 8, 8, 3, 8, 3, 1, 8, 8, 1, 1, 2, 1, 8], [3, 2, 3, 6, 1, 8, 3, 6, 3, 3, 2, 2, 1, 3, 6, 3, 2, 3, 8, 3, 8, 3, 2, 2, 2, 2, 3, 3, 1, 6], [2, 8, 6, 2, 2, 1, 8, 3, 1, 6, 8, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 2, 2, 8, 6, 8, 3, 6, 1, 3], [6, 2, 3, 2, 3, 3, 8, 3, 3, 6, 2, 2, 3, 3, 8, 8, 1, 3, 1, 2, 8, 3, 8, 3, 3, 3, 6, 1, 2, 2], [2, 3, 2, 1, 2, 6, 3, 1, 8, 3, 1, 6, 2, 3, 8, 2, 6, 1, 1, 1, 3, 6, 8, 1, 2, 8, 6, 2, 3, 2], [2, 1, 8, 2, 6, 3, 8, 2, 3, 6, 8, 8, 2, 8, 8, 3, 2, 3, 1, 6, 8, 2, 6, 3, 2, 3, 2, 1, 8, 3], [1, 6, 3, 1, 6, 6, 3, 1, 2, 8, 8, 1, 8, 1, 3, 3, 1, 2, 6, 8, 3, 1, 6, 8, 3, 8, 3, 1, 1, 8]].

Example 2
If input grids are like that
[[6, 8, 6, 8, 8, 8, 8, 6, 6, 3, 8, 6, 2, 3, 8, 1, 2, 8, 1, 3, 8, 3, 3, 6, 6, 1, 2, 6, 2, 2], [2, 3, 3, 2, 2, 3, 6, 2, 6, 2, 8, 1, 3, 8, 1, 8, 1, 8, 8, 8, 8, 2, 2, 3, 2, 1, 2, 8, 6, 3], [2, 3, 8, 2, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 8, 2, 6, 6, 2, 8, 3, 8, 8, 3, 2, 3, 3, 3, 2], [8, 6, 8, 2, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 1, 1, 2, 1, 2, 6, 8, 2, 6, 2, 1, 8, 3, 3, 8], [6, 8, 6, 2, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 8, 1, 1, 2, 1, 8, 3, 8, 2, 3, 6, 8, 2], [3, 8, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 8, 6, 3, 2, 6, 1, 6, 6, 2, 8, 8, 3, 2, 6, 6], [2, 6, 3, 2, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 3, 8, 3, 3, 6, 3, 1, 8, 8, 1, 2, 3, 1, 8, 8], [3, 8, 1, 6, 1, 8, 1, 3, 8, 3, 2, 3, 2, 8, 1, 3, 1, 2, 2, 8, 1, 6, 3, 3, 3, 6, 2, 2, 8, 6], [8, 3, 3, 8, 3, 8, 2, 2, 8, 8, 8, 8, 8, 1, 1, 6, 3, 3, 6, 2, 2, 6, 1, 3, 3, 6, 3, 1, 3, 3], [2, 3, 3, 2, 3, 2, 6, 2, 3, 6, 8, 3, 3, 8, 3, 6, 1, 3, 3, 8, 8, 1, 6, 6, 8, 8, 1, 6, 2, 6], [3, 6, 3, 3, 3, 2, 3, 6, 1, 6, 3, 8, 2, 8, 2, 3, 2, 6, 3, 6, 6, 8, 3, 6, 6, 1, 6, 8, 8, 6], [8, 3, 3, 1, 2, 2, 6, 8, 2, 3, 6, 8, 3, 2, 2, 6, 3, 2, 1, 2, 6, 3, 6, 8, 8, 8, 1, 8, 1, 6], [1, 8, 8, 1, 6, 6, 8, 2, 8, 2, 1, 2, 8, 8, 1, 8, 2, 8, 3, 8, 3, 3, 8, 8, 2, 3, 3, 3, 3, 3], [8, 8, 3, 8, 3, 2, 8, 6, 3, 3, 1, 3, 2, 1, 6, 6, 8, 3, 6, 6, 3, 6, 3, 1, 8, 1, 2, 6, 3, 8], [8, 6, 6, 3, 2, 6, 6, 8, 6, 1, 3, 2, 8, 3, 1, 2, 8, 3, 6, 2, 8, 8, 3, 2, 2, 6, 1, 8, 6, 3], [1, 8, 1, 6, 2, 3, 2, 2, 1, 8, 2, 2, 8, 3, 6, 8, 8, 8, 2, 8, 8, 3, 3, 1, 3, 2, 2, 1, 3, 2], [8, 1, 3, 6, 8, 8, 6, 6, 3, 3, 2, 2, 3, 8, 8, 8, 8, 8, 8, 8, 1, 3, 3, 8, 2, 3, 6, 2, 8, 2], [3, 3, 3, 6, 3, 2, 2, 2, 6, 3, 2, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 2, 3, 2, 2, 2, 2, 3], [3, 2, 1, 2, 2, 8, 6, 3, 8, 8, 8, 3, 1, 8, 8, 8, 8, 8, 8, 8, 6, 1, 8, 3, 8, 3, 6, 8, 1, 8], [3, 6, 1, 3, 2, 3, 6, 6, 6, 3, 2, 1, 3, 8, 8, 8, 8, 8, 8, 8, 3, 3, 2, 1, 8, 3, 6, 3, 2, 3], [8, 1, 3, 8, 6, 2, 3, 3, 3, 3, 2, 8, 6, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 3, 8, 2, 3, 1, 3, 2], [3, 6, 3, 2, 8, 6, 6, 3, 8, 3, 1, 2, 3, 8, 8, 8, 8, 8, 8, 8, 3, 6, 8, 6, 1, 2, 1, 3, 3, 6], [3, 8, 8, 2, 3, 8, 3, 6, 8, 8, 3, 1, 3, 3, 8, 8, 2, 2, 2, 2, 3, 8, 1, 1, 3, 3, 2, 3, 1, 3], [3, 3, 6, 8, 1, 6, 6, 2, 8, 6, 6, 1, 8, 1, 2, 2, 1, 6, 8, 3, 2, 6, 8, 6, 8, 8, 6, 2, 8, 3], [8, 3, 3, 1, 8, 3, 2, 3, 3, 3, 8, 3, 3, 3, 3, 2, 3, 8, 3, 1, 3, 6, 6, 6, 6, 6, 3, 6, 2, 3], [3, 6, 8, 3, 2, 1, 8, 6, 6, 8, 6, 6, 1, 6, 6, 1, 3, 3, 6, 2, 6, 1, 3, 3, 8, 1, 2, 2, 3, 3], [1, 8, 3, 6, 3, 2, 6, 8, 8, 1, 6, 6, 8, 6, 6, 6, 2, 6, 8, 3, 8, 1, 3, 8, 2, 6, 3, 2, 6, 6], [8, 8, 6, 8, 1, 1, 8, 2, 2, 3, 6, 2, 8, 3, 8, 2, 1, 1, 8, 6, 8, 6, 8, 6, 3, 3, 3, 3, 2, 3], [1, 3, 8, 1, 3, 1, 6, 3, 6, 8, 2, 3, 3, 8, 2, 2, 2, 1, 3, 2, 8, 8, 3, 8, 6, 6, 3, 8, 3, 8], [6, 2, 6, 2, 8, 2, 3, 3, 3, 3, 1, 3, 3, 3, 2, 6, 3, 8, 2, 3, 6, 3, 3, 2, 2, 3, 8, 8, 1, 3]],
then this grids change to output grids below
[[6, 8, 6, 8, 8, 8, 8, 6, 6, 3, 8, 6, 2, 3, 8, 1, 2, 8, 1, 3, 8, 3, 3, 6, 6, 1, 2, 6, 2, 2], [2, 3, 3, 2, 2, 3, 6, 2, 6, 2, 8, 1, 3, 8, 1, 8, 1, 8, 8, 8, 8, 2, 2, 3, 2, 1, 2, 8, 6, 3], [2, 3, 8, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 8, 2, 6, 6, 2, 8, 3, 8, 8, 3, 2, 3, 3, 3, 2], [8, 6, 8, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 1, 1, 2, 1, 2, 6, 8, 2, 6, 2, 1, 8, 3, 3, 8], [6, 8, 6, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 8, 1, 1, 2, 1, 8, 3, 8, 2, 3, 6, 8, 2], [3, 8, 3, 3, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 8, 6, 3, 2, 6, 1, 6, 6, 2, 8, 8, 3, 2, 6, 6], [2, 6, 3, 2, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 3, 8, 3, 3, 6, 3, 1, 8, 8, 1, 2, 3, 1, 8, 8], [3, 8, 1, 6, 1, 8, 1, 3, 8, 3, 2, 3, 2, 8, 1, 3, 1, 2, 2, 8, 1, 6, 3, 3, 3, 6, 2, 2, 8, 6], [8, 3, 3, 8, 3, 8, 2, 2, 8, 8, 8, 8, 8, 1, 1, 6, 3, 3, 6, 2, 2, 6, 1, 3, 3, 6, 3, 1, 3, 3], [2, 3, 3, 2, 3, 2, 6, 2, 3, 6, 8, 3, 3, 8, 3, 6, 1, 3, 3, 8, 8, 1, 6, 6, 8, 8, 1, 6, 2, 6], [3, 6, 3, 3, 3, 2, 3, 6, 1, 6, 3, 8, 2, 8, 2, 3, 2, 6, 3, 6, 6, 8, 3, 6, 6, 1, 6, 8, 8, 6], [8, 3, 3, 1, 2, 2, 6, 8, 2, 3, 6, 8, 3, 2, 2, 6, 3, 2, 1, 2, 6, 3, 6, 8, 8, 8, 1, 8, 1, 6], [1, 8, 8, 1, 6, 6, 8, 2, 8, 2, 1, 2, 8, 8, 1, 8, 2, 8, 3, 8, 3, 3, 8, 8, 2, 3, 3, 3, 3, 3], [8, 8, 3, 8, 3, 2, 8, 6, 3, 3, 1, 3, 2, 1, 6, 6, 8, 3, 6, 6, 3, 6, 3, 1, 8, 1, 2, 6, 3, 8], [8, 6, 6, 3, 2, 6, 6, 8, 6, 1, 3, 2, 8, 3, 1, 2, 8, 3, 6, 2, 8, 8, 3, 2, 2, 6, 1, 8, 6, 3], [1, 8, 1, 6, 2, 3, 2, 2, 1, 8, 2, 2, 8, 3, 6, 8, 8, 8, 2, 8, 8, 3, 3, 1, 3, 2, 2, 1, 3, 2], [8, 1, 3, 6, 8, 8, 6, 6, 3, 3, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 1, 3, 3, 8, 2, 3, 6, 2, 8, 2], [3, 3, 3, 6, 3, 2, 2, 2, 6, 3, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 8, 3, 3, 2, 3, 2, 2, 2, 2, 3], [3, 2, 1, 2, 2, 8, 6, 3, 8, 8, 8, 3, 1, 4, 4, 4, 4, 4, 4, 4, 6, 1, 8, 3, 8, 3, 6, 8, 1, 8], [3, 6, 1, 3, 2, 3, 6, 6, 6, 3, 2, 1, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 1, 8, 3, 6, 3, 2, 3], [8, 1, 3, 8, 6, 2, 3, 3, 3, 3, 2, 8, 6, 4, 4, 4, 4, 4, 4, 4, 2, 8, 8, 3, 8, 2, 3, 1, 3, 2], [3, 6, 3, 2, 8, 6, 6, 3, 8, 3, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 6, 8, 6, 1, 2, 1, 3, 3, 6], [3, 8, 8, 2, 3, 8, 3, 6, 8, 8, 3, 1, 3, 3, 8, 8, 2, 2, 2, 2, 3, 8, 1, 1, 3, 3, 2, 3, 1, 3], [3, 3, 6, 8, 1, 6, 6, 2, 8, 6, 6, 1, 8, 1, 2, 2, 1, 6, 8, 3, 2, 6, 8, 6, 8, 8, 6, 2, 8, 3], [8, 3, 3, 1, 8, 3, 2, 3, 3, 3, 8, 3, 3, 3, 3, 2, 3, 8, 3, 1, 3, 6, 6, 6, 6, 6, 3, 6, 2, 3], [3, 6, 8, 3, 2, 1, 8, 6, 6, 8, 6, 6, 1, 6, 6, 1, 3, 3, 6, 2, 6, 1, 3, 3, 8, 1, 2, 2, 3, 3], [1, 8, 3, 6, 3, 2, 6, 8, 8, 1, 6, 6, 8, 6, 6, 6, 2, 6, 8, 3, 8, 1, 3, 8, 2, 6, 3, 2, 6, 6], [8, 8, 6, 8, 1, 1, 8, 2, 2, 3, 6, 2, 8, 3, 8, 2, 1, 1, 8, 6, 8, 6, 8, 6, 3, 3, 3, 3, 2, 3], [1, 3, 8, 1, 3, 1, 6, 3, 6, 8, 2, 3, 3, 8, 2, 2, 2, 1, 3, 2, 8, 8, 3, 8, 6, 6, 3, 8, 3, 8], [6, 2, 6, 2, 8, 2, 3, 3, 3, 3, 1, 3, 3, 3, 2, 6, 3, 8, 2, 3, 6, 3, 3, 2, 2, 3, 8, 8, 1, 3]].

Quiz
If input grids are like that
[[6, 8, 3, 3, 3, 8, 1, 8, 3, 8, 8, 1, 6, 3, 1, 2, 3, 1, 1, 1, 3, 1, 2, 2, 6, 8, 2, 3, 8, 6], [1, 6, 6, 8, 8, 1, 3, 3, 6, 3, 8, 8, 2, 1, 1, 3, 6, 8, 8, 3, 1, 2, 1, 8, 2, 3, 8, 8, 8, 2], [8, 8, 3, 6, 3, 1, 6, 8, 3, 8, 6, 3, 1, 2, 8, 1, 8, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 8, 3, 6], [1, 3, 1, 2, 8, 1, 8, 2, 2, 2, 1, 3, 1, 8, 3, 6, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 6, 3], [8, 1, 2, 3, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 3, 8, 1, 1, 1, 1, 1, 1, 1, 8, 3, 6, 8], [6, 1, 3, 1, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 3, 1, 6, 1, 1, 1, 1, 1, 6, 2, 8, 3], [3, 3, 3, 3, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 3, 1, 1, 6, 2, 8, 8, 8, 8, 8, 8, 1, 3], [3, 3, 1, 3, 2, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 3, 2, 6, 3, 2, 1, 8, 8, 8, 2, 8], [1, 8, 3, 2, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 8, 8, 8, 2, 8, 3, 1, 3, 3, 6, 1, 3, 1], [8, 1, 2, 3, 1, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 6, 6, 1, 3, 8, 3, 3, 2, 8, 8, 8, 1], [3, 3, 1, 1, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 1, 8, 1, 8, 6, 2, 8, 1, 1, 1, 6, 3], [6, 1, 1, 2, 1, 6, 8, 3, 2, 2, 8, 1, 6, 3, 8, 2, 6, 3, 2, 1, 3, 3, 6, 1, 2, 8, 6, 2, 2, 2], [1, 3, 2, 8, 1, 2, 8, 8, 1, 3, 2, 2, 2, 2, 3, 3, 3, 8, 3, 2, 1, 1, 6, 6, 3, 8, 3, 3, 1, 6], [8, 1, 2, 6, 3, 1, 3, 2, 8, 1, 3, 3, 8, 1, 8, 3, 6, 6, 8, 3, 1, 8, 1, 3, 3, 2, 3, 3, 6, 3], [8, 8, 1, 3, 2, 8, 1, 1, 2, 1, 2, 1, 8, 1, 1, 3, 3, 3, 8, 8, 8, 3, 3, 3, 1, 8, 6, 1, 1, 3], [6, 8, 3, 2, 8, 1, 3, 1, 1, 3, 1, 1, 8, 3, 8, 8, 3, 3, 3, 6, 3, 3, 3, 1, 3, 6, 3, 2, 8, 6], [3, 8, 1, 1, 8, 2, 3, 3, 2, 8, 1, 6, 1, 6, 6, 8, 6, 3, 1, 8, 3, 8, 8, 8, 1, 1, 6, 3, 3, 1], [8, 8, 1, 2, 3, 6, 3, 3, 1, 8, 8, 3, 3, 6, 8, 1, 8, 1, 2, 2, 3, 8, 3, 8, 8, 2, 6, 8, 6, 1], [3, 1, 8, 2, 3, 3, 6, 3, 3, 6, 3, 1, 1, 3, 1, 1, 8, 1, 3, 1, 8, 2, 8, 1, 1, 2, 1, 3, 3, 8], [8, 8, 8, 1, 2, 8, 8, 3, 1, 1, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 1, 3, 8, 2, 8, 8, 1, 2, 8], [6, 8, 3, 8, 1, 2, 8, 3, 8, 3, 1, 8, 3, 3, 1, 3, 3, 3, 3, 3, 3, 8, 2, 8, 8, 8, 3, 3, 1, 1], [8, 1, 6, 3, 1, 2, 8, 8, 1, 1, 3, 8, 2, 3, 8, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 1, 3, 1], [2, 1, 2, 2, 1, 8, 6, 3, 1, 3, 8, 8, 8, 2, 2, 3, 3, 3, 3, 3, 3, 8, 8, 1, 3, 1, 1, 3, 2, 6], [1, 1, 3, 6, 6, 3, 2, 2, 8, 2, 6, 3, 8, 6, 2, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 8, 3, 3, 3], [1, 3, 6, 1, 8, 3, 2, 1, 3, 3, 1, 3, 8, 3, 8, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 8, 1, 2], [8, 8, 3, 8, 8, 2, 2, 2, 2, 8, 8, 6, 8, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1, 6, 1, 8, 6, 8, 6], [3, 3, 1, 1, 1, 8, 8, 3, 3, 3, 2, 8, 2, 3, 3, 3, 3, 3, 6, 8, 8, 2, 2, 8, 1, 1, 2, 1, 8, 8], [6, 6, 3, 3, 3, 6, 3, 3, 8, 8, 8, 8, 1, 3, 6, 8, 3, 3, 8, 1, 1, 1, 6, 1, 2, 6, 2, 6, 3, 8], [1, 2, 8, 3, 2, 1, 3, 3, 3, 3, 1, 3, 8, 6, 6, 1, 8, 1, 6, 2, 1, 6, 3, 3, 3, 8, 3, 8, 1, 8], [8, 6, 2, 6, 3, 8, 2, 8, 8, 3, 1, 1, 6, 1, 1, 2, 1, 8, 1, 2, 1, 3, 1, 8, 3, 6, 3, 3, 3, 8]],
then output grids?

=========","The output grids would be:

[[6, 8, 3, 3, 3, 8, 1, 8, 3, 8, 8, 1, 6, 3, 1, 2, 3, 1, 1, 1, 3, 1, 2, 2, 6, 8, 2, 3, 8, 6], [1, 6, 6, 8, 8, 1, 3, 3, 6, 3, 8, 8, 2, 1, 1, 3, 6, 8, 8, 3, 1, 2, 1, 8, 2, 3, 8, 8, 8, 2], [8, 8, 3, 6, 3, 1, 6, 8, 3, 8, 6, 3, 1, 2, 8, 1, 8, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 8, 3, 6], [1, 3, 1, 2, 8, 1, 8, 2, 2, 2, 1, 3, 1, 8, 3, 6, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 6, 3], [8, 1, 2, 3, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 3, 8, 1, 1, 1, 1, 1, 1, 1, 8, 3, 6, 8], [6, 1, 3, 3, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 8, 6, 3, 2, 6, 1, 6, 6, 2, 8, 8, 3, 2, 6, 6], [2, 6, 3, 2, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 3, 8, 3, 3, 6, 3, 1, 8, 8, 1, 2, 3, 1, 8, 8], [3, 8, 1, 6, 1, 8, 1, 3, 8, 3, 2, 3, 2, 8, 1, 3, 1, 2, 2, 8, 1, 6, 3, 3, 3, 6, 2, 2, 8, 6], [8, 3, 3, 8, 3, 8, 2, 2, 8, 8, 8, 8, 8, 1, 1, 6, 3, 3, 6, 2, 2, 6, 1, 3, 3, 6, 3, 1, 3, 3], [2, 3, 3, 2, 3, 2, 6, 2, 3, 6, 8, 3, 3, 8, 3, 6, 1, 3, 3, 8, 8, 1, 6, 6, 8, 8, 1, 6, 2, 6], [3, 6, 3, 3, 3, 2, 3, 6, 1, 6, 3, 8, 2, 8, 2, 3, 2, 6, 3, 6, 6, 8, 3, 6, 6, 1, 6, 8, 8, 6], [8, 3, 3, 1, 2, 2, 6, 8, 2, 3, 6, 8, 3, 2, 2, 6, 3, 2, 1, 2, 6, 3, 6, 8, 8, 8, 1, 8, 1, 6], [1, 8, 8, 1, 6, 6, 8, 2, 8, 2, 1, 2, 8, 8, 1, 8, 2, 8, 3, 8, 3, 3, 8, 8, 2, 3, 3, 3, 3, 3], [8, 8, 3, 8, 3, 2, 8, 6, 3, 3, 1, 3, 2, 1, 6, 6, 8, 3, 6, 6, 3, 6, 3, 1, 8, 1, 2, 6, 3, 8], [8, 6, 6, 3, 2, 6, 6, 8, 6, 1, 3, 2, 8, 3, 1, 2, 8, 3, 6, 2, 8, 8, 3, 2, 2, 6, 1, 8, 6, 3], [1, 8, 1, 6, 2, 3, 2, 2, 1, 8, 2, 2, 8, 3, 6, 8, 8, 8, 2, 8, 8, 3, 3, 1, 3, 2, 2, 1, 3, 2], [8, 1, 3, 6, 8, 8, 6, 6, 3, 3, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 1, 3, 3, 8, 2, 3, 6, 2, 8, 2], [3, 3, 3, 6, 3, 2, 2, 2, 6, 3, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 8, 3, 3, 2, 3, 2, 2, 2, 2, 3], [3, 2, 1, 2, 2, 8, 6, 3, 8, 8, 8, 3, 1, 4, 4, 4, 4, 4, 4, 4, 6, 1, 8, 3, 8, 3, 6, 8, 1, 8], [3, 6, 1, 3, 2, 3, 6, 6, 6, 3, 2, 1, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 1, 8, 3, 6, 3, 2, 3], [8, 1, 3, 8, 6, 2, 3, 3, 3, 3, 2, 8, 6, 4, 4, 4, 4, 4, 4, 4, 2, 8, 8, 3, 8, 2, 3, 1, 3, 2], [3, 6, 3, 2, 8, 6, 6, 3, 8, 3, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 6, 8, 6, 1, 2, 1, 3, 3, 6], [3, 8, 8, 2, 3, 8, 3, 6, 8, 8, 3, 1, 3, 3, 8, 8, 2, 2, 2, 2, 3, 8, 1, 1, 3, 3, 2, 3, 1, 3], [3, 3, 6, 8, 1, 6, 6, 2, 8, 6, 6, 1, 8, 1, 2, 2, 1, 6, 8, 3, 2, 6, 8, 6, 8, 8, 6, 2, 8, 3], [8, 3, 3, 1, 8, 3, 2, 3, 3, 3, 8, 3, 3, 3, 3, 2, 3, 8, 3, 1, 3, 6, 6, 6, 6, 6, 3, 6, 2, 3], [3, 6, 8, 3, 2, 1, 8, 6, 6, 8, 6, 6, 1, 6, 6, 1, 3, 3, 6, 2, 6, 1, 3, 3, 8, 1, 2, 2, 3, 3], [1, 8, 3, 6, 3, 2, 6, 8, 8, 1, 6, 6, 8, 6, 6, 6, 2, 6, 8, 3, 8, 1, 3, 8, 2, 6, 3, 2, 6, 6], [8, 8, 6, 8, 1, 1, 8, 2, 2, 3, 6, 2, 8, 3, 8, 2, 1, 1, 8, 6, 8, 6, 8, 6, 3, 3, 3, 3, 2, 3], [1, 3, 8, 1, 3, 1, 6, 3, 6, 8, 2, 3, 3, 8, 2, 2, 2, 1, 3, 2, 8, 8, 3, 8, 6, 6, 3, 8, 3, 8], [8, 6, 2, 6, 3, 8, 2, 8, 8, 3, 1, 1, 6, 1, 1, 2, 1, 8, 1, 2, 1, 3, 1, 8, 3, 6, 3, 8, 1, 8]]

The pattern in this problem is that if a cell is surrounded by 4 cells with the same value, it changes its value to that value. In the given input, the cells at positions (5,5), (5,6), (5,7), (5,8), (5,9), (6,5), (6,6), (6,7), (6,8), (6,9), (7,5), (7,6), (7,7), (7,8), (7,9), (8,5), (8,6), (8,7), (8,8), (8,9), (9,5), (9,6), (9,7), (9,8), (9,9), (10,5), (10,6), (10,7), (10,8), (10,9), (11,5), (11,6), (11,7), (11,8), (11,9), (12,5), (12,6), (12,7), (12,8), (12,9) are surrounded by 4 cells with the value 8, so they change their value to 8.","[[6, 8, 3, 3, 3, 8, 1, 8, 3, 8, 8, 1, 6, 3, 1, 2, 3, 1, 1, 1, 3, 1, 2, 2, 6, 8, 2, 3, 8, 6], [1, 6, 6, 8, 8, 1, 3, 3, 6, 3, 8, 8, 2, 1, 1, 3, 6, 8, 8, 3, 1, 2, 1, 8, 2, 3, 8, 8, 8, 2], [8, 8, 3, 6, 3, 1, 6, 8, 3, 8, 6, 3, 1, 2, 8, 1, 8, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 8, 3, 6], [1, 3, 1, 2, 8, 1, 8, 2, 2, 2, 1, 3, 1, 8, 3, 6, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 6, 3], [8, 1, 2, 3, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 3, 8, 1, 1, 1, 1, 1, 1, 1, 8, 3, 6, 8], [6, 1, 3, 3, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 8, 6, 3, 2, 6, 1, 6, 6, 2, 8, 8, 3, 2, 6, 6], [2, 6, 3, 2, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 3, 8, 3, 3, 6, 3, 1, 8, 8, 1, 2, 3, 1, 8, 8], [3, 8, 1, 6, 1, 8, 1, 3, 8, 3, 2, 3, 2, 8, 1, 3, 1, 2, 2, 8, 1, 6, 3, 3, 3, 6, 2, 2, 8, 6], [8, 3, 3, 8, 3, 8, 2, 2, 8, 8, 8, 8, 8, 1, 1, 6, 3, 3, 6, 2, 2, 6, 1, 3, 3, 6, 3, 1, 3, 3], [2, 3, 3, 2, 3, 2, 6, 2, 3, 6, 8, 3, 3, 8, 3, 6, 1, 3, 3, 8, 8, 1, 6, 6, 8, 8, 1, 6, 2, 6], [3, 6, 3, 3, 3, 2, 3, 6, 1, 6, 3, 8, 2, 8, 2, 3, 2, 6, 3, 6, 6, 8, 3, 6, 6, 1, 6, 8, 8, 6], [8, 3, 3, 1, 2, 2, 6, 8, 2, 3, 6, 8, 3, 2, 2, 6, 3, 2, 1, 2, 6, 3, 6, 8, 8, 8, 1, 8, 1, 6], [1, 8, 8, 1, 6, 6, 8, 2, 8, 2, 1, 2, 8, 8, 1, 8, 2, 8, 3, 8, 3, 3, 8, 8, 2, 3, 3, 3, 3, 3], [8, 8, 3, 8, 3, 2, 8, 6, 3, 3, 1, 3, 2, 1, 6, 6, 8, 3, 6, 6, 3, 6, 3, 1, 8, 1, 2, 6, 3, 8], [8, 6, 6, 3, 2, 6, 6, 8, 6, 1, 3, 2, 8, 3, 1, 2, 8, 3, 6, 2, 8, 8, 3, 2, 2, 6, 1, 8, 6, 3], [1, 8, 1, 6, 2, 3, 2, 2, 1, 8, 2, 2, 8, 3, 6, 8, 8, 8, 2, 8, 8, 3, 3, 1, 3, 2, 2, 1, 3, 2], [8, 1, 3, 6, 8, 8, 6, 6, 3, 3, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 1, 3, 3, 8, 2, 3, 6, 2, 8, 2], [3, 3, 3, 6, 3, 2, 2, 2, 6, 3, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 8, 3, 3, 2, 3, 2, 2, 2, 2, 3], [3, 2, 1, 2, 2, 8, 6, 3, 8, 8, 8, 3, 1, 4, 4, 4, 4, 4, 4, 4, 6, 1, 8, 3, 8, 3, 6, 8, 1, 8], [3, 6, 1, 3, 2, 3, 6, 6, 6, 3, 2, 1, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 1, 8, 3, 6, 3, 2, 3], [8, 1, 3, 8, 6, 2, 3, 3, 3, 3, 2, 8, 6, 4, 4, 4, 4, 4, 4, 4, 2, 8, 8, 3, 8, 2, 3, 1, 3, 2], [3, 6, 3, 2, 8, 6, 6, 3, 8, 3, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 6, 8, 6, 1, 2, 1, 3, 3, 6], [3, 8, 8, 2, 3, 8, 3, 6, 8, 8, 3, 1, 3, 3, 8, 8, 2, 2, 2, 2, 3, 8, 1, 1, 3, 3, 2, 3, 1, 3], [3, 3, 6, 8, 1, 6, 6, 2, 8, 6, 6, 1, 8, 1, 2, 2, 1, 6, 8, 3, 2, 6, 8, 6, 8, 8, 6, 2, 8, 3], [8, 3, 3, 1, 8, 3, 2, 3, 3, 3, 8, 3, 3, 3, 3, 2, 3, 8, 3, 1, 3, 6, 6, 6, 6, 6, 3, 6, 2, 3], [3, 6, 8, 3, 2, 1, 8, 6, 6, 8, 6, 6, 1, 6, 6, 1, 3, 3, 6, 2, 6, 1, 3, 3, 8, 1, 2, 2, 3, 3], [1, 8, 3, 6, 3, 2, 6, 8, 8, 1, 6, 6, 8, 6, 6, 6, 2, 6, 8, 3, 8, 1, 3, 8, 2, 6, 3, 2, 6, 6], [8, 8, 6, 8, 1, 1, 8, 2, 2, 3, 6, 2, 8, 3, 8, 2, 1, 1, 8, 6, 8, 6, 8, 6, 3, 3, 3, 3, 2, 3], [1, 3, 8, 1, 3, 1, 6, 3, 6, 8, 2, 3, 3, 8, 2, 2, 2, 1, 3, 2, 8, 8, 3, 8, 6, 6, 3, 8, 3, 8], [8, 6, 2, 6, 3, 8, 2, 8, 8, 3, 1, 1, 6, 1, 1, 2, 1, 8, 1, 2, 1, 3, 1, 8, 3, 6, 3, 8, 1, 8]]","[[6, 8, 3, 3, 3, 8, 1, 8, 3, 8, 8, 1, 6, 3, 1, 2, 3, 1, 1, 1, 3, 1, 2, 2, 6, 8, 2, 3, 8, 6], [1, 6, 6, 8, 8, 1, 3, 3, 6, 3, 8, 8, 2, 1, 1, 3, 6, 8, 8, 3, 1, 2, 1, 8, 2, 3, 8, 8, 8, 2], [8, 8, 3, 6, 3, 1, 6, 8, 3, 8, 6, 3, 1, 2, 8, 1, 8, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 8, 3, 6], [1, 3, 1, 2, 8, 1, 8, 2, 2, 2, 1, 3, 1, 8, 3, 6, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 6, 3], [8, 1, 2, 3, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 3, 8, 1, 1, 1, 1, 1, 1, 1, 8, 3, 6, 8], [6, 1, 3, 3, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 8, 6, 3, 2, 6, 1, 6, 6, 2, 8, 8, 3, 2, 6, 6], [2, 6, 3, 2, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 3, 8, 3, 3, 6, 3, 1, 8, 8, 1, 2, 3, 1, 8, 8], [3, 8, 1, 6, 1, 8, 1, 3, 8, 3, 2, 3, 2, 8, 1, 3, 1, 2, 2, 8, 1, 6, 3, 3, 3, 6, 2, 2, 8, 6], [8, 3, 3, 8, 3, 8, 2, 2, 8, 8, 8, 8, 8, 1, 1, 6, 3, 3, 6, 2, 2, 6, 1, 3, 3, 6, 3, 1, 3, 3], [2, 3, 3, 2, 3, 2, 6, 2, 3, 6, 8, 3, 3, 8, 3, 6, 1, 3, 3, 8, 8, 1, 6, 6, 8, 8, 1, 6, 2, 6], [3, 6, 3, 3, 3, 2, 3, 6, 1, 6, 3, 8, 2, 8, 2, 3, 2, 6, 3, 6, 6, 8, 3, 6, 6, 1, 6, 8, 8, 6], [8, 3, 3, 1, 2, 2, 6, 8, 2, 3, 6, 8, 3, 2, 2, 6, 3, 2, 1, 2, 6, 3, 6, 8, 8, 8, 1, 8, 1, 6], [1, 8, 8, 1, 6, 6, 8, 2, 8, 2, 1, 2, 8, 8, 1, 8, 2, 8, 3, 8, 3, 3, 8, 8, 2, 3, 3, 3, 3, 3], [8, 8, 3, 8, 3, 2, 8, 6, 3, 3, 1, 3, 2, 1, 6, 6, 8, 3, 6, 6, 3, 6, 3, 1, 8, 1, 2, 6, 3, 8], [8, 6, 6, 3, 2, 6, 6, 8, 6, 1, 3, 2, 8, 3, 1, 2, 8, 3, 6, 2, 8, 8, 3, 2, 2, 6, 1, 8, 6, 3], [1, 8, 1, 6, 2, 3, 2, 2, 1, 8, 2, 2, 8, 3, 6, 8, 8, 8, 2, 8, 8, 3, 3, 1, 3, 2, 2, 1, 3, 2], [8, 1, 3, 6, 8, 8, 6, 6, 3, 3, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 1, 3, 3, 8, 2, 3, 6, 2, 8, 2], [3, 3, 3, 6, 3, 2, 2, 2, 6, 3, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 8, 3, 3, 2, 3, 2, 2, 2, 2, 3], [3, 2, 1, 2, 2, 8, 6, 3, 8, 8, 8, 3, 1, 4, 4, 4, 4, 4, 4, 4, 6, 1, 8, 3, 8, 3, 6, 8, 1, 8], [3, 6, 1, 3, 2, 3, 6, 6, 6, 3, 2, 1, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 1, 8, 3, 6, 3, 2, 3], [8, 1, 3, 8, 6, 2, 3, 3, 3, 3, 2, 8, 6, 4, 4, 4, 4, 4, 4, 4, 2, 8, 8, 3, 8, 2, 3, 1, 3, 2], [3, 6, 3, 2, 8, 6, 6, 3, 8, 3, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 6, 8, 6, 1, 2, 1, 3, 3, 6], [3, 8, 8, 2, 3, 8, 3, 6, 8, 8, 3, 1, 3, 3, 8, 8, 2, 2, 2, 2, 3, 8, 1, 1, 3, 3, 2, 3, 1, 3], [3, 3, 6, 8, 1, 6, 6, 2, 8, 6, 6, 1, 8, 1, 2, 2, 1, 6, 8, 3, 2, 6, 8, 6, 8, 8, 6, 2, 8, 3], [8, 3, 3, 1, 8, 3, 2, 3, 3, 3, 8, 3, 3, 3, 3, 2, 3, 8, 3, 1, 3, 6, 6, 6, 6, 6, 3, 6, 2, 3], [3, 6, 8, 3, 2, 1, 8, 6, 6, 8, 6, 6, 1, 6, 6, 1, 3, 3, 6, 2, 6, 1, 3, 3, 8, 1, 2, 2, 3, 3], [1, 8, 3, 6, 3, 2, 6, 8, 8, 1, 6, 6, 8, 6, 6, 6, 2, 6, 8, 3, 8, 1, 3, 8, 2, 6, 3, 2, 6, 6], [8, 8, 6, 8, 1, 1, 8, 2, 2, 3, 6, 2, 8, 3, 8, 2, 1, 1, 8, 6, 8, 6, 8, 6, 3, 3, 3, 3, 2, 3], [1, 3, 8, 1, 3, 1, 6, 3, 6, 8, 2, 3, 3, 8, 2, 2, 2, 1, 3, 2, 8, 8, 3, 8, 6, 6, 3, 8, 3, 8], [8, 6, 2, 6, 3, 8, 2, 8, 8, 3, 1, 1, 6, 1, 1, 2, 1, 8, 1, 2, 1, 3, 1, 8, 3, 6, 3, 8, 1, 8]]","[[6, 8, 3, 3, 3, 8, 1, 8, 3, 8, 8, 1, 6, 3, 1, 2, 3, 1, 1, 1, 3, 1, 2, 2, 6, 8, 2, 3, 8, 6], [1, 6, 6, 8, 8, 1, 3, 3, 6, 3, 8, 8, 2, 1, 1, 3, 6, 8, 8, 3, 1, 2, 1, 8, 2, 3, 8, 8, 8, 2], [8, 8, 3, 6, 3, 1, 6, 8, 3, 8, 6, 3, 1, 2, 8, 1, 8, 2, 1, 3, 2, 4, 4, 4, 4, 4, 1, 8, 3, 6], [1, 3, 1, 2, 8, 1, 8, 2, 2, 2, 1, 3, 1, 8, 3, 6, 3, 1, 1, 3, 1, 4, 4, 4, 4, 4, 1, 2, 6, 3], [8, 1, 2, 3, 8, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 3, 8, 1, 1, 4, 4, 4, 4, 4, 8, 3, 6, 8], [6, 1, 3, 1, 8, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 3, 1, 6, 4, 4, 4, 4, 4, 6, 2, 8, 3], [3, 3, 3, 3, 8, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 3, 1, 1, 6, 2, 8, 8, 8, 8, 8, 8, 1, 3], [3, 3, 1, 3, 2, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 1, 1, 3, 2, 6, 3, 2, 1, 8, 8, 8, 2, 8], [1, 8, 3, 2, 8, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 8, 8, 8, 2, 8, 3, 1, 3, 3, 6, 1, 3, 1], [8, 1, 2, 3, 1, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 8, 6, 6, 1, 3, 8, 3, 3, 2, 8, 8, 8, 1], [3, 3, 1, 1, 2, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 8, 1, 8, 1, 8, 6, 2, 8, 1, 1, 1, 6, 3], [6, 1, 1, 2, 1, 6, 8, 3, 2, 2, 8, 1, 6, 3, 8, 2, 6, 3, 2, 1, 3, 3, 6, 1, 2, 8, 6, 2, 2, 2], [1, 3, 2, 8, 1, 2, 8, 8, 1, 3, 2, 2, 2, 2, 3, 3, 3, 8, 3, 2, 1, 1, 6, 6, 3, 8, 3, 3, 1, 6], [8, 1, 2, 6, 3, 1, 3, 2, 8, 1, 3, 3, 8, 1, 8, 3, 6, 6, 8, 3, 1, 8, 1, 3, 3, 2, 3, 3, 6, 3], [8, 8, 1, 3, 2, 8, 1, 1, 2, 1, 2, 1, 8, 1, 1, 3, 3, 3, 8, 8, 8, 3, 3, 3, 1, 8, 6, 1, 1, 3], [6, 8, 3, 2, 8, 1, 3, 1, 1, 3, 1, 1, 8, 3, 8, 8, 3, 3, 3, 6, 3, 3, 3, 1, 3, 6, 3, 2, 8, 6], [3, 8, 1, 1, 8, 2, 3, 3, 2, 8, 1, 6, 1, 6, 6, 8, 6, 3, 1, 8, 3, 8, 8, 8, 1, 1, 6, 3, 3, 1], [8, 8, 1, 2, 3, 6, 3, 3, 1, 8, 8, 3, 3, 6, 8, 1, 8, 1, 2, 2, 3, 8, 3, 8, 8, 2, 6, 8, 6, 1], [3, 1, 8, 2, 3, 3, 6, 3, 3, 6, 3, 1, 1, 3, 1, 1, 8, 1, 3, 1, 8, 2, 8, 1, 1, 2, 1, 3, 3, 8], [8, 8, 8, 1, 2, 8, 8, 3, 1, 1, 3, 3, 3, 3, 6, 4, 4, 4, 4, 4, 4, 1, 3, 8, 2, 8, 8, 1, 2, 8], [6, 8, 3, 8, 1, 2, 8, 3, 8, 3, 1, 8, 3, 3, 1, 4, 4, 4, 4, 4, 4, 8, 2, 8, 8, 8, 3, 3, 1, 1], [8, 1, 6, 3, 1, 2, 8, 8, 1, 1, 3, 8, 2, 3, 8, 4, 4, 4, 4, 4, 4, 3, 8, 3, 8, 3, 3, 1, 3, 1], [2, 1, 2, 2, 1, 8, 6, 3, 1, 3, 8, 8, 8, 2, 2, 4, 4, 4, 4, 4, 4, 8, 8, 1, 3, 1, 1, 3, 2, 6], [1, 1, 3, 6, 6, 3, 2, 2, 8, 2, 6, 3, 8, 6, 2, 4, 4, 4, 4, 4, 4, 3, 1, 1, 3, 3, 8, 3, 3, 3], [1, 3, 6, 1, 8, 3, 2, 1, 3, 3, 1, 3, 8, 3, 8, 4, 4, 4, 4, 4, 4, 3, 8, 3, 8, 3, 3, 8, 1, 2], [8, 8, 3, 8, 8, 2, 2, 2, 2, 8, 8, 6, 8, 3, 3, 4, 4, 4, 4, 4, 4, 2, 2, 1, 6, 1, 8, 6, 8, 6], [3, 3, 1, 1, 1, 8, 8, 3, 3, 3, 2, 8, 2, 3, 3, 3, 3, 3, 6, 8, 8, 2, 2, 8, 1, 1, 2, 1, 8, 8], [6, 6, 3, 3, 3, 6, 3, 3, 8, 8, 8, 8, 1, 3, 6, 8, 3, 3, 8, 1, 1, 1, 6, 1, 2, 6, 2, 6, 3, 8], [1, 2, 8, 3, 2, 1, 3, 3, 3, 3, 1, 3, 8, 6, 6, 1, 8, 1, 6, 2, 1, 6, 3, 3, 3, 8, 3, 8, 1, 8], [8, 6, 2, 6, 3, 8, 2, 8, 8, 3, 1, 1, 6, 1, 1, 2, 1, 8, 1, 2, 1, 3, 1, 8, 3, 6, 3, 3, 3, 8]]",FALSE,
2546ccf6,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 6, 0, 0, 0, 4, 6, 4, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 4, 0, 6, 0, 4, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 4, 4, 0, 6, 0, 4, 4, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 4, 0, 6, 0, 4, 0, 0, 6, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 6, 0, 0, 4, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 4, 4, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 4, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 4, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 6, 0, 0, 0, 4, 6, 4, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 4, 0, 6, 0, 4, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 4, 4, 0, 6, 0, 4, 4, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 4, 0, 6, 0, 4, 0, 0, 6, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 6, 0, 0, 4, 0, 6, 0, 4, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 4, 4, 0, 6, 0, 4, 4, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 4, 0, 6, 0, 4, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 4, 6, 4, 0, 0, 0, 6, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [3, 0, 3, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 3, 3, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 3, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 3, 0, 2, 0, 3, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 3, 3, 0, 2, 0, 3, 3, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [3, 0, 3, 3, 2, 3, 3, 0, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 1, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 1, 1, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [3, 0, 3, 3, 2, 3, 3, 0, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 3, 3, 0, 2, 0, 3, 3, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 3, 0, 2, 0, 3, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 3, 0, 2, 0, 3, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 3, 3, 0, 2, 0, 3, 3, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [3, 0, 3, 3, 2, 3, 3, 0, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 1, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 1, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 1, 1, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 1, 1, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]]

The pattern in this problem is that the 2's and 4's are mirrored vertically across the center of the grid, and the 1's are mirrored horizontally.","[[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 1, 1, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 1, 1, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 1, 1, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]]",FALSE,
2685904e,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 6, 4, 3, 4, 7, 3, 8, 3, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 3, 0, 3, 0], [0, 0, 0, 3, 0, 0, 3, 0, 3, 0], [0, 0, 0, 3, 0, 0, 3, 0, 3, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 6, 4, 3, 4, 7, 3, 8, 3, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 4, 6, 2, 1, 9, 2, 9, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 4, 6, 2, 1, 9, 2, 9, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 6, 4, 6, 2, 4, 4, 3, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 6, 4, 6, 2, 4, 4, 3, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern in this problem is that the smallest number in the second last row of the input grid is copied three times in the row above the row with all 5's.","[[8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 6, 4, 6, 2, 4, 4, 3, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 6, 4, 6, 2, 4, 4, 3, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 6, 0, 6, 2, 0, 0, 3, 0], [2, 3, 6, 0, 6, 2, 0, 0, 3, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 6, 4, 6, 2, 4, 4, 3, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
2697da3f,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 0, 4, 0], [0, 0, 0, 4, 4, 4, 0], [0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 4, 4, 4, 0], [0, 4, 4, 4, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0], [4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4], [0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0], [4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4], [0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 0, 0, 0], [0, 4, 0, 4, 4, 0, 0], [0, 0, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 4, 4, 0], [4, 0, 4, 4, 0, 0, 0, 4, 4, 0, 4], [0, 4, 4, 0, 0, 0, 0, 0, 4, 4, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 4, 4, 4, 0, 0, 0], [0, 0, 4, 4, 0, 0, 4, 0, 0, 0], [0, 4, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 4, 4, 0, 0, 4, 0, 0, 0], [0, 0, 4, 0, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [4, 4, 4, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0], 
 [0, 4, 0, 4, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 4, 0, 4, 0, 0], 
 [0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0], 
 [0, 4, 0, 4, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 4, 0, 4, 0, 0], 
 [4, 4, 4, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0], 
 [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

The pattern","[[0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [4, 4, 4, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0], 
 [0, 4, 0, 4, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 4, 0, 4, 0, 0], 
 [0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0], 
 [0, 4, 0, 4, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 4, 0, 4, 0, 0], 
 [4, 4, 4, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0], 
 [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [4, 4, 4, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0], 
 [0, 4, 0, 4, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 4, 0, 4, 0, 0], 
 [0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0], 
 [0, 4, 0, 4, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 4, 0, 4, 0, 0], 
 [4, 4, 4, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0], 
 [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 0], [0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 0], [4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4], [0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 0], [0, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
2753e76c,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 8, 8], [0, 2, 2], [0, 0, 1]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0, 0, 4, 4, 0, 0, 0, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 2, 2, 0, 0, 0], [8, 8, 8, 8, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [8, 8, 8, 8, 0, 0, 0, 3, 3, 3, 0, 0, 2, 2, 2, 2], [8, 8, 8, 8, 0, 0, 0, 3, 3, 3, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 2, 2, 2, 2], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[2, 2, 2, 2], [0, 3, 3, 3], [0, 0, 8, 8], [0, 0, 0, 4]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 8, 8], [0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 0, 0, 0, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3], [0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 4, 4, 4, 0, 3, 3, 3, 3, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 4, 4, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 4, 4, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be 
[[3, 3, 3], [0, 4, 4, 4], [0, 0, 8, 8]]. 

The pattern in this problem is to find the largest contiguous blocks of the same number in the grid, and then output these blocks in a new grid, sorted by their position from top to bottom and left to right in the original grid. The size of the output grid is determined by the size of the largest block.","[[3, 3, 3], [0, 4, 4, 4], [0, 0, 8, 8]]","[[3, 3, 3], [0, 4, 4, 4], [0, 0, 8, 8]]","[[3, 3, 3, 3, 3], [0, 4, 4, 4, 4], [0, 0, 0, 8, 8]]",FALSE,
27a77e38,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[2, 2, 3], [5, 5, 5], [0, 0, 0]],
then this grids change to output grids below
[[2, 2, 3], [5, 5, 5], [0, 2, 0]].

Example 2
If input grids are like that
[[3, 6, 4, 2, 4], [8, 4, 3, 3, 4], [5, 5, 5, 5, 5], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]],
then this grids change to output grids below
[[3, 6, 4, 2, 4], [8, 4, 3, 3, 4], [5, 5, 5, 5, 5], [0, 0, 0, 0, 0], [0, 0, 4, 0, 0]].

Quiz
If input grids are like that
[[9, 1, 2, 8, 4, 9, 8, 2, 1], [4, 4, 3, 1, 2, 7, 6, 7, 9], [2, 1, 6, 9, 7, 8, 4, 3, 6], [9, 8, 6, 3, 4, 2, 9, 1, 7], [5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that the last non-zero element in the first column of the grid is copied to the middle of the last row of zeros in the grid. 

So, for the given input:
[[9, 1, 2, 8, 4, 9, 8, 2, 1], [4, 4, 3, 1, 2, 7, 6, 7, 9], [2, 1, 6, 9, 7, 8, 4, 3, 6], [9, 8, 6, 3, 4, 2, 9, 1, 7], [5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],

The last non-zero element in the first column is 5 (from the row [5, 5, 5, 5, 5, 5, 5, 5, 5]). The middle of the last row of zeros is the 5th element (index 4) of the row [0, 0, 0, 0, 0, 0, 0, 0, 0]. So, we replace this element with 5.

The output grid will be:
[[9, 1, 2, 8, 4, 9, 8, 2, 1], [4, 4, 3, 1, 2, 7, 6, 7, 9], [2, 1, 6, 9, 7, 8, 4, 3, 6], [9, 8, 6, 3, 4, 2, 9, 1, 7], [5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0]].","[[9, 1, 2, 8, 4, 9, 8, 2, 1], [4, 4, 3, 1, 2, 7, 6, 7, 9], [2, 1, 6, 9, 7, 8, 4, 3, 6], [9, 8, 6, 3, 4, 2, 9, 1, 7], [5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],

The last non-zero element in the first column is 5 (from the row [5, 5, 5, 5, 5, 5, 5, 5, 5]). The middle of the last row of zeros is the 5th element (index 4) of the row [0, 0, 0, 0, 0, 0, 0, 0, 0]. So, we replace this element with 5.

The output grid will be:
[[9, 1, 2, 8, 4, 9, 8, 2, 1], [4, 4, 3, 1, 2, 7, 6, 7, 9], [2, 1, 6, 9, 7, 8, 4, 3, 6], [9, 8, 6, 3, 4, 2, 9, 1, 7], [5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0]]","[[9, 1, 2, 8, 4, 9, 8, 2, 1], [4, 4, 3, 1, 2, 7, 6, 7, 9], [2, 1, 6, 9, 7, 8, 4, 3, 6], [9, 8, 6, 3, 4, 2, 9, 1, 7], [5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0]]","[[9, 1, 2, 8, 4, 9, 8, 2, 1], [4, 4, 3, 1, 2, 7, 6, 7, 9], [2, 1, 6, 9, 7, 8, 4, 3, 6], [9, 8, 6, 3, 4, 2, 9, 1, 7], [5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0]]",FALSE,
27f8ce4f,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 1], [8, 6, 1], [4, 9, 6]],
then this grids change to output grids below
[[8, 8, 1, 8, 8, 1, 0, 0, 0], [8, 6, 1, 8, 6, 1, 0, 0, 0], [4, 9, 6, 4, 9, 6, 0, 0, 0], [8, 8, 1, 0, 0, 0, 0, 0, 0], [8, 6, 1, 0, 0, 0, 0, 0, 0], [4, 9, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[7, 7, 1], [4, 7, 1], [3, 3, 7]],
then this grids change to output grids below
[[7, 7, 1, 7, 7, 1, 0, 0, 0], [4, 7, 1, 4, 7, 1, 0, 0, 0], [3, 3, 7, 3, 3, 7, 0, 0, 0], [0, 0, 0, 7, 7, 1, 0, 0, 0], [0, 0, 0, 4, 7, 1, 0, 0, 0], [0, 0, 0, 3, 3, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 7, 1], [0, 0, 0, 0, 0, 0, 4, 7, 1], [0, 0, 0, 0, 0, 0, 3, 3, 7]].

Quiz
If input grids are like that
[[9, 6, 7], [8, 7, 7], [2, 8, 7]],
then output grids?

=========","The output grids would be:

[[9, 6, 7, 9, 6, 7, 0, 0, 0], [8, 7, 7, 8, 7, 7, 0, 0, 0], [2, 8, 7, 2, 8, 7, 0, 0, 0], [0, 0, 0, 9, 6, 7, 0, 0, 0], [0, 0, 0, 8, 7, 7, 0, 0, 0], [0, 0, 0, 2, 8, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 9, 6, 7], [0, 0, 0, 0, 0, 0, 8, 7, 7], [0, 0, 0, 0, 0, 0, 2, 8, 7]].

The pattern here is that the original 3x3 grid is duplicated twice horizontally and three times vertically, with each new copy shifted down and to the right by one row/column, and the remaining spaces filled with zeros.","[[9, 6, 7, 9, 6, 7, 0, 0, 0], [8, 7, 7, 8, 7, 7, 0, 0, 0], [2, 8, 7, 2, 8, 7, 0, 0, 0], [0, 0, 0, 9, 6, 7, 0, 0, 0], [0, 0, 0, 8, 7, 7, 0, 0, 0], [0, 0, 0, 2, 8, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 9, 6, 7], [0, 0, 0, 0, 0, 0, 8, 7, 7], [0, 0, 0, 0, 0, 0, 2, 8, 7]]","[[9, 6, 7, 9, 6, 7, 0, 0, 0], [8, 7, 7, 8, 7, 7, 0, 0, 0], [2, 8, 7, 2, 8, 7, 0, 0, 0], [0, 0, 0, 9, 6, 7, 0, 0, 0], [0, 0, 0, 8, 7, 7, 0, 0, 0], [0, 0, 0, 2, 8, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 9, 6, 7], [0, 0, 0, 0, 0, 0, 8, 7, 7], [0, 0, 0, 0, 0, 0, 2, 8, 7]]","[[0, 0, 0, 0, 0, 0, 9, 6, 7], [0, 0, 0, 0, 0, 0, 8, 7, 7], [0, 0, 0, 0, 0, 0, 2, 8, 7], [0, 0, 0, 9, 6, 7, 9, 6, 7], [0, 0, 0, 8, 7, 7, 8, 7, 7], [0, 0, 0, 2, 8, 7, 2, 8, 7], [0, 0, 0, 0, 0, 0, 9, 6, 7], [0, 0, 0, 0, 0, 0, 8, 7, 7], [0, 0, 0, 0, 0, 0, 2, 8, 7]]",FALSE,
281123b4,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 8, 0, 3, 5, 5, 5, 0, 3, 9, 9, 9, 0, 3, 4, 4, 4, 4], [8, 0, 8, 0, 3, 5, 5, 5, 5, 3, 9, 9, 0, 9, 3, 0, 0, 0, 0], [0, 0, 0, 8, 3, 5, 5, 0, 0, 3, 0, 0, 0, 0, 3, 0, 4, 4, 0], [0, 8, 0, 0, 3, 0, 5, 5, 5, 3, 9, 0, 0, 0, 3, 4, 4, 4, 4]],
then this grids change to output grids below
[[9, 9, 9, 4], [9, 9, 8, 9], [5, 4, 4, 8], [9, 4, 4, 4]].

Example 2
If input grids are like that
[[0, 0, 8, 8, 3, 5, 5, 0, 0, 3, 0, 9, 9, 9, 3, 4, 0, 4, 0], [8, 8, 8, 8, 3, 0, 5, 0, 5, 3, 0, 9, 0, 9, 3, 4, 0, 4, 0], [8, 8, 0, 8, 3, 5, 0, 5, 5, 3, 0, 0, 0, 9, 3, 0, 4, 0, 4], [0, 8, 8, 0, 3, 0, 0, 0, 5, 3, 9, 0, 0, 9, 3, 0, 0, 0, 0]],
then this grids change to output grids below
[[4, 9, 9, 9], [4, 9, 4, 9], [8, 4, 5, 9], [9, 8, 8, 9]].

Quiz
If input grids are like that
[[8, 8, 8, 0, 3, 5, 0, 5, 5, 3, 9, 0, 0, 0, 3, 0, 0, 0, 0], [8, 0, 8, 8, 3, 5, 5, 5, 5, 3, 0, 0, 9, 9, 3, 4, 4, 0, 4], [8, 0, 0, 8, 3, 5, 0, 5, 5, 3, 0, 0, 0, 9, 3, 0, 4, 0, 4], [0, 0, 8, 8, 3, 0, 0, 5, 5, 3, 9, 9, 9, 0, 3, 0, 4, 4, 0]],
then output grids?

=========","The pattern in this problem is that the output grid is a 4x4 grid where each cell represents a unique color in the input grid. The value in each cell of the output grid is the most frequent number in the corresponding color region of the input grid. If there is a tie for the most frequent number, the larger number is chosen.

In the quiz case, the output grid would be:

[[9, 9, 9, 4], [9, 9, 8, 9], [5, 4, 4, 8], [9, 4, 4, 4]]","[[9, 9, 9, 4], [9, 9, 8, 9], [5, 4, 4, 8], [9, 4, 4, 4]]","[[9, 9, 9, 4], [9, 9, 8, 9], [5, 4, 4, 8], [9, 4, 4, 4]]","[[9, 8, 8, 5], [4, 4, 9, 9], [8, 4, 5, 9], [9, 9, 9, 8]]",FALSE,
292dd178,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 8, 1, 8, 8, 8, 8, 8], [8, 1, 8, 8, 1, 8, 8, 8, 8, 8], [8, 1, 8, 8, 1, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 1, 1, 1, 1], [8, 8, 8, 8, 8, 8, 1, 8, 8, 1], [8, 8, 8, 8, 8, 8, 1, 8, 8, 1], [8, 8, 8, 8, 8, 8, 1, 1, 8, 1], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
then this grids change to output grids below
[[8, 8, 8, 2, 8, 8, 8, 8, 8, 8], [8, 8, 8, 2, 8, 8, 8, 8, 8, 8], [8, 1, 1, 2, 1, 8, 8, 8, 8, 8], [8, 1, 2, 2, 1, 8, 8, 8, 8, 8], [8, 1, 2, 2, 1, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 1, 1, 1, 1], [8, 8, 8, 8, 8, 8, 1, 2, 2, 1], [8, 8, 8, 8, 8, 8, 1, 2, 2, 1], [8, 8, 8, 8, 8, 8, 1, 1, 2, 1], [8, 8, 8, 8, 8, 8, 8, 8, 2, 8]].

Example 2
If input grids are like that
[[5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 1, 1, 1, 1, 5, 5, 5], [5, 5, 1, 5, 5, 1, 5, 5, 5], [5, 5, 5, 5, 5, 1, 5, 5, 5], [5, 5, 1, 1, 1, 1, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5]],
then this grids change to output grids below
[[5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 1, 1, 1, 1, 5, 5, 5], [5, 5, 1, 2, 2, 1, 5, 5, 5], [2, 2, 2, 2, 2, 1, 5, 5, 5], [5, 5, 1, 1, 1, 1, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5]].

Quiz
If input grids are like that
[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 4, 1, 1, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4], [4, 1, 4, 4, 1, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4], [4, 1, 4, 4, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 4, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
then output grids?

=========","The output grids would be:

[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 2, 1, 1, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4], [4, 1, 2, 2, 1, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4], [4, 1, 2, 2, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]].

The pattern here is that the cells that are surrounded by '1's on three sides (either horizontally or vertically) are changed to '2'.","[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 2, 1, 1, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4], [4, 1, 2, 2, 1, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4], [4, 1, 2, 2, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]","[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 2, 1, 1, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4], [4, 1, 2, 2, 1, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4], [4, 1, 2, 2, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]","[[4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 2, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 2, 1, 1, 4, 4, 4, 1, 2, 2, 2, 2, 2, 2], [4, 1, 2, 2, 1, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4], [4, 1, 2, 2, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4]]",FALSE,
29700607,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 6, 5, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 6, 5, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 5, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 5, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 5, 3, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 5, 3, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 3, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 3, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 3, 8, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 3, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [4, 4, 4, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

The pattern here is that each non-zero number expands in both directions along its row until it hits another non-zero number or the edge of the grid.","[[0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [4, 4, 4, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [4, 4, 4, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [4, 4, 4, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0]]",FALSE,
2a5f8217,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0], [0, 0, 0, 8, 8, 8], [0, 0, 0, 0, 8, 0]],
then this grids change to output grids below
[[0, 8, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0], [0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0], [0, 0, 0, 8, 8, 8], [0, 0, 0, 0, 8, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 9, 9], [0, 0, 1, 1, 0, 0, 0, 0, 9], [0, 0, 0, 1, 0, 7, 0, 0, 0], [6, 6, 6, 0, 0, 7, 7, 0, 0], [6, 0, 6, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 0, 0, 7, 0, 0], [0, 6, 0, 6, 0, 0, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 9, 9], [0, 0, 9, 9, 0, 0, 0, 0, 9], [0, 0, 0, 9, 0, 7, 0, 0, 0], [6, 6, 6, 0, 0, 7, 7, 0, 0], [6, 0, 6, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 8, 8, 8, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 8, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 6, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 6, 6, 6], [8, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that the color of the objects in the grid is swapped. The color of the object in the top left corner is swapped with the color of the object in the bottom left corner, and the color of the object in the top right corner is swapped with the color of the object in the bottom right corner.

So, if the input grids are like that
[[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 8, 8, 8, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 8, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 6, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 6, 6, 6], [8, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then the output grids will be
[[0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 6, 6, 6, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 6, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 8, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 8, 8, 8], [6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].","[[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 8, 8, 8, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 8, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 6, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 6, 6, 6], [8, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then the output grids will be
[[0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 6, 6, 6, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 6, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 8, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 8, 8, 8], [6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 6, 6, 6, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 6, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 8, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 8, 8, 8], [6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 8, 8, 0, 8, 8, 0, 0], [0, 2, 2, 2, 0, 0, 8, 0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 6, 6, 6, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 6, 0, 0, 0, 0, 2, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 6, 0], [0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 6, 6, 6], [8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
2b01abd0,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 2, 0, 2, 0, 0, 0], [0, 0, 2, 3, 2, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 3, 0, 3, 0, 0, 0], [0, 0, 3, 2, 3, 3, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 2, 3, 2, 2, 0, 0, 0], [0, 0, 0, 2, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 8, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 4, 0], [0, 0, 0, 0, 0, 0, 1, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 8, 0, 8, 0, 1, 0, 4, 0, 4, 0], [0, 0, 4, 8, 0, 0, 1, 0, 0, 4, 8, 0], [0, 0, 8, 8, 8, 0, 1, 0, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem seems to be that the objects in the grid are mirrored vertically across the line of 1's. Therefore, the output for the given input would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 0, 2, 0, 2, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 1, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 0, 2, 0, 2, 0, 0], [0, 0, 8, 8, 8, 0, 0, 0, 1, 0, 0, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 0, 2, 0, 2, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 1, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 0, 2, 0, 2, 0, 0], [0, 0, 8, 8, 8, 0, 0, 0, 1, 0, 0, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 0, 2, 0, 2, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 1, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 0, 2, 0, 2, 0, 0], [0, 0, 8, 8, 8, 0, 0, 0, 1, 0, 0, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 8, 0, 1, 0, 2, 0, 0, 2, 0, 0], [0, 0, 0, 2, 2, 2, 2, 0, 1, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 0, 0, 8, 0, 1, 0, 2, 0, 0, 2, 0, 0], [0, 0, 2, 2, 2, 0, 0, 0, 1, 0, 0, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
2c0b0aff,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 3, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 8, 8, 8, 3, 8, 0, 0, 0, 8, 8, 3, 3, 8, 8, 8, 0, 0, 0], [0, 0, 8, 3, 3, 3, 8, 3, 3, 3, 0, 0, 0, 3, 8, 8, 8, 8, 8, 3, 0, 0, 0], [0, 0, 8, 8, 3, 8, 8, 8, 3, 8, 0, 0, 0, 8, 8, 8, 3, 8, 8, 8, 0, 0, 0], [0, 0, 8, 8, 8, 8, 3, 8, 8, 8, 0, 0, 0, 8, 8, 3, 3, 3, 8, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 3, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 8, 8, 8, 8, 8, 0, 0, 0], [0, 8, 3, 8, 8, 8, 8, 8, 3, 8, 0, 0, 0, 8, 8, 8, 8, 3, 8, 8, 0, 0, 0], [0, 8, 8, 3, 8, 8, 8, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 3, 3, 3, 8, 3, 8, 3, 8, 0, 8, 3, 8, 8, 8, 8, 8, 3, 0, 0, 0, 0], [0, 8, 8, 3, 8, 8, 8, 8, 8, 8, 0, 3, 3, 3, 8, 8, 3, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 3, 8, 8, 3, 3, 3, 8, 0, 0, 0, 0], [0, 8, 3, 8, 8, 8, 3, 8, 8, 8, 0, 8, 8, 8, 8, 8, 3, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 3, 3, 8, 8, 0, 8, 3, 8, 8, 8, 8, 3, 8, 0, 0, 0, 0], [0, 8, 3, 8, 8, 8, 3, 8, 3, 8, 0, 3, 3, 3, 8, 8, 3, 3, 3, 0, 0, 0, 0], [0, 3, 8, 8, 8, 8, 8, 8, 8, 3, 0, 8, 3, 8, 8, 8, 8, 3, 8, 0, 0, 0, 0], [0, 8, 8, 3, 8, 8, 8, 3, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 3, 8, 8, 8, 8, 8, 3], [3, 3, 3, 8, 8, 3, 8, 8], [8, 3, 8, 8, 3, 3, 3, 8], [8, 8, 8, 8, 8, 3, 8, 8], [8, 3, 8, 8, 8, 8, 3, 8], [3, 3, 3, 8, 8, 3, 3, 3], [8, 3, 8, 8, 8, 8, 3, 8]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 8, 8, 3, 8, 8, 8, 3, 8, 0, 0, 3, 8, 8, 8, 3, 8, 8, 8, 3, 8, 0, 0], [0, 8, 8, 3, 3, 3, 8, 8, 8, 3, 0, 0, 8, 8, 3, 8, 8, 8, 8, 3, 3, 3, 0, 0], [0, 8, 8, 8, 3, 8, 8, 8, 8, 8, 0, 0, 8, 3, 3, 3, 8, 8, 8, 8, 3, 8, 0, 0], [0, 8, 3, 8, 8, 8, 8, 3, 8, 8, 0, 0, 8, 8, 3, 8, 3, 8, 3, 8, 8, 8, 0, 0], [0, 8, 8, 8, 3, 8, 3, 3, 3, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 0, 0], [0, 3, 8, 8, 8, 8, 8, 3, 8, 8, 0, 0, 8, 3, 8, 3, 8, 8, 3, 8, 8, 8, 0, 0], [0, 8, 8, 3, 8, 8, 8, 8, 3, 8, 0, 0, 8, 8, 8, 8, 8, 3, 3, 3, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 3, 8, 8, 8, 3, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 3, 8, 8, 8, 8, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 3, 3, 3, 8, 8, 3, 3, 3, 0, 8, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0], [0, 8, 8, 3, 8, 8, 8, 8, 3, 8, 0, 8, 8, 8, 3, 8, 8, 8, 8, 3, 3, 8, 0, 0], [0, 3, 8, 8, 8, 3, 8, 8, 8, 8, 0, 8, 8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 0, 0], [0, 8, 3, 8, 8, 8, 8, 3, 8, 3, 0, 8, 8, 8, 3, 8, 8, 8, 3, 8, 8, 3, 0, 0], [0, 3, 3, 3, 8, 8, 3, 3, 3, 8, 0, 3, 8, 8, 8, 8, 8, 3, 3, 3, 8, 8, 0, 0], [0, 8, 3, 8, 8, 8, 8, 3, 8, 8, 0, 8, 8, 3, 8, 3, 8, 8, 3, 8, 8, 8, 0, 0], [0, 8, 8, 8, 8, 3, 8, 8, 8, 8, 0, 8, 3, 3, 3, 8, 8, 8, 8, 8, 3, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 3, 8, 8, 8, 3, 3, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 8, 3, 8, 8, 8, 8, 3, 8], [8, 3, 3, 3, 8, 8, 3, 3, 3], [8, 8, 3, 8, 8, 8, 8, 3, 8], [3, 8, 8, 8, 3, 8, 8, 8, 8], [8, 3, 8, 8, 8, 8, 3, 8, 3], [3, 3, 3, 8, 8, 3, 3, 3, 8], [8, 3, 8, 8, 8, 8, 3, 8, 8], [8, 8, 8, 8, 3, 8, 8, 8, 8]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 3, 8, 8, 8, 3, 8, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 3, 3, 3, 8, 8, 8, 3, 3, 3, 0, 0, 8, 8, 8, 8, 8, 8, 3, 3, 8, 8], [0, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 0, 0, 3, 8, 8, 3, 8, 8, 8, 8, 8, 8], [0, 8, 3, 8, 8, 8, 3, 8, 3, 8, 8, 0, 0, 8, 8, 3, 3, 3, 8, 8, 8, 3, 8], [0, 8, 8, 8, 8, 3, 3, 3, 8, 8, 3, 0, 0, 8, 8, 8, 3, 8, 8, 8, 8, 8, 8], [0, 3, 3, 8, 8, 8, 3, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 0, 0, 8, 8, 8, 3, 8, 8, 3, 8, 8, 8], [0, 3, 8, 8, 3, 8, 8, 8, 3, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 8, 8, 8, 8, 8, 8, 3, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 0, 0, 3, 3, 8, 8, 3, 8, 8, 8, 3, 8, 0], [8, 8, 3, 8, 8, 3, 3, 3, 8, 8, 0, 0, 8, 8, 8, 3, 3, 3, 8, 8, 8, 3, 0], [8, 3, 3, 3, 8, 8, 3, 8, 3, 8, 0, 0, 3, 8, 8, 8, 3, 8, 8, 8, 8, 8, 0], [8, 8, 3, 8, 8, 8, 8, 3, 3, 3, 0, 0, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 0], [8, 8, 8, 8, 3, 8, 8, 8, 3, 8, 0, 0, 3, 3, 3, 8, 8, 8, 3, 3, 3, 8, 0], [8, 3, 8, 3, 3, 3, 8, 8, 8, 8, 0, 0, 8, 3, 8, 3, 8, 8, 8, 3, 8, 8, 0], [3, 3, 3, 8, 3, 8, 8, 8, 8, 3, 0, 0, 8, 8, 3, 3, 3, 8, 8, 8, 8, 8, 0], [8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 0, 0, 8, 8, 8, 3, 8, 8, 8, 3, 8, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[8, 8, 3, 8, 8, 8, 8, 3, 8], [8, 3, 3, 3, 8, 8, 3, 3, 3], [8, 8, 3, 8, 8, 8, 8, 3, 8], [8, 3, 8, 8, 8, 8, 3, 8, 8], [8, 8, 8, 8, 3, 8, 8, 8, 3], [3, 3, 8, 8, 8, 3, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 3, 8], [3, 8, 8, 3, 8, 8, 8, 3, 8], [8, 8, 3, 8, 8, 8, 8, 3, 8]]","[[8, 8, 3, 8, 8, 8, 8, 3, 8], [8, 3, 3, 3, 8, 8, 3, 3, 3], [8, 8, 3, 8, 8, 8, 8, 3, 8], [8, 3, 8, 8, 8, 8, 3, 8, 8], [8, 8, 8, 8, 3, 8, 8, 8, 3], [3, 3, 8, 8, 8, 3, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 3, 8], [3, 8, 8, 3, 8, 8, 8, 3, 8], [8, 8, 3, 8, 8, 8, 8, 3, 8]]","[[8, 8, 3, 8, 8, 8, 8, 3, 8], [8, 3, 3, 3, 8, 8, 3, 3, 3], [8, 8, 3, 8, 8, 8, 8, 3, 8], [8, 3, 8, 8, 8, 8, 3, 8, 8], [8, 8, 8, 8, 3, 8, 8, 8, 3], [3, 3, 8, 8, 8, 3, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 3, 8], [3, 8, 8, 3, 8, 8, 8, 3, 8], [8, 8, 3, 8, 8, 8, 8, 3, 8]]","[[3, 8, 8, 8, 8, 8, 3, 8, 8, 8], [8, 8, 3, 8, 8, 3, 3, 3, 8, 8], [8, 3, 3, 3, 8, 8, 3, 8, 3, 8], [8, 8, 3, 8, 8, 8, 8, 3, 3, 3], [8, 8, 8, 8, 3, 8, 8, 8, 3, 8], [8, 3, 8, 3, 3, 3, 8, 8, 8, 8], [3, 3, 3, 8, 3, 8, 8, 8, 8, 3], [8, 3, 8, 8, 8, 8, 8, 3, 8, 8]]",FALSE,
2c737e39,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 1, 3, 1, 0, 0, 0, 0, 0], [0, 4, 4, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 1, 3, 1, 0, 0, 0, 0, 0], [0, 4, 4, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 1, 3, 1, 0, 0], [0, 0, 0, 0, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 2, 2, 3, 3, 0, 0, 0, 0, 0], [0, 1, 0, 3, 3, 8, 8, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern in this problem is that the objects in the grid are moved down by a certain number of rows. In this case, the objects are moved down by 3 rows.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 3, 3, 0, 0], [0, 0, 0, 0, 1, 0, 3, 3, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 2, 2, 3, 3, 0, 0, 0, 0, 0], [0, 1, 0, 3, 3, 8, 8, 0, 0, 0]]",FALSE,
2f0c5170,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 3, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 4, 0, 0, 0, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 4, 4, 4, 0, 0, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 3, 4, 0, 0, 0, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 4, 4, 4, 0, 0, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 3, 4, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 2, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 4, 4, 2, 4, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
then this grids change to output grids below
[[0, 0, 4, 4, 0], [0, 4, 4, 2, 4], [0, 0, 4, 4, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 4, 4, 0, 4, 4, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 4, 2, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 4, 4, 4, 4, 4, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
then output grids?

=========","The output grids would be:

[[0, 4, 4, 0, 4, 4, 0], 
 [0, 0, 4, 2, 4, 0, 0], 
 [0, 4, 4, 4, 4, 4, 0], 
 [0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 2, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0]]

The pattern in this problem is to find the smallest rectangle that contains all the non-8 values and remove the 8's around it.","[[0, 4, 4, 0, 4, 4, 0], 
 [0, 0, 4, 2, 4, 0, 0], 
 [0, 4, 4, 4, 4, 4, 0], 
 [0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 2, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0]]","[[0, 4, 4, 0, 4, 4, 0], 
 [0, 0, 4, 2, 4, 0, 0], 
 [0, 4, 4, 4, 4, 4, 0], 
 [0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 2, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 4, 4, 0, 0, 0], [0, 0, 4, 2, 4, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 0, 0, 0]]",FALSE,
310f3251,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0], [0, 7]],
then this grids change to output grids below
[[2, 0, 2, 0, 2, 0], [0, 7, 0, 7, 0, 7], [2, 0, 2, 0, 2, 0], [0, 7, 0, 7, 0, 7], [2, 0, 2, 0, 2, 0], [0, 7, 0, 7, 0, 7]].

Example 2
If input grids are like that
[[0, 0, 0], [0, 0, 6], [6, 0, 0]],
then this grids change to output grids below
[[0, 2, 0, 0, 2, 0, 0, 2, 0], [0, 0, 6, 0, 0, 6, 0, 0, 6], [6, 0, 0, 6, 0, 0, 6, 0, 0], [0, 2, 0, 0, 2, 0, 0, 2, 0], [0, 0, 6, 0, 0, 6, 0, 0, 6], [6, 0, 0, 6, 0, 0, 6, 0, 0], [0, 2, 0, 0, 2, 0, 0, 2, 0], [0, 0, 6, 0, 0, 6, 0, 0, 6], [6, 0, 0, 6, 0, 0, 6, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 4, 0], [0, 0, 0, 0], [0, 0, 0, 0], [4, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that each cell in the input grid is replaced by a 3x3 grid in the output. The center cell of this 3x3 grid is the same as the original cell, and the other cells are 2 if the original cell was 0, and 0 if the original cell was not 0.

So, if the input grids are
[[0, 0, 4, 0], [0, 0, 0, 0], [0, 0, 0, 0], [4, 0, 0, 0]],
then the output grids would be
[[2, 0, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], 
 [0, 2, 0, 0, 2, 0, 4, 0, 4, 0, 2, 0], 
 [2, 0, 2, 2, 0, 2, 0, 4, 0, 2, 0, 2], 
 [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2], 
 [0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0], 
 [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2], 
 [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2], 
 [0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0], 
 [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2], 
 [0, 4, 0, 2, 0, 2, 2, 0, 2, 2, 0, 2], 
 [4, 0, 4, 0, 2, 0, 0, 2, 0, 0, 2, 0], 
 [0, 4, 0, 2, 0, 2, 2, 0, 2, 2, 0, 2]].","[[0, 0, 4, 0], [0, 0, 0, 0], [0, 0, 0, 0], [4, 0, 0, 0]],
then the output grids would be
[[2, 0, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], 
 [0, 2, 0, 0, 2, 0, 4, 0, 4, 0, 2, 0], 
 [2, 0, 2, 2, 0, 2, 0, 4, 0, 2, 0, 2], 
 [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2], 
 [0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0], 
 [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2], 
 [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2], 
 [0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0], 
 [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2], 
 [0, 4, 0, 2, 0, 2, 2, 0, 2, 2, 0, 2], 
 [4, 0, 4, 0, 2, 0, 0, 2, 0, 0, 2, 0], 
 [0, 4, 0, 2, 0, 2, 2, 0, 2, 2, 0, 2]]","[[2, 0, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], 
 [0, 2, 0, 0, 2, 0, 4, 0, 4, 0, 2, 0], 
 [2, 0, 2, 2, 0, 2, 0, 4, 0, 2, 0, 2], 
 [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2], 
 [0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0], 
 [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2], 
 [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2], 
 [0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0], 
 [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2], 
 [0, 4, 0, 2, 0, 2, 2, 0, 2, 2, 0, 2], 
 [4, 0, 4, 0, 2, 0, 0, 2, 0, 0, 2, 0], 
 [0, 4, 0, 2, 0, 2, 2, 0, 2, 2, 0, 2]]","[[0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [4, 2, 0, 0, 4, 2, 0, 0, 4, 2, 0, 0], [0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [4, 2, 0, 0, 4, 2, 0, 0, 4, 2, 0, 0], [0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0]]",FALSE,
3194b014,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[6, 6, 6, 7, 7, 7, 0, 0, 6, 0, 0, 6, 0, 0, 6, 6, 0, 0, 6, 6], [0, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 7, 0, 0, 6, 7, 6, 0, 7, 0], [6, 0, 0, 7, 6, 0, 0, 0, 0, 7, 0, 0, 6, 6, 0, 0, 0, 6, 7, 6], [7, 0, 7, 2, 2, 2, 2, 0, 7, 0, 7, 7, 0, 7, 0, 0, 6, 7, 0, 6], [0, 7, 0, 2, 2, 2, 2, 7, 6, 7, 0, 0, 6, 7, 6, 0, 7, 0, 6, 0], [7, 0, 0, 2, 2, 2, 2, 7, 0, 0, 0, 0, 6, 7, 0, 0, 0, 0, 0, 0], [6, 6, 6, 2, 2, 2, 2, 0, 7, 0, 0, 9, 9, 9, 7, 7, 0, 7, 7, 0], [7, 0, 0, 0, 7, 0, 0, 7, 6, 0, 6, 9, 9, 9, 7, 0, 6, 0, 0, 0], [7, 6, 0, 6, 6, 7, 0, 6, 0, 6, 7, 9, 9, 9, 6, 0, 0, 0, 0, 0], [0, 0, 7, 7, 6, 0, 7, 6, 6, 7, 6, 9, 9, 9, 0, 0, 0, 0, 0, 0], [0, 7, 7, 6, 0, 0, 0, 0, 7, 0, 6, 0, 6, 0, 0, 7, 0, 7, 0, 0], [0, 6, 7, 7, 0, 7, 7, 7, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 6, 6], [6, 7, 7, 0, 7, 6, 0, 6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 7], [7, 6, 6, 0, 6, 7, 0, 6, 0, 6, 7, 6, 0, 0, 6, 7, 0, 0, 7, 6], [6, 0, 0, 6, 0, 7, 4, 4, 4, 4, 4, 0, 0, 7, 6, 0, 6, 0, 0, 0], [7, 0, 7, 0, 0, 0, 4, 4, 4, 4, 4, 7, 0, 7, 6, 0, 0, 0, 0, 7], [6, 6, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 6, 0, 0], [6, 7, 6, 6, 6, 0, 4, 4, 4, 4, 4, 6, 7, 7, 6, 7, 0, 0, 0, 6], [7, 0, 0, 0, 6, 6, 4, 4, 4, 4, 4, 6, 0, 6, 0, 0, 0, 0, 6, 7], [0, 0, 7, 7, 6, 0, 0, 6, 7, 6, 6, 0, 6, 0, 6, 0, 7, 7, 0, 0]],
then this grids change to output grids below
[[4, 4, 4], [4, 4, 4], [4, 4, 4]].

Example 2
If input grids are like that
[[8, 8, 8, 8, 8, 0, 1, 0, 1, 1, 8, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 8, 1, 1, 0, 0, 0, 8, 0, 5, 5, 5, 5, 5, 8, 1], [0, 0, 0, 0, 0, 8, 1, 0, 0, 8, 1, 1, 1, 5, 5, 5, 5, 5, 8, 0], [1, 8, 0, 1, 8, 0, 0, 8, 8, 8, 8, 1, 8, 5, 5, 5, 5, 5, 1, 0], [0, 8, 0, 9, 9, 9, 9, 8, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 8, 0], [8, 1, 8, 9, 9, 9, 9, 8, 1, 1, 0, 1, 1, 0, 8, 0, 8, 8, 0, 8], [0, 0, 0, 9, 9, 9, 9, 0, 1, 1, 8, 8, 3, 3, 8, 1, 1, 0, 0, 1], [8, 1, 1, 8, 1, 8, 0, 1, 0, 0, 0, 3, 3, 3, 1, 0, 8, 1, 8, 8], [0, 1, 8, 8, 1, 1, 0, 8, 8, 3, 3, 3, 3, 3, 8, 0, 0, 8, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 8, 3, 3, 3, 3, 3, 1, 1, 8, 8, 1, 0], [8, 0, 8, 0, 8, 0, 0, 0, 0, 3, 3, 3, 3, 3, 1, 1, 1, 0, 8, 8], [0, 0, 0, 0, 8, 1, 1, 1, 1, 3, 3, 3, 3, 3, 1, 1, 0, 1, 8, 1], [0, 8, 8, 0, 8, 8, 1, 8, 0, 3, 3, 3, 8, 1, 1, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 8, 0, 1, 0, 0, 1, 0, 0, 0, 8, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 8, 8, 1, 0, 0, 8, 0, 1, 0, 1, 1, 0, 0], [0, 4, 4, 4, 4, 4, 8, 4, 0, 0, 0, 1, 0, 8, 0, 8, 0, 1, 8, 0], [1, 4, 4, 4, 4, 4, 4, 4, 0, 1, 1, 0, 8, 0, 0, 0, 0, 8, 1, 8], [1, 4, 4, 4, 4, 4, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 8], [0, 1, 0, 0, 0, 1, 8, 1, 0, 8, 0, 1, 0, 0, 8, 0, 0, 8, 1, 0], [8, 0, 1, 0, 0, 1, 0, 8, 0, 1, 1, 0, 1, 8, 0, 8, 0, 0, 1, 0]],
then this grids change to output grids below
[[3, 3, 3], [3, 3, 3], [3, 3, 3]].

Quiz
If input grids are like that
[[0, 9, 9, 7, 0, 0, 9, 7, 7, 7, 0, 7, 0, 0, 7, 0, 9, 0, 0, 0], [0, 0, 7, 3, 3, 3, 3, 0, 7, 7, 0, 0, 0, 0, 6, 6, 6, 6, 0, 9], [0, 7, 9, 3, 3, 3, 3, 3, 3, 0, 9, 9, 7, 0, 6, 6, 6, 6, 0, 7], [0, 9, 0, 3, 3, 3, 3, 3, 3, 3, 7, 0, 7, 6, 6, 6, 6, 6, 0, 0], [9, 0, 0, 7, 0, 9, 7, 7, 0, 7, 7, 0, 0, 0, 9, 6, 6, 6, 7, 7], [0, 0, 9, 7, 0, 9, 9, 0, 0, 7, 0, 0, 9, 0, 0, 6, 6, 6, 0, 7], [0, 9, 0, 9, 0, 0, 7, 0, 0, 9, 0, 0, 0, 0, 0, 9, 9, 0, 0, 0], [0, 9, 0, 0, 9, 7, 0, 0, 0, 9, 7, 0, 9, 9, 0, 7, 0, 0, 0, 0], [0, 7, 8, 8, 8, 8, 9, 9, 0, 7, 0, 0, 9, 7, 7, 0, 0, 9, 7, 7], [9, 0, 9, 8, 8, 8, 7, 7, 0, 7, 0, 0, 9, 0, 0, 9, 0, 7, 0, 0], [0, 0, 9, 8, 8, 8, 0, 9, 0, 9, 0, 0, 7, 5, 5, 0, 0, 9, 0, 9], [0, 0, 9, 8, 8, 8, 9, 0, 0, 0, 0, 9, 5, 5, 5, 7, 0, 0, 0, 9], [9, 0, 0, 8, 8, 8, 0, 7, 9, 9, 7, 0, 5, 5, 5, 5, 0, 0, 0, 7], [9, 9, 9, 7, 9, 8, 8, 0, 9, 7, 0, 5, 5, 5, 5, 5, 9, 0, 7, 0], [0, 0, 7, 7, 0, 7, 8, 0, 0, 0, 7, 5, 5, 5, 5, 5, 5, 9, 0, 9], [9, 7, 7, 0, 9, 0, 7, 9, 7, 0, 9, 5, 5, 5, 5, 5, 5, 0, 0, 9], [0, 7, 7, 0, 0, 7, 9, 0, 7, 0, 9, 7, 5, 5, 5, 5, 5, 9, 7, 9], [0, 0, 7, 7, 7, 0, 0, 9, 0, 9, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 7, 9, 0, 0, 0, 9, 9, 5, 5, 5, 0, 9, 0, 9, 0], [0, 0, 9, 0, 7, 0, 0, 9, 7, 0, 0, 7, 0, 0, 7, 9, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be
[[5, 5, 5], [5, 5, 5], [5, 5, 5]].

The pattern in this problem is that the output grid is always a 3x3 grid filled with the number that is in the center of the largest square in the input grid. In this case, the largest square is the one filled with the number 5.","[[5, 5, 5], [5, 5, 5], [5, 5, 5]]","[[5, 5, 5], [5, 5, 5], [5, 5, 5]]","[[5, 5, 5], [5, 5, 5], [5, 5, 5]]",TRUE,TRUE
319f2597,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[7, 8, 4, 8, 8, 3, 5, 6, 2, 3, 7, 5, 6, 9, 7, 7, 9, 6, 3, 1], [5, 5, 8, 4, 5, 8, 3, 1, 7, 9, 2, 2, 9, 5, 9, 3, 9, 6, 4, 9], [1, 6, 6, 6, 5, 7, 2, 4, 4, 5, 1, 1, 5, 3, 5, 5, 9, 7, 6, 6], [6, 3, 8, 6, 5, 8, 4, 4, 5, 4, 3, 5, 8, 2, 1, 5, 6, 2, 1, 7], [3, 5, 4, 1, 5, 9, 3, 4, 6, 5, 5, 2, 4, 8, 2, 3, 9, 7, 1, 3], [2, 8, 9, 4, 7, 9, 8, 8, 1, 8, 1, 3, 7, 4, 7, 1, 2, 6, 5, 6], [3, 3, 6, 5, 2, 7, 4, 8, 0, 0, 2, 6, 5, 4, 5, 1, 8, 7, 9, 8], [2, 6, 3, 3, 5, 5, 7, 8, 0, 0, 5, 9, 9, 5, 4, 9, 9, 4, 6, 1], [2, 3, 4, 5, 9, 1, 1, 7, 3, 8, 7, 3, 3, 9, 6, 8, 7, 4, 3, 3], [9, 4, 2, 7, 2, 9, 5, 7, 8, 8, 3, 1, 2, 4, 8, 6, 8, 3, 9, 6], [1, 1, 9, 7, 3, 6, 4, 3, 3, 2, 5, 3, 9, 5, 1, 1, 9, 7, 5, 3], [7, 8, 8, 3, 6, 9, 7, 6, 9, 9, 3, 4, 1, 7, 6, 3, 6, 2, 1, 4], [3, 5, 7, 4, 3, 3, 4, 5, 7, 2, 9, 2, 5, 3, 4, 5, 6, 9, 9, 6], [4, 2, 5, 5, 7, 1, 4, 7, 9, 9, 9, 5, 2, 3, 2, 8, 5, 9, 7, 7], [8, 5, 7, 5, 8, 1, 2, 4, 4, 3, 1, 9, 9, 9, 9, 8, 1, 5, 1, 7], [5, 4, 5, 1, 8, 2, 6, 4, 4, 5, 2, 5, 8, 8, 8, 2, 4, 6, 5, 7], [4, 5, 7, 7, 9, 5, 5, 7, 2, 2, 2, 4, 3, 4, 7, 3, 8, 2, 8, 1], [9, 5, 9, 6, 8, 1, 6, 2, 1, 9, 4, 8, 8, 7, 5, 1, 3, 1, 6, 4], [7, 7, 1, 6, 6, 7, 3, 4, 7, 5, 8, 4, 8, 4, 4, 3, 5, 6, 4, 2], [4, 3, 7, 8, 3, 4, 5, 5, 8, 4, 7, 9, 4, 9, 4, 9, 3, 9, 8, 7]],
then this grids change to output grids below
[[7, 8, 4, 8, 8, 3, 5, 6, 2, 0, 7, 5, 6, 9, 7, 7, 9, 6, 3, 1], [5, 5, 8, 4, 5, 8, 3, 1, 0, 0, 2, 2, 9, 5, 9, 3, 9, 6, 4, 9], [1, 6, 6, 6, 5, 7, 2, 4, 0, 0, 1, 1, 5, 3, 5, 5, 9, 7, 6, 6], [6, 3, 8, 6, 5, 8, 4, 4, 0, 0, 3, 5, 8, 2, 1, 5, 6, 2, 1, 7], [3, 5, 4, 1, 5, 9, 3, 4, 0, 0, 5, 2, 4, 8, 2, 3, 9, 7, 1, 3], [2, 8, 9, 4, 7, 9, 8, 8, 0, 0, 1, 3, 7, 4, 7, 1, 2, 6, 5, 6], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 4, 5, 9, 1, 1, 7, 0, 0, 7, 3, 3, 9, 6, 8, 7, 4, 3, 3], [9, 4, 2, 7, 2, 9, 5, 7, 0, 0, 3, 1, 2, 4, 8, 6, 8, 3, 9, 6], [1, 1, 9, 7, 3, 6, 4, 3, 0, 2, 5, 3, 9, 5, 1, 1, 9, 7, 5, 3], [7, 8, 8, 3, 6, 9, 7, 6, 0, 0, 3, 4, 1, 7, 6, 3, 6, 2, 1, 4], [3, 5, 7, 4, 3, 3, 4, 5, 0, 2, 9, 2, 5, 3, 4, 5, 6, 9, 9, 6], [4, 2, 5, 5, 7, 1, 4, 7, 0, 0, 9, 5, 2, 3, 2, 8, 5, 9, 7, 7], [8, 5, 7, 5, 8, 1, 2, 4, 0, 0, 1, 9, 9, 9, 9, 8, 1, 5, 1, 7], [5, 4, 5, 1, 8, 2, 6, 4, 0, 0, 2, 5, 8, 8, 8, 2, 4, 6, 5, 7], [4, 5, 7, 7, 9, 5, 5, 7, 2, 2, 2, 4, 3, 4, 7, 3, 8, 2, 8, 1], [9, 5, 9, 6, 8, 1, 6, 2, 0, 0, 4, 8, 8, 7, 5, 1, 3, 1, 6, 4], [7, 7, 1, 6, 6, 7, 3, 4, 0, 0, 8, 4, 8, 4, 4, 3, 5, 6, 4, 2], [4, 3, 7, 8, 3, 4, 5, 5, 0, 0, 7, 9, 4, 9, 4, 9, 3, 9, 8, 7]].

Example 2
If input grids are like that
[[5, 2, 5, 2, 5, 4, 3, 8, 2, 7, 3, 7, 5, 6, 2, 1, 9, 3, 2, 1], [1, 2, 3, 6, 5, 2, 2, 5, 8, 9, 8, 5, 8, 7, 9, 2, 6, 5, 5, 5], [3, 1, 9, 7, 9, 8, 8, 7, 1, 9, 7, 3, 9, 7, 5, 9, 8, 4, 9, 8], [5, 7, 7, 8, 3, 4, 4, 4, 4, 6, 2, 9, 4, 3, 6, 8, 4, 6, 7, 1], [6, 3, 8, 3, 5, 9, 7, 5, 4, 6, 1, 9, 3, 9, 7, 7, 6, 7, 8, 1], [6, 2, 4, 9, 8, 3, 9, 1, 4, 8, 9, 9, 6, 5, 9, 1, 9, 7, 5, 7], [6, 2, 8, 3, 4, 6, 4, 8, 9, 3, 9, 3, 6, 9, 2, 2, 9, 1, 9, 3], [2, 4, 7, 7, 8, 1, 4, 7, 6, 2, 8, 9, 8, 8, 7, 4, 8, 4, 9, 1], [2, 1, 5, 9, 2, 6, 8, 3, 6, 4, 5, 8, 6, 3, 1, 4, 5, 1, 5, 1], [9, 4, 9, 5, 1, 2, 8, 2, 1, 4, 2, 9, 9, 6, 1, 9, 9, 7, 2, 1], [6, 6, 2, 3, 7, 3, 7, 5, 4, 3, 2, 4, 4, 7, 7, 7, 6, 7, 6, 7], [2, 4, 3, 1, 4, 8, 0, 0, 9, 6, 3, 2, 4, 4, 8, 7, 2, 9, 4, 2], [3, 5, 7, 8, 2, 4, 0, 0, 1, 6, 4, 7, 4, 7, 2, 3, 9, 4, 5, 2], [8, 1, 4, 3, 9, 6, 9, 9, 8, 5, 4, 3, 5, 2, 6, 8, 9, 9, 4, 8], [1, 2, 6, 9, 8, 9, 1, 4, 3, 3, 6, 2, 3, 7, 3, 1, 8, 1, 4, 5], [3, 8, 4, 4, 4, 9, 6, 1, 6, 7, 9, 4, 2, 6, 2, 9, 3, 1, 5, 1], [2, 7, 5, 8, 8, 8, 6, 3, 4, 6, 3, 7, 9, 2, 1, 1, 7, 2, 5, 9], [2, 1, 7, 2, 1, 3, 5, 5, 3, 6, 2, 8, 3, 6, 9, 5, 5, 9, 8, 4], [3, 3, 3, 6, 6, 3, 6, 5, 9, 4, 7, 2, 4, 4, 7, 7, 6, 1, 2, 9], [2, 5, 8, 9, 7, 9, 7, 2, 3, 2, 2, 6, 6, 7, 9, 8, 9, 1, 1, 6]],
then this grids change to output grids below
[[5, 2, 5, 2, 5, 4, 0, 0, 2, 7, 3, 7, 5, 6, 2, 1, 9, 3, 2, 1], [1, 2, 3, 6, 5, 2, 2, 0, 8, 9, 8, 5, 8, 7, 9, 2, 6, 5, 5, 5], [3, 1, 9, 7, 9, 8, 0, 0, 1, 9, 7, 3, 9, 7, 5, 9, 8, 4, 9, 8], [5, 7, 7, 8, 3, 4, 0, 0, 4, 6, 2, 9, 4, 3, 6, 8, 4, 6, 7, 1], [6, 3, 8, 3, 5, 9, 0, 0, 4, 6, 1, 9, 3, 9, 7, 7, 6, 7, 8, 1], [6, 2, 4, 9, 8, 3, 0, 0, 4, 8, 9, 9, 6, 5, 9, 1, 9, 7, 5, 7], [6, 2, 8, 3, 4, 6, 0, 0, 9, 3, 9, 3, 6, 9, 2, 2, 9, 1, 9, 3], [2, 4, 7, 7, 8, 1, 0, 0, 6, 2, 8, 9, 8, 8, 7, 4, 8, 4, 9, 1], [2, 1, 5, 9, 2, 6, 0, 0, 6, 4, 5, 8, 6, 3, 1, 4, 5, 1, 5, 1], [9, 4, 9, 5, 1, 2, 0, 2, 1, 4, 2, 9, 9, 6, 1, 9, 9, 7, 2, 1], [6, 6, 2, 3, 7, 3, 0, 0, 4, 3, 2, 4, 4, 7, 7, 7, 6, 7, 6, 7], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [8, 1, 4, 3, 9, 6, 0, 0, 8, 5, 4, 3, 5, 2, 6, 8, 9, 9, 4, 8], [1, 2, 6, 9, 8, 9, 0, 0, 3, 3, 6, 2, 3, 7, 3, 1, 8, 1, 4, 5], [3, 8, 4, 4, 4, 9, 0, 0, 6, 7, 9, 4, 2, 6, 2, 9, 3, 1, 5, 1], [2, 7, 5, 8, 8, 8, 0, 0, 4, 6, 3, 7, 9, 2, 1, 1, 7, 2, 5, 9], [2, 1, 7, 2, 1, 3, 0, 0, 3, 6, 2, 8, 3, 6, 9, 5, 5, 9, 8, 4], [3, 3, 3, 6, 6, 3, 0, 0, 9, 4, 7, 2, 4, 4, 7, 7, 6, 1, 2, 9], [2, 5, 8, 9, 7, 9, 0, 2, 3, 2, 2, 6, 6, 7, 9, 8, 9, 1, 1, 6]].

Quiz
If input grids are like that
[[4, 5, 7, 5, 9, 2, 3, 1, 7, 8, 6, 9, 4, 2, 4, 2, 5, 1, 2, 7], [9, 1, 7, 5, 5, 1, 2, 7, 1, 9, 1, 7, 4, 8, 4, 7, 2, 9, 5, 8], [9, 1, 8, 6, 9, 4, 7, 6, 9, 5, 5, 5, 8, 1, 4, 8, 4, 7, 8, 5], [4, 2, 9, 5, 5, 2, 8, 2, 7, 7, 9, 6, 1, 4, 9, 8, 3, 3, 9, 2], [1, 9, 2, 3, 8, 4, 3, 1, 1, 3, 4, 6, 3, 5, 1, 1, 2, 6, 4, 6], [1, 4, 3, 5, 6, 1, 1, 1, 1, 6, 7, 3, 9, 5, 8, 3, 5, 6, 2, 9], [7, 7, 1, 9, 2, 4, 6, 9, 1, 5, 5, 8, 5, 2, 2, 2, 4, 2, 1, 2], [2, 9, 6, 1, 2, 9, 4, 8, 2, 7, 8, 2, 5, 7, 3, 2, 2, 4, 7, 7], [4, 2, 6, 6, 8, 9, 2, 1, 3, 2, 4, 5, 8, 3, 7, 4, 8, 5, 2, 1], [3, 2, 4, 8, 9, 8, 9, 5, 2, 1, 6, 8, 1, 2, 5, 7, 9, 1, 8, 5], [1, 3, 7, 2, 7, 3, 5, 2, 3, 9, 3, 2, 7, 2, 1, 7, 9, 8, 5, 7], [1, 6, 4, 6, 6, 5, 5, 9, 2, 3, 2, 4, 6, 7, 3, 9, 9, 9, 6, 6], [8, 6, 5, 2, 2, 3, 2, 1, 4, 9, 6, 9, 4, 9, 7, 7, 1, 5, 9, 3], [3, 7, 7, 5, 9, 8, 7, 4, 2, 2, 9, 5, 0, 0, 8, 6, 7, 6, 6, 7], [6, 9, 5, 6, 3, 7, 5, 7, 9, 8, 9, 5, 0, 0, 4, 2, 3, 3, 2, 6], [2, 8, 5, 3, 5, 6, 7, 1, 4, 7, 4, 4, 9, 5, 1, 3, 4, 4, 4, 7], [7, 8, 4, 7, 9, 5, 7, 8, 7, 4, 6, 8, 5, 3, 3, 1, 4, 1, 9, 7], [4, 5, 9, 9, 4, 5, 5, 7, 9, 8, 5, 8, 8, 6, 2, 8, 3, 7, 2, 4], [1, 6, 1, 4, 3, 6, 5, 4, 1, 7, 4, 7, 8, 6, 5, 9, 5, 4, 9, 9], [2, 9, 2, 6, 7, 8, 9, 9, 6, 4, 5, 8, 7, 5, 4, 3, 6, 3, 9, 5]],
then output grids?

=========","The output grids would be:

[[4, 5, 7, 5, 9, 2, 0, 0, 7, 8, 6, 9, 4, 2, 4, 2, 5, 1, 2, 7], [9, 1, 7, 5, 5, 1, 0, 0, 1, 9, 1, 7, 4, 8, 4, 7, 2, 9, 5, 8], [9, 1, 8, 6, 9, 4, 0, 0, 9, 5, 5, 5, 8, 1, 4, 8, 4, 7, 8, 5], [4, 2, 9, 5, 5, 2, 0, 0, 7, 7, 9, 6, 1, 4, 9, 8, 3, 3, 9, 2], [1, 9, 2, 3, 8, 4, 0, 0, 1, 3, 4, 6, 3, 5, 1, 1, 2, 6, 4, 6], [1, 4, 3, 5, 6, 1, 0, 0, 1, 6, 7, 3, 9, 5, 8, 3, 5, 6, 2, 9], [7, 7, 1, 9, 2, 4, 0, 0, 1, 5, 5, 8, 5, 2, 2, 2, 4, 2, 1, 2], [2, 9, 6, 1, 2, 9, 0, 0, 2, 7, 8, 2, 5, 7, 3, 2, 2, 4, 7, 7], [4, 2, 6, 6, 8, 9, 0, 0, 3, 2, 4, 5, 8, 3, 7, 4, 8, 5, 2, 1], [3, 2, 4, 8, 9, 8, 0, 0, 2, 1, 6, 8, 1, 2, 5, 7, 9, 1, 8, 5], [1, 3, 7, 2, 7, 3, 0, 0, 3, 9, 3, 2, 7, 2, 1, 7, 9, 8, 5, 7], [1, 6, 4, 6, 6, 5, 0, 0, 2, 3, 2, 4, 6, 7, 3, 9, 9, 9, 6, 6], [8, 6, 5, 2, 2, 3, 0, 0, 4, 9, 6, 9, 4, 9, 7, 7, 1, 5, 9, 3], [3, 7, 7, 5, 9, 8, 0, 0, 2, 2, 9, 5, 8, 6, 7, 6, 6, 7, 2, 1], [6, 9, 5, 6, 3, 7, 0, 0, 9, 8, 9, 5, 4, 2, 3, 1, 4, 4, 4, 7], [2, 8, 5, 3, 5, 6, 0, 0, 4, 7, 4, 4, 9, 5, 1, 3, 4, 4, 4, 7], [7, 8, 4, 7, 9, 5, 0, 0, 7, 4, 6, 8, 5, 3, 3, 1, 4, 1, 9, 7], [4, 5, 9, 9, 4, 5, 0, 0, 9, 8, 5, 8, 8, 6, 2, 8, 3, 7, 2, 4], [1, 6, 1, 4, 3, 6, 0, 0, 1, 7, 4, 7, 8, 6, 5, 9, 5, 4, 9, 9], [2, 9, 2, 6, 7, 8, 0, 0, 6, 4, 5, 8, 7, 5, 4, 3, 6, 3, 9, 5]].

The pattern here is that the 7th and 8th columns of the input grid are replaced with 0s in the output grid.","[[4, 5, 7, 5, 9, 2, 0, 0, 7, 8, 6, 9, 4, 2, 4, 2, 5, 1, 2, 7], [9, 1, 7, 5, 5, 1, 0, 0, 1, 9, 1, 7, 4, 8, 4, 7, 2, 9, 5, 8], [9, 1, 8, 6, 9, 4, 0, 0, 9, 5, 5, 5, 8, 1, 4, 8, 4, 7, 8, 5], [4, 2, 9, 5, 5, 2, 0, 0, 7, 7, 9, 6, 1, 4, 9, 8, 3, 3, 9, 2], [1, 9, 2, 3, 8, 4, 0, 0, 1, 3, 4, 6, 3, 5, 1, 1, 2, 6, 4, 6], [1, 4, 3, 5, 6, 1, 0, 0, 1, 6, 7, 3, 9, 5, 8, 3, 5, 6, 2, 9], [7, 7, 1, 9, 2, 4, 0, 0, 1, 5, 5, 8, 5, 2, 2, 2, 4, 2, 1, 2], [2, 9, 6, 1, 2, 9, 0, 0, 2, 7, 8, 2, 5, 7, 3, 2, 2, 4, 7, 7], [4, 2, 6, 6, 8, 9, 0, 0, 3, 2, 4, 5, 8, 3, 7, 4, 8, 5, 2, 1], [3, 2, 4, 8, 9, 8, 0, 0, 2, 1, 6, 8, 1, 2, 5, 7, 9, 1, 8, 5], [1, 3, 7, 2, 7, 3, 0, 0, 3, 9, 3, 2, 7, 2, 1, 7, 9, 8, 5, 7], [1, 6, 4, 6, 6, 5, 0, 0, 2, 3, 2, 4, 6, 7, 3, 9, 9, 9, 6, 6], [8, 6, 5, 2, 2, 3, 0, 0, 4, 9, 6, 9, 4, 9, 7, 7, 1, 5, 9, 3], [3, 7, 7, 5, 9, 8, 0, 0, 2, 2, 9, 5, 8, 6, 7, 6, 6, 7, 2, 1], [6, 9, 5, 6, 3, 7, 0, 0, 9, 8, 9, 5, 4, 2, 3, 1, 4, 4, 4, 7], [2, 8, 5, 3, 5, 6, 0, 0, 4, 7, 4, 4, 9, 5, 1, 3, 4, 4, 4, 7], [7, 8, 4, 7, 9, 5, 0, 0, 7, 4, 6, 8, 5, 3, 3, 1, 4, 1, 9, 7], [4, 5, 9, 9, 4, 5, 0, 0, 9, 8, 5, 8, 8, 6, 2, 8, 3, 7, 2, 4], [1, 6, 1, 4, 3, 6, 0, 0, 1, 7, 4, 7, 8, 6, 5, 9, 5, 4, 9, 9], [2, 9, 2, 6, 7, 8, 0, 0, 6, 4, 5, 8, 7, 5, 4, 3, 6, 3, 9, 5]]","[[4, 5, 7, 5, 9, 2, 0, 0, 7, 8, 6, 9, 4, 2, 4, 2, 5, 1, 2, 7], [9, 1, 7, 5, 5, 1, 0, 0, 1, 9, 1, 7, 4, 8, 4, 7, 2, 9, 5, 8], [9, 1, 8, 6, 9, 4, 0, 0, 9, 5, 5, 5, 8, 1, 4, 8, 4, 7, 8, 5], [4, 2, 9, 5, 5, 2, 0, 0, 7, 7, 9, 6, 1, 4, 9, 8, 3, 3, 9, 2], [1, 9, 2, 3, 8, 4, 0, 0, 1, 3, 4, 6, 3, 5, 1, 1, 2, 6, 4, 6], [1, 4, 3, 5, 6, 1, 0, 0, 1, 6, 7, 3, 9, 5, 8, 3, 5, 6, 2, 9], [7, 7, 1, 9, 2, 4, 0, 0, 1, 5, 5, 8, 5, 2, 2, 2, 4, 2, 1, 2], [2, 9, 6, 1, 2, 9, 0, 0, 2, 7, 8, 2, 5, 7, 3, 2, 2, 4, 7, 7], [4, 2, 6, 6, 8, 9, 0, 0, 3, 2, 4, 5, 8, 3, 7, 4, 8, 5, 2, 1], [3, 2, 4, 8, 9, 8, 0, 0, 2, 1, 6, 8, 1, 2, 5, 7, 9, 1, 8, 5], [1, 3, 7, 2, 7, 3, 0, 0, 3, 9, 3, 2, 7, 2, 1, 7, 9, 8, 5, 7], [1, 6, 4, 6, 6, 5, 0, 0, 2, 3, 2, 4, 6, 7, 3, 9, 9, 9, 6, 6], [8, 6, 5, 2, 2, 3, 0, 0, 4, 9, 6, 9, 4, 9, 7, 7, 1, 5, 9, 3], [3, 7, 7, 5, 9, 8, 0, 0, 2, 2, 9, 5, 8, 6, 7, 6, 6, 7, 2, 1], [6, 9, 5, 6, 3, 7, 0, 0, 9, 8, 9, 5, 4, 2, 3, 1, 4, 4, 4, 7], [2, 8, 5, 3, 5, 6, 0, 0, 4, 7, 4, 4, 9, 5, 1, 3, 4, 4, 4, 7], [7, 8, 4, 7, 9, 5, 0, 0, 7, 4, 6, 8, 5, 3, 3, 1, 4, 1, 9, 7], [4, 5, 9, 9, 4, 5, 0, 0, 9, 8, 5, 8, 8, 6, 2, 8, 3, 7, 2, 4], [1, 6, 1, 4, 3, 6, 0, 0, 1, 7, 4, 7, 8, 6, 5, 9, 5, 4, 9, 9], [2, 9, 2, 6, 7, 8, 0, 0, 6, 4, 5, 8, 7, 5, 4, 3, 6, 3, 9, 5]]","[[4, 5, 7, 5, 9, 2, 3, 1, 7, 8, 6, 9, 0, 2, 4, 2, 5, 1, 2, 7], [9, 1, 7, 5, 5, 1, 2, 7, 1, 9, 1, 7, 0, 0, 4, 7, 2, 9, 5, 8], [9, 1, 8, 6, 9, 4, 7, 6, 9, 5, 5, 5, 0, 0, 4, 8, 4, 7, 8, 5], [4, 2, 9, 5, 5, 2, 8, 2, 7, 7, 9, 6, 0, 0, 9, 8, 3, 3, 9, 2], [1, 9, 2, 3, 8, 4, 3, 1, 1, 3, 4, 6, 0, 0, 1, 1, 2, 6, 4, 6], [1, 4, 3, 5, 6, 1, 1, 1, 1, 6, 7, 3, 0, 0, 8, 3, 5, 6, 2, 9], [7, 7, 1, 9, 2, 4, 6, 9, 1, 5, 5, 8, 0, 2, 2, 2, 4, 2, 1, 2], [2, 9, 6, 1, 2, 9, 4, 8, 2, 7, 8, 2, 0, 0, 3, 2, 2, 4, 7, 7], [4, 2, 6, 6, 8, 9, 2, 1, 3, 2, 4, 5, 0, 0, 7, 4, 8, 5, 2, 1], [3, 2, 4, 8, 9, 8, 9, 5, 2, 1, 6, 8, 0, 2, 5, 7, 9, 1, 8, 5], [1, 3, 7, 2, 7, 3, 5, 2, 3, 9, 3, 2, 0, 2, 1, 7, 9, 8, 5, 7], [1, 6, 4, 6, 6, 5, 5, 9, 2, 3, 2, 4, 0, 0, 3, 9, 9, 9, 6, 6], [8, 6, 5, 2, 2, 3, 2, 1, 4, 9, 6, 9, 0, 0, 7, 7, 1, 5, 9, 3], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0], [2, 8, 5, 3, 5, 6, 7, 1, 4, 7, 4, 4, 0, 0, 1, 3, 4, 4, 4, 7], [7, 8, 4, 7, 9, 5, 7, 8, 7, 4, 6, 8, 0, 0, 3, 1, 4, 1, 9, 7], [4, 5, 9, 9, 4, 5, 5, 7, 9, 8, 5, 8, 0, 0, 2, 8, 3, 7, 2, 4], [1, 6, 1, 4, 3, 6, 5, 4, 1, 7, 4, 7, 0, 0, 5, 9, 5, 4, 9, 9], [2, 9, 2, 6, 7, 8, 9, 9, 6, 4, 5, 8, 0, 0, 4, 3, 6, 3, 9, 5]]",FALSE,
31adaf00,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[5, 5, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 5, 5, 0, 0, 0, 0, 5, 5], [5, 5, 0, 5, 0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 5, 5, 5, 5, 0, 5], [0, 5, 0, 5, 0, 5, 5, 0, 5, 0], [5, 0, 0, 0, 0, 5, 0, 0, 5, 5], [5, 5, 5, 0, 5, 0, 0, 0, 0, 5], [0, 5, 0, 0, 0, 0, 5, 5, 5, 0], [5, 0, 0, 0, 0, 5, 0, 0, 5, 5], [5, 0, 0, 0, 0, 0, 5, 5, 0, 0]],
then this grids change to output grids below
[[5, 5, 0, 0, 1, 1, 1, 5, 0, 0], [0, 0, 5, 5, 1, 1, 1, 0, 5, 5], [5, 5, 0, 5, 1, 1, 1, 0, 5, 0], [0, 0, 0, 0, 5, 5, 5, 5, 0, 5], [0, 5, 0, 5, 0, 5, 5, 0, 5, 0], [5, 0, 0, 0, 0, 5, 1, 1, 5, 5], [5, 5, 5, 0, 5, 0, 1, 1, 0, 5], [0, 5, 1, 1, 1, 0, 5, 5, 5, 0], [5, 0, 1, 1, 1, 5, 0, 0, 5, 5], [5, 0, 1, 1, 1, 0, 5, 5, 0, 0]].

Example 2
If input grids are like that
[[0, 5, 0, 0, 5, 0, 0, 0, 0, 0], [5, 5, 0, 0, 0, 5, 5, 0, 5, 0], [0, 0, 0, 5, 5, 0, 0, 5, 5, 5], [0, 0, 5, 0, 5, 5, 0, 0, 5, 0], [0, 5, 0, 0, 0, 0, 0, 0, 5, 0], [5, 0, 5, 0, 0, 5, 5, 5, 0, 5], [0, 0, 0, 5, 0, 5, 5, 0, 5, 0], [0, 0, 5, 0, 5, 5, 5, 0, 0, 0], [5, 0, 5, 5, 0, 5, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0]],
then this grids change to output grids below
[[0, 5, 1, 1, 5, 0, 0, 0, 0, 0], [5, 5, 1, 1, 0, 5, 5, 0, 5, 0], [1, 1, 0, 5, 5, 0, 0, 5, 5, 5], [1, 1, 5, 0, 5, 5, 1, 1, 5, 0], [0, 5, 0, 1, 1, 0, 1, 1, 5, 0], [5, 0, 5, 1, 1, 5, 5, 5, 0, 5], [1, 1, 0, 5, 0, 5, 5, 0, 5, 0], [1, 1, 5, 0, 5, 5, 5, 0, 0, 0], [5, 0, 5, 5, 0, 5, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0]].

Quiz
If input grids are like that
[[5, 0, 0, 0, 5, 0, 5, 0, 5, 0], [5, 0, 0, 5, 0, 5, 5, 0, 0, 0], [5, 5, 0, 5, 5, 0, 0, 5, 5, 0], [5, 0, 0, 0, 0, 0, 0, 5, 0, 0], [5, 0, 0, 0, 5, 5, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 5, 5, 0, 0], [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], [5, 0, 5, 0, 5, 0, 5, 0, 0, 5], [0, 5, 5, 0, 5, 0, 0, 5, 5, 5], [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that a 1 is placed in the center of each 5x5 sub-grid in the input grid. If the sub-grid is not entirely filled with 5s, then the 1 is placed in the center of the largest square of 5s that fits within the sub-grid. 

Applying this pattern to the quiz input, the output grid would be:

[[5, 0, 0, 0, 5, 0, 5, 0, 5, 0], 
 [5, 0, 0, 5, 0, 5, 5, 0, 0, 0], 
 [5, 5, 0, 5, 5, 0, 0, 5, 5, 0], 
 [5, 0, 0, 0, 0, 0, 0, 5, 0, 0], 
 [5, 0, 0, 0, 5, 5, 0, 0, 0, 5], 
 [0, 0, 0, 0, 0, 0, 5, 5, 0, 0], 
 [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], 
 [5, 0, 5, 0, 5, 0, 5, 0, 0, 5], 
 [0, 5, 5, 0, 5, 0, 0, 5, 5, 5], 
 [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]] 

changes to 

[[5, 0, 0, 0, 5, 0, 5, 0, 5, 0], 
 [5, 0, 1, 5, 0, 5, 5, 0, 0, 0], 
 [5, 5, 0, 5, 5, 0, 0, 5, 5, 0], 
 [5, 0, 0, 0, 0, 0, 0, 5, 0, 0], 
 [5, 0, 0, 0, 5, 5, 0, 0, 0, 5], 
 [0, 0, 0, 0, 0, 0, 5, 5, 0, 0], 
 [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], 
 [5, 0, 5, 0, 5, 0, 5, 0, 0, 5], 
 [0, 5, 5, 0, 5, 0, 0, 5, 5, 5], 
 [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]]","[[5, 0, 0, 0, 5, 0, 5, 0, 5, 0], 
 [5, 0, 0, 5, 0, 5, 5, 0, 0, 0], 
 [5, 5, 0, 5, 5, 0, 0, 5, 5, 0], 
 [5, 0, 0, 0, 0, 0, 0, 5, 0, 0], 
 [5, 0, 0, 0, 5, 5, 0, 0, 0, 5], 
 [0, 0, 0, 0, 0, 0, 5, 5, 0, 0], 
 [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], 
 [5, 0, 5, 0, 5, 0, 5, 0, 0, 5], 
 [0, 5, 5, 0, 5, 0, 0, 5, 5, 5], 
 [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]] 

changes to 

[[5, 0, 0, 0, 5, 0, 5, 0, 5, 0], 
 [5, 0, 1, 5, 0, 5, 5, 0, 0, 0], 
 [5, 5, 0, 5, 5, 0, 0, 5, 5, 0], 
 [5, 0, 0, 0, 0, 0, 0, 5, 0, 0], 
 [5, 0, 0, 0, 5, 5, 0, 0, 0, 5], 
 [0, 0, 0, 0, 0, 0, 5, 5, 0, 0], 
 [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], 
 [5, 0, 5, 0, 5, 0, 5, 0, 0, 5], 
 [0, 5, 5, 0, 5, 0, 0, 5, 5, 5], 
 [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]]","[[5, 0, 0, 0, 5, 0, 5, 0, 5, 0], 
 [5, 0, 1, 5, 0, 5, 5, 0, 0, 0], 
 [5, 5, 0, 5, 5, 0, 0, 5, 5, 0], 
 [5, 0, 0, 0, 0, 0, 0, 5, 0, 0], 
 [5, 0, 0, 0, 5, 5, 0, 0, 0, 5], 
 [0, 0, 0, 0, 0, 0, 5, 5, 0, 0], 
 [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], 
 [5, 0, 5, 0, 5, 0, 5, 0, 0, 5], 
 [0, 5, 5, 0, 5, 0, 0, 5, 5, 5], 
 [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]]","[[5, 1, 1, 0, 5, 0, 5, 0, 5, 0], [5, 1, 1, 5, 0, 5, 5, 0, 0, 0], [5, 5, 0, 5, 5, 1, 1, 5, 5, 0], [5, 1, 1, 1, 0, 1, 1, 5, 0, 0], [5, 1, 1, 1, 5, 5, 0, 0, 0, 5], [0, 1, 1, 1, 1, 1, 5, 5, 1, 1], [0, 0, 5, 5, 1, 1, 5, 5, 1, 1], [5, 0, 5, 0, 5, 0, 5, 0, 0, 5], [0, 5, 5, 0, 5, 0, 0, 5, 5, 5], [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]]",FALSE,
31d5ba1a,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[9, 9, 0, 9, 0], [9, 0, 0, 9, 0], [0, 9, 9, 9, 9], [4, 0, 0, 4, 0], [4, 4, 0, 4, 4], [4, 4, 4, 0, 4]],
then this grids change to output grids below
[[0, 6, 0, 0, 0], [0, 6, 0, 0, 6], [6, 0, 0, 6, 0]].

Example 2
If input grids are like that
[[9, 0, 0, 9, 9], [0, 0, 0, 0, 0], [0, 0, 9, 0, 9], [0, 0, 4, 4, 0], [4, 4, 4, 0, 0], [4, 0, 4, 0, 4]],
then this grids change to output grids below
[[6, 0, 6, 0, 6], [6, 6, 6, 0, 0], [6, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[9, 9, 0, 9, 0], [0, 0, 9, 0, 9], [0, 0, 0, 9, 9], [4, 4, 4, 0, 4], [4, 0, 4, 4, 4], [4, 4, 0, 0, 0]],
then output grids?

=========","The output grids would be 
[[6, 0, 0, 6, 0], [6, 6, 0, 0, 0], [0, 0, 0, 0, 6]]. 

The pattern in this problem is that the 9's in the input grid are replaced with 6's in the output grid, and the 4's are removed. The output grid is also smaller, with only the rows containing 6's remaining. The 6's are placed in the same columns where the 9's were in the input grid.","[[6, 0, 0, 6, 0], [6, 6, 0, 0, 0], [0, 0, 0, 0, 6]]","[[6, 0, 0, 6, 0], [6, 6, 0, 0, 0], [0, 0, 0, 0, 6]]","[[0, 0, 6, 6, 6], [6, 0, 0, 6, 0], [6, 6, 0, 6, 6]]",FALSE,
32e9702f,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[4, 4, 4], [0, 0, 0], [0, 0, 0]],
then this grids change to output grids below
[[4, 4, 5], [5, 5, 5], [5, 5, 5]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[5, 5, 5, 5, 5, 5, 5, 5], [5, 3, 3, 3, 3, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [3, 3, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5]].

Quiz
If input grids are like that
[[0, 0, 6, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem seems to be that all the cells that are not part of a group of the same number (in this case, 3, 4, or 6) are changed to 5. The groups of the same number are left as they are. 

So, if the input grid is:
[[0, 0, 6, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],

Then the output grid would be:
[[5, 5, 6, 6, 6, 6, 6, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 6, 6, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 6, 6, 6, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]].","[[0, 0, 6, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],

Then the output grid would be:
[[5, 5, 6, 6, 6, 6, 6, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 6, 6, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 6, 6, 6, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]","[[5, 5, 6, 6, 6, 6, 6, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 6, 6, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 6, 6, 6, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]","[[5, 6, 6, 6, 6, 6, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 6, 6, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [6, 6, 6, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 6, 6, 6, 6, 6, 6, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]",FALSE,
332efdb3,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]],
then this grids change to output grids below
[[1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that every other row and column is filled with 1s, while the remaining cells are filled with 0s. The pattern starts with a row of 1s and alternates between rows of 1s and rows of 0s and 1s. The same pattern is applied to the columns. 

So, if the input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then the output grids would be
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]].","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then the output grids would be
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]","[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]","[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]",TRUE,TRUE
3391f8c0,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 8, 0, 0], [0, 8, 8, 8, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0], [0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 0], [0, 3, 3, 0, 3, 3, 0, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 3, 3, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 5, 0, 0, 5, 0, 5, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 0, 0, 5, 0, 5, 0, 0, 0, 0], [0, 0, 6, 0, 6, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 6, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 5, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern here is that the shapes made by the numbers 5 and 6 in the input grid are swapped in the output grid.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 6, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 5, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 6, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 5, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 6, 0, 6, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 5, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
3490cc26,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 7, 7, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 7, 7, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8,",not_complete,not_complete,"[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 2, 2, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
34b99a2b,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 0, 0, 4, 0, 5, 5, 0], [8, 8, 0, 8, 4, 0, 0, 5, 5], [0, 0, 0, 0, 4, 0, 0, 5, 0], [8, 8, 0, 0, 4, 0, 5, 5, 5], [8, 0, 0, 8, 4, 0, 0, 0, 5]],
then this grids change to output grids below
[[2, 0, 2, 0], [2, 2, 2, 0], [0, 0, 2, 0], [2, 0, 2, 2], [2, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 8, 0, 0, 4, 5, 0, 5, 0], [0, 8, 0, 8, 4, 5, 0, 5, 5], [0, 8, 0, 8, 4, 0, 0, 0, 5], [0, 8, 0, 8, 4, 0, 5, 0, 5], [0, 0, 0, 8, 4, 0, 0, 5, 0]],
then this grids change to output grids below
[[2, 2, 2, 0], [2, 2, 2, 0], [0, 2, 0, 0], [0, 0, 0, 0], [0, 0, 2, 2]].

Quiz
If input grids are like that
[[0, 8, 0, 0, 4, 5, 0, 0, 0], [0, 8, 0, 8, 4, 5, 5, 0, 5], [8, 8, 0, 8, 4, 0, 0, 5, 5], [8, 8, 8, 8, 4, 5, 0, 5, 5], [0, 0, 8, 8, 4, 5, 0, 5, 0]],
then output grids?

=========","The pattern in this problem is that the grid is divided into 4 equal parts and each part is replaced by a number that represents the count of the most frequent number in that part. If there is a tie, the smaller number is chosen.

Let's apply this pattern to the quiz.

First, divide the input grid into 4 equal parts:

[[0, 8, 0, 0], [0, 8, 0, 8], [8, 8, 0, 8], [8, 8, 8, 8]]
[[4, 5, 0, 0], [4, 5, 5, 0], [4, 0, 0, 5], [4, 5, 0, 5]]
[[0, 0, 0], [5, 0, 5], [5, 5, 5], [5, 5, 0]]
[[8, 4, 5, 0], [8, 4, 5, 0], [8, 4, 5, 0], [0, 4, 5, 0]]

Then, replace each part by a number that represents the count of the most frequent number in that part:

[[8, 8, 0, 0], [8, 8, 0, 8], [8, 8, 0, 8], [8, 8, 8, 8]] -> 8 appears 12 times -> 2
[[4, 5, 0, 0], [4, 5, 5, 0], [4, 0, 0, 5], [4, 5, 0, 5]] -> 5 appears 5 times, 4 appears 5 times, 0 appears 6 times -> 0
[[0, 0, 0], [5, 0, 5], [5, 5, 5], [5, 5, 0]] -> 5 appears 7 times, 0 appears 5 times -> 2
[[8, 4, 5, 0], [8, 4, 5, 0], [8, 4, 5, 0], [0, 4, 5, 0]] -> 8 appears 3 times, 4 appears 4 times, 5 appears 4 times, 0 appears 4 times -> 0

So, the output grid is:

[[2, 0], 
 [2, 0]]","[[0, 8, 0, 0], [0, 8, 0, 8], [8, 8, 0, 8], [8, 8, 8, 8]]
[[4, 5, 0, 0], [4, 5, 5, 0], [4, 0, 0, 5], [4, 5, 0, 5]]
[[0, 0, 0], [5, 0, 5], [5, 5, 5], [5, 5, 0]]
[[8, 4, 5, 0], [8, 4, 5, 0], [8, 4, 5, 0], [0, 4, 5, 0]]

Then, replace each part by a number that represents the count of the most frequent number in that part:

[[8, 8, 0, 0], [8, 8, 0, 8], [8, 8, 0, 8], [8, 8, 8, 8]] -> 8 appears 12 times -> 2
[[4, 5, 0, 0], [4, 5, 5, 0], [4, 0, 0, 5], [4, 5, 0, 5]] -> 5 appears 5 times, 4 appears 5 times, 0 appears 6 times -> 0
[[0, 0, 0], [5, 0, 5], [5, 5, 5], [5, 5, 0]] -> 5 appears 7 times, 0 appears 5 times -> 2
[[8, 4, 5, 0], [8, 4, 5, 0], [8, 4, 5, 0], [0, 4, 5, 0]] -> 8 appears 3 times, 4 appears 4 times, 5 appears 4 times, 0 appears 4 times -> 0

So, the output grid is:

[[2, 0], 
 [2, 0]]","[[2, 0], 
 [2, 0]]","[[2, 2, 0, 0], [2, 0, 0, 0], [2, 2, 2, 0], [0, 2, 0, 0], [2, 0, 0, 2]]",FALSE,
351d6448,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 3, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0], [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 3, 3, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0], [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 3, 3, 3, 0, 2, 2, 2, 0, 2, 2, 2, 0], [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 3, 3, 3, 0, 2, 2, 2, 0, 2, 2, 2, 0], [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

The pattern in this problem is that the grid is divided into sections separated by rows of the same number. Each section is then condensed into a single row, taking the maximum number of consecutive cells of the same color from each row in the section. The sections are then stacked on top of each other, separated by a row of zeros.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 3, 3, 3, 0, 3, 2, 2, 0, 2, 2, 2, 0], [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2]]",FALSE,
358ba94e,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 7, 7, 7, 0, 7, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 7, 0, 7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 7, 7, 7, 7, 7, 0, 0, 7, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 0, 7, 0, 0, 0, 0, 7, 0, 7, 7, 7, 0], [0, 0, 0, 7, 0, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 0, 7, 0], [0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 0, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[7, 7, 7, 7, 7], [7, 0, 7, 7, 7], [7, 7, 7, 0, 7], [7, 0, 7, 7, 7], [7, 7, 7, 7, 7]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 8, 8], [0, 8, 0, 8, 0, 8, 0, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 0, 8], [0, 8, 8, 8, 8, 8, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 8, 8], [0, 8, 0, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8], [0, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 8, 8, 8, 0, 8, 0, 0], [0, 0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 8, 0, 8, 8, 8, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 8, 8, 8, 0, 8, 0, 0], [0, 0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 8, 8, 8, 8], [8, 0, 8, 0, 8], [8, 8, 8, 8, 8], [8, 0, 8, 0, 8], [8, 8, 8, 8, 8]].

Quiz
If input grids are like that
[[0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1]].

The pattern in this problem is that the input grid is divided into four quadrants, and each quadrant contains a smaller 5x5 grid of the same pattern. The output is the 5x5 grid from the bottom right quadrant.","[[1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1]]","[[1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1]]","[[1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1]]",TRUE,FALSE
37d3e8b2,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 8, 8, 8, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 0, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8, 8, 0], [0, 0, 8, 0, 0, 8, 0, 8, 0, 0, 0, 8, 0, 8, 8, 8, 0], [0, 0, 8, 0, 0, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 8, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 8, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 8, 8, 0, 8, 0, 0, 0, 8, 0, 8, 8, 8, 0, 8, 0], [0, 8, 0, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 8, 0, 8, 0], [0, 8, 8, 8, 8, 8, 0, 0, 0, 8, 0, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 0], [0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 3, 0, 3, 3, 3, 0], [0, 0, 2, 0, 0, 2, 2, 2, 0, 0, 0, 3, 3, 3, 0, 3, 0], [0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 2, 2, 2, 0, 2, 0, 0, 0, 7, 0, 7, 7, 7, 0, 7, 0], [0, 2, 0, 2, 2, 2, 0, 0, 0, 7, 7, 7, 0, 7, 0, 7, 0], [0, 2, 2, 2, 2, 2, 0, 0, 0, 7, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0]].

Quiz
If input grids are like that
[[0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 8, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 8, 0, 8, 8, 8, 0, 8, 0, 8, 8, 0, 0, 8, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 8, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 0, 8, 8, 8, 8, 8, 0], [0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 8, 8, 8, 8, 8, 0], [0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 0, 0, 8, 8, 0], [0, 8, 8, 8, 8, 0, 8, 8, 0, 0, 8, 8, 8, 0, 0, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 3, 0, 0, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 3, 0, 3, 3, 3, 3, 3, 0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 3, 0, 3, 3, 3, 3, 3, 0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 3, 3, 3, 0, 0, 3, 3, 0], [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 3, 3, 3, 0, 0, 3, 3, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

The pattern here is that each distinct shape in the input grid is assigned a different color in the output grid. The color is determined by the order in which the shapes appear in the grid, starting from the top left and moving to the right and then down. The first shape is assigned the color 1, the second shape is assigned the color 2, and so on.","[[0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 3, 0, 0, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 3, 0, 3, 3, 3, 3, 3, 0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 3, 0, 3, 3, 3, 3, 3, 0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 3, 3, 3, 0, 0, 3, 3, 0], [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 3, 3, 3, 0, 0, 3, 3, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 3, 0, 0, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 3, 0, 3, 3, 3, 3, 3, 0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 3, 0, 3, 3, 3, 3, 3, 0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 3, 3, 3, 0, 0, 3, 3, 0], [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 3, 3, 3, 0, 0, 3, 3, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [0, 0, 2, 0, 2, 2, 2, 0, 3, 0, 3, 3, 0, 0, 3, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 7, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 7, 0, 7, 7, 7, 7, 7, 0], [0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 7, 0, 7, 7, 7, 7, 7, 0], [0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 7, 7, 7, 0, 0, 7, 7, 0], [0, 2, 2, 2, 2, 0, 2, 2, 0, 0, 7, 7, 7, 0, 0, 7, 7, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
3979b1a8,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[9, 8, 8, 8, 9], [8, 8, 2, 8, 8], [8, 2, 2, 2, 8], [8, 8, 2, 8, 8], [9, 8, 8, 8, 9]],
then this grids change to output grids below
[[9, 8, 8, 8, 9, 9, 2, 8, 9, 2], [8, 8, 2, 8, 8, 9, 2, 8, 9, 2], [8, 2, 2, 2, 8, 9, 2, 8, 9, 2], [8, 8, 2, 8, 8, 9, 2, 8, 9, 2], [9, 8, 8, 8, 9, 9, 2, 8, 9, 2], [9, 9, 9, 9, 9, 2, 2, 8, 9, 2], [2, 2, 2, 2, 2, 2, 8, 8, 9, 2], [8, 8, 8, 8, 8, 8, 8, 9, 9, 2], [9, 9, 9, 9, 9, 9, 9, 9, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 8]].

Example 2
If input grids are like that
[[2, 3, 3, 3, 2], [3, 3, 5, 3, 3], [3, 5, 5, 5, 3], [3, 3, 5, 3, 3], [2, 3, 3, 3, 2]],
then this grids change to output grids below
[[2, 3, 3, 3, 2, 2, 5, 3, 2, 5], [3, 3, 5, 3, 3, 2, 5, 3, 2, 5], [3, 5, 5, 5, 3, 2, 5, 3, 2, 5], [3, 3, 5, 3, 3, 2, 5, 3, 2, 5], [2, 3, 3, 3, 2, 2, 5, 3, 2, 5], [2, 2, 2, 2, 2, 5, 5, 3, 2, 5], [5, 5, 5, 5, 5, 5, 3, 3, 2, 5], [3, 3, 3, 3, 3, 3, 3, 2, 2, 5], [2, 2, 2, 2, 2, 2, 2, 2, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 3]].

Quiz
If input grids are like that
[[5, 1, 1, 1, 5], [1, 1, 9, 1, 1], [1, 9, 9, 9, 1], [1, 1, 9, 1, 1], [5, 1, 1, 1, 5]],
then output grids?

=========","The output grids would be:

[[5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [1, 9, 9, 9, 1, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [5, 5, 5, 5, 5, 9, 9, 1, 5, 9], [9, 9, 9, 9, 9, 9, 1, 1, 5, 9], [1, 1, 1, 1, 1, 1, 1, 5, 5, 9], [5, 5, 5, 5, 5, 5, 5, 5, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 1]].

The pattern here is that the grid is mirrored horizontally and then vertically, with the center value of the original grid becoming the top left value of the new grid. The original grid is then rotated 90 degrees clockwise and added to the right side of the new grid.","[[5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [1, 9, 9, 9, 1, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [5, 5, 5, 5, 5, 9, 9, 1, 5, 9], [9, 9, 9, 9, 9, 9, 1, 1, 5, 9], [1, 1, 1, 1, 1, 1, 1, 5, 5, 9], [5, 5, 5, 5, 5, 5, 5, 5, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 1]]","[[5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [1, 9, 9, 9, 1, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [5, 5, 5, 5, 5, 9, 9, 1, 5, 9], [9, 9, 9, 9, 9, 9, 1, 1, 5, 9], [1, 1, 1, 1, 1, 1, 1, 5, 5, 9], [5, 5, 5, 5, 5, 5, 5, 5, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 1]]","[[5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [1, 9, 9, 9, 1, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [5, 5, 5, 5, 5, 9, 9, 1, 5, 9], [9, 9, 9, 9, 9, 9, 1, 1, 5, 9], [1, 1, 1, 1, 1, 1, 1, 5, 5, 9], [5, 5, 5, 5, 5, 5, 5, 5, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 1]]",TRUE,FALSE
3a301edc,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 5, 5, 5, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 5, 5, 5, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 5, 5, 5, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 5, 5, 5, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 1, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 1, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0], [0, 0, 1, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0], [0, 0, 1, 3, 3, 1, 3, 3, 1, 0, 0, 0, 0, 0], [0, 0, 1, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0], [0, 0, 1, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ",not_complete,not_complete,"[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 8, 8, 8, 8, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 8, 8, 8, 8, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 8, 8, 8, 8, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 8, 8, 8, 8, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
3b4c2228,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[2, 2, 0, 3, 0, 0, 3], [2, 2, 0, 2, 2, 0, 0], [0, 0, 0, 2, 2, 0, 0], [2, 3, 3, 0, 0, 2, 2], [0, 3, 3, 0, 0, 2, 2], [0, 0, 0, 0, 3, 3, 0], [3, 0, 2, 0, 3, 3, 0]],
then this grids change to output grids below
[[1, 0, 0], [0, 1, 0], [0, 0, 0]].

Example 2
If input grids are like that
[[0, 3, 3, 0, 0], [0, 3, 3, 0, 0], [0, 0, 0, 0, 0], [2, 2, 0, 0, 2], [2, 2, 0, 0, 0], [0, 0, 0, 2, 2], [0, 0, 0, 2, 2]],
then this grids change to output grids below
[[1, 0, 0], [0, 0, 0], [0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0], [0, 3, 3, 0, 0], [0, 3, 3, 0, 0], [2, 0, 0, 0, 0], [0, 0, 0, 0, 3], [3, 3, 0, 0, 0], [3, 3, 0, 2, 2], [0, 0, 0, 2, 2]],
then output grids?

=========","The output grids would be
[[0, 0, 0], [1, 0, 0], [0, 0, 0]].

Explanation:
In the given examples, the output grid is a 3x3 grid where the top left cell represents the count of 2x2 blocks of '3' in the input grid, the middle cell represents the count of 2x2 blocks of '2' in the input grid, and the rest of the cells are '0'. 

In the quiz input grid, there is one 2x2 block of '3' and no 2x2 block of '2', so the output grid is [[0, 0, 0], [1, 0, 0], [0, 0, 0]].","[[0, 0, 0], [1, 0, 0], [0, 0, 0]].

Explanation:
In the given examples, the output grid is a 3x3 grid where the top left cell represents the count of 2x2 blocks of '3' in the input grid, the middle cell represents the count of 2x2 blocks of '2' in the input grid, and the rest of the cells are '0'. 

In the quiz input grid, there is one 2x2 block of '3' and no 2x2 block of '2', so the output grid is [[0, 0, 0], [1, 0, 0], [0, 0, 0]]","[[0, 0, 0], [1, 0, 0], [0, 0, 0]]","[[1, 0, 0], [0, 1, 0], [0, 0, 0]]",FALSE,
3d31c5b3,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 5, 5, 5, 5, 0], [5, 5, 0, 5, 5, 5], [5, 5, 0, 5, 0, 0], [0, 0, 4, 0, 0, 0], [4, 0, 4, 4, 4, 0], [4, 0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 2], [2, 0, 0, 0, 0, 2], [0, 0, 0, 2, 0, 0], [0, 8, 0, 8, 0, 0], [0, 8, 0, 0, 0, 0], [0, 8, 0, 8, 0, 0]],
then this grids change to output grids below
[[2, 5, 5, 5, 5, 2], [5, 5, 4, 5, 5, 5], [5, 5, 0, 5, 0, 0]].

Example 2
If input grids are like that
[[5, 5, 0, 5, 5, 5], [0, 5, 0, 5, 0, 5], [0, 0, 0, 5, 5, 0], [0, 4, 4, 0, 4, 0], [0, 0, 0, 0, 0, 4], [0, 4, 0, 4, 0, 4], [2, 2, 2, 0, 0, 0], [0, 2, 2, 0, 2, 0], [2, 2, 2, 0, 2, 0], [8, 0, 8, 8, 8, 8], [0, 0, 8, 8, 8, 8], [0, 0, 0, 8, 0, 0]],
then this grids change to output grids below
[[5, 5, 4, 5, 5, 5], [0, 5, 8, 5, 8, 5], [2, 4, 2, 5, 5, 4]].

Quiz
If input grids are like that
[[5, 0, 5, 0, 0, 5], [0, 5, 0, 0, 0, 5], [5, 5, 5, 0, 0, 0], [0, 0, 0, 4, 0, 4], [0, 0, 0, 0, 0, 0], [4, 0, 0, 4, 0, 0], [2, 0, 2, 0, 2, 2], [2, 2, 0, 2, 2, 2], [2, 2, 2, 2, 2, 2], [0, 0, 8, 8, 0, 0], [0, 8, 0, 0, 8, 8], [0, 0, 0, 8, 0, 0]],
then output grids?

=========","The pattern in this problem is that the output grid is a 3x6 grid where each row is a combination of the corresponding rows from the input grid. The combination is done by taking the maximum value at each position from the corresponding rows. 

For example, in Example 1, the first row of the output is [2, 5, 5, 5, 5, 2] which is obtained by taking the maximum value at each position from the first, fourth and seventh rows of the input. Similarly, the second row of the output is obtained from the second, fifth and eighth rows of the input and the third row of the output is obtained from the third, sixth and ninth rows of the input.

Applying this pattern to the quiz input, the output would be:

[[5, 0, 5, 4, 2, 5], [2, 5, 0, 4, 2, 5], [5, 5, 5, 2, 2, 2]]","[[5, 0, 5, 4, 2, 5], [2, 5, 0, 4, 2, 5], [5, 5, 5, 2, 2, 2]]","[[5, 0, 5, 4, 2, 5], [2, 5, 0, 4, 2, 5], [5, 5, 5, 2, 2, 2]]","[[5, 0, 5, 4, 2, 5], [2, 5, 0, 2, 8, 5], [5, 5, 5, 4, 2, 2]]",FALSE,
3ed85e70,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 8, 8, 1, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 8, 8, 1, 3, 3, 3, 3, 3, 2, 4, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0]],
then this grids change to output grids below
[[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 8, 8, 1, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 8, 8, 1, 3, 3, 3, 3, 3, 2, 4, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 2, 4, 2, 0, 0, 0, 0, 0], [0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 2, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 4, 2, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0]].

Example 2
If input grids are like that
[[3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 2, 1, 2, 3, 3, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 4, 4, 4, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [8, 4, 4, 4, 8, 3, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [8, 4, 4, 4, 8, 3, 0, 0, 8, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [8, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 1, 3, 3, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 2, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [3, 1, 1, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 2, 2, 2, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 2, 2, 2, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0, 8, 4, 4, 4, 8, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 2, 1, 2, 3, 3, 0, 0, 0, 0, 0, 8, 4, 4, 4, 8, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 0], [3, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0, 8, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 4, 4, 4, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [8, 4, 4, 4, 8, 3, 0, 0, 8, 8, 0, 0, 1, 1, 1, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 1, 2, 1, 0, 0], [8, 4, 4, 4, 8, 3, 0, 0, 8, 8, 0, 0, 1, 2, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [8, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 8, 8, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 8, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 8, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 1, 3, 3, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 1, 1, 1, 0, 0, 0, 0], [3, 1, 2, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0], [3, 1, 1, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 2, 2, 2, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 1, 1, 1, 0, 3, 3, 3, 0, 0, 0, 2, 1, 2, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 8, 2, 2, 3, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 2, 2, 8, 3, 3, 3, 3, 3, 1, 6, 1, 3, 3, 3, 3, 3, 3, 3, 1, 4, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 4, 1, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",not_complete,not_complete,"[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6, 1, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 8, 2, 2, 3, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 2, 2, 8, 3, 3, 3, 3, 3, 1, 6, 1, 3, 3, 3, 3, 3, 3, 3, 1, 4, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 4, 1, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]",FALSE,
414297c0,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 7, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 2, 4, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 2, 8, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 8, 1, 1, 1, 1, 7, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1], [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1], [1, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1], [1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1], [1, 2, 8, 2, 1, 1, 2, 7, 2, 1, 1], [1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 1, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 4, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 8, 8, 8, 8, 8], [8, 2, 8, 8, 8, 8], [2, 1, 2, 8, 8, 8], [2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8], [8, 8, 2, 8, 2, 8], [8, 8, 8, 4, 2, 8], [8, 8, 2, 2, 2, 8]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 7, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 2, 2, 0, 0, 0], [0, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 0, 0, 0, 0, 8, 2, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 2, 2, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 7, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]

The pattern in this problem is that the grid is cropped to the area that contains non-zero values. The cropping is done in such a way that the resulting grid is as small as possible, but still contains all non-zero values. The values outside this area are discarded.","[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 7, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]","[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 7, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]","[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 2, 1, 2, 4, 4, 4, 4, 4, 4, 2, 7, 2, 4], [4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 2, 2, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 2, 6, 4, 4, 4, 4, 4], [4, 2, 2, 4, 4, 4, 4, 4, 4, 4, 2, 4, 2, 2, 4], [2, 3, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 2], [2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2]]",FALSE,
423a55dc,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 7, 7, 7, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern in this problem is that the object (in this case, the number 7) is rotated 90 degrees counterclockwise around its center.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 7, 7, 7, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 7, 7, 7, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 7, 7, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
42918530,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0], [0, 3, 0, 0, 0, 3, 0, 8, 0, 0, 0, 8, 0, 4, 0, 4, 0, 4, 0], [0, 3, 0, 0, 0, 3, 0, 8, 0, 0, 0, 8, 0, 4, 4, 4, 4, 4, 0], [0, 3, 0, 0, 0, 3, 0, 8, 0, 0, 0, 8, 0, 4, 0, 4, 0, 4, 0], [0, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 0, 7, 7, 7, 7, 7, 0], [0, 4, 0, 0, 0, 4, 0, 2, 0, 0, 0, 2, 0, 7, 0, 0, 0, 7, 0], [0, 4, 0, 0, 0, 4, 0, 2, 0, 0, 0, 2, 0, 7, 0, 0, 0, 7, 0], [0, 4, 0, 0, 0, 4, 0, 2, 0, 0, 0, 2, 0, 7, 0, 0, 0, 7, 0], [0, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0], [0, 3, 0, 0, 0, 3, 0, 8, 0, 0, 0, 8, 0, 4, 0, 4, 0, 4, 0], [0, 3, 0, 0, 0, 3, 0, 8, 0, 0, 0, 8, 0, 4, 4, 4, 4, 4, 0], [0, 3, 0, 0, 0, 3, 0, 8, 0, 0, 0, 8, 0, 4, 0, 4, 0, 4, 0], [0, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 0, 7, 7, 7, 7, 7, 0], [0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 2, 0, 7, 0, 0, 0, 7, 0], [0, 4, 4, 4, 4, 4, 0, 2, 0, 0, 0, 2, 0, 7, 0, 0, 0, 7, 0], [0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 2, 0, 7, 0, 0, 0, 7, 0], [0, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 0, 8, 8, 8, 8, 8, 0], [0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 4, 0, 8, 0, 0, 0, 8, 0], [0, 2, 2, 2, 0, 2, 0, 4, 0, 0, 0, 4, 0, 8, 0, 8, 0, 8, 0], [0, 2, 0, 0, 0, 2, 0, 4, 0, 0, 0, 4, 0, 8, 0, 0, 0, 8, 0], [0, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 0, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 1, 0], [0, 8, 0, 0, 0, 8, 0, 3, 0, 0, 0, 3, 0, 1, 0, 0, 0, 1, 0], [0, 8, 0, 0, 0, 8, 0, 3, 0, 3, 3, 3, 0, 1, 0, 0, 0, 1, 0], [0, 8, 0, 0, 0, 8, 0, 3, 0, 3, 0, 3, 0, 1, 0, 0, 0, 1, 0], [0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 0, 8, 8, 8, 8, 8, 0], [0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 4, 0, 8, 0, 0, 0, 8, 0], [0, 2, 2, 2, 0, 2, 0, 4, 0, 0, 0, 4, 0, 8, 0, 8, 0, 8, 0], [0, 2, 0, 0, 0, 2, 0, 4, 0, 0, 0, 4, 0, 8, 0, 0, 0, 8, 0], [0, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 0, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 1, 0], [0, 8, 0, 0, 0, 8, 0, 3, 0, 0, 0, 3, 0, 1, 0, 0, 0, 1, 0], [0, 8, 0, 8, 0, 8, 0, 3, 0, 3, 3, 3, 0, 1, 0, 0, 0, 1, 0], [0, 8, 0, 0, 0, 8, 0, 3, 0, 3, 0, 3, 0, 1, 0, 0, 0, 1, 0], [0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 0, 2, 0], [0, 2, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 2, 2, 0, 2, 0], [0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 0, 0, 8, 0, 3, 0, 0, 3, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 8, 8, 0, 8, 0, 3, 0, 3, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 8, 0, 8, 0, 3, 3, 0, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 6, 0, 6, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 6, 6, 6, 0, 2, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 0, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 0, 0, 8, 0, 3, 0, 0, 3, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 1, 0, 1, 0, 8, 8, 8, 0, 8, 0, 3, 0, 3, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 0, 0, 8, 0, 3, 3, 0, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 6, 0, 6, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 6, 6, 6, 0, 2, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 0, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 0, 0, 8, 0, 3, 0, 0, 3, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 1, 0, 1, 0, 8, 8, 8, 0, 8, 0, 3, 0, 3, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 0, 0, 8, 0, 3, 3, 0, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 6, 0, 6, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 6, 6, 6, 0, 2, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 0, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 0, 0, 8, 0, 3, 0, 0, 3, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 1, 0, 1, 0, 8, 8, 8, 0, 8, 0, 3, 0, 3, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 0, 0, 8, 0, 3, 3, 0, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 6, 0, 6, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 6, 6, 6, 0, 2, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 0, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 0, 0, 8, 0, 3, 0, 0, 3, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 8, 8, 0, 8, 0, 3, 0, 3, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 8, 0, 8, 0, 3, 3, 0, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 6, 0, 6, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 0, 2, 0], [0, 6, 0, 6, 6, 6, 0, 2, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 2, 2, 0, 2, 0], [0, 6, 0, 0, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 0, 2, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 3, 3, 0, 2, 0, 2, 0, 2, 0], [0, 8, 8, 8, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 3, 0, 3, 0, 2, 2, 2, 0, 2, 0], [0, 8, 0, 8, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 3, 0, 0, 3, 0, 2, 0, 2, 0, 2, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 2, 0, 2, 0, 6, 0, 6, 0, 6, 0], [0, 2, 2, 2, 0, 2, 0, 8, 8, 8, 0, 8, 0, 2, 2, 2, 0, 2, 0, 6, 0, 6, 6, 6, 0], [0, 2, 0, 2, 0, 2, 0, 8, 0, 8, 0, 8, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
42a15761,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]],
then this grids change to output grids below
[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]].

Example 2
If input grids are like that
[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]],
then this grids change to output grids below
[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]].

Quiz
If input grids are like that
[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]],
then output grids?

=========","The pattern in this problem seems to be that every second row starting from the second row (index 1) has its 0s and 2s swapped. So, if we apply this pattern to the quiz input, we get the following output:

[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]]","[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]]","[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2], 
 [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]]","[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]]",FALSE,
4364c1c4,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8], [8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8], [8, 8, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8], [8, 8, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8], [8, 8, 3, 3, 3, 8, 8, 3, 3, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
then this grids change to output grids below
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8], [8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8], [8, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8], [8, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8], [8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8], [8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8], [8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8], [8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8], [8, 8, 8, 3, 3, 3, 8, 8, 3, 3, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]].

Example 2
If input grids are like that
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 1, 1, 1, 4, 4, 4, 1, 1, 1], [1, 1, 4, 1, 1, 1, 4, 4, 4, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1], [1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
then this grids change to output grids below
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 1, 1, 1, 4, 4, 4, 1, 1, 1, 1], [1, 4, 1, 1, 1, 4, 4, 4, 1, 1, 1, 1], [1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1], [1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1], [1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]].

Quiz
If input grids are like that
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8], [8, 8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8], [8, 8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8], [8, 8, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 4, 4, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 4, 8, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
then output grids?

=========","The output grids would be:

[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 4, 4, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 4, 8, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]

The pattern here is that the objects are moving to the left.","[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 4, 4, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 4, 8, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]","[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 4, 4, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 4, 8, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]","[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 4, 8, 4, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]",FALSE,
456873bc,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 8, 2, 2, 0, 0, 2, 8, 2, 0, 0, 2, 2, 8], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [8, 2, 2, 0, 0, 2, 8, 2, 0, 0, 2, 2, 8, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 2, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[2, 2, 0, 0, 2, 2, 0, 0, 3, 3, 3], [2, 0, 2, 0, 2, 0, 2, 0, 3, 3, 3], [0, 2, 0, 0, 0, 2, 0, 0, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3], [2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3], [2, 0, 2, 0, 0, 0, 0, 0, 3, 3, 3], [0, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3], [0, 0, 0, 0, 2, 2, 0, 0, 3, 3, 3], [0, 0, 0, 0, 2, 0, 2, 0, 3, 3, 3], [0, 0, 0, 0, 0, 2, 0, 0, 3, 3, 3]],
then this grids change to output grids below
[[8, 2, 0, 0, 2, 8, 0, 0, 0, 0, 0], [2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0], [0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0], [8, 0, 2, 0, 0, 0, 0, 0, 2, 0, 8], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2], [2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2], [2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2], [2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2]],
then output grids?

=========","The output grids would be:

[[8, 2, 2, 8, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2], [2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2], [2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0,",not_complete,not_complete,"[[8, 2, 2, 2, 0, 2, 8, 2, 2, 0, 2, 2, 8, 2, 0, 2, 2, 2, 8], [2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2], [2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [8, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 8], [2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2], [8, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 8, 2, 0, 2, 0, 2, 8]]",FALSE,
45737921,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 4, 0, 0, 0, 0, 0, 0], [0, 4, 8, 4, 0, 0, 0, 0, 0, 0], [0, 8, 8, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 2, 2, 0], [0, 0, 0, 0, 0, 0, 3, 3, 2, 0], [0, 0, 0, 0, 0, 0, 3, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 6, 3, 0, 0, 0, 0, 0], [0, 0, 3, 6, 3, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 8, 0, 0, 0, 0, 0, 0], [0, 8, 4, 8, 0, 0, 0, 0, 0, 0], [0, 4, 4, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 3, 3, 0], [0, 0, 0, 0, 0, 0, 2, 2, 3, 0], [0, 0, 0, 0, 0, 0, 2, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 3, 6, 0, 0, 0, 0, 0], [0, 0, 6, 3, 6, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0], [0, 5, 8, 5, 0, 0, 0], [0, 5, 8, 5, 0, 0, 0], [0, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0], [0, 8, 5, 8, 0, 0, 0], [0, 8, 5, 8, 0, 0, 0], [0, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 2, 2, 0, 0, 0, 0, 0], [0, 3, 3, 2, 0, 0, 0, 0, 0], [0, 3, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that the colors of the objects in the grid are swapped. The color in the center remains the same, while the colors on the sides are swapped. 

So, if the input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 2, 2, 0, 0, 0, 0, 0], [0, 3, 3, 2, 0, 0, 0, 0, 0], [0, 3, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],

then the output grids would be
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 2, 0, 0, 0, 0, 0], [0, 2, 2, 3, 0, 0, 0, 0, 0], [0, 2, 3, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 1, 6, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 6, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]].","[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 2, 2, 0, 0, 0, 0, 0], [0, 3, 3, 2, 0, 0, 0, 0, 0], [0, 3, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],

then the output grids would be
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 2, 0, 0, 0, 0, 0], [0, 2, 2, 3, 0, 0, 0, 0, 0], [0, 2, 3, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 1, 6, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 6, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 2, 0, 0, 0, 0, 0], [0, 2, 2, 3, 0, 0, 0, 0, 0], [0, 2, 3, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 1, 6, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 6, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 3, 0, 0, 0, 0, 0], [0, 2, 2, 3, 0, 0, 0, 0, 0], [0, 2, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 6, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
45bbe264,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0]].

The pattern here is that the row with the non-zero number becomes a row of that number, except for the column where the number was originally, which becomes 2. The rows above and below the changed row also change to the same number.","[[0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0]]","[[0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0]]","[[0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 2, 8, 8, 8, 8], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [4, 4, 4, 2, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0]]",FALSE,
477d2879,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3, 3], [3, 3, 3, 3, 2, 8, 8, 2, 3, 3, 3, 3, 3], [3, 3, 2, 2, 2, 8, 8, 2, 2, 3, 3, 3, 3], [3, 3, 2, 8, 8, 8, 8, 8, 2, 3, 3, 3, 3], [3, 3, 2, 8, 2, 2, 2, 8, 2, 3, 3, 3, 3], [3, 3, 2, 8, 2, 3, 2, 8, 2, 3, 3, 3, 3], [3, 3, 2, 8, 2, 3, 2, 8, 2, 2, 3, 3, 3], [3, 2, 2, 8, 2, 3, 2, 8, 8, 2, 3, 3, 3], [3, 2, 8, 8, 2, 3, 2, 8, 2, 2, 3, 3, 3], [3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 3, 1, 1, 0, 0, 1, 8, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 6, 1, 1, 0], [0, 7, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4], [2, 2, 2, 3, 3, 3, 4, 4, 8, 8, 8, 4, 4], [2, 2, 2, 3, 4, 4, 4, 4, 8, 6, 8, 4, 4], [3, 3, 3, 3, 4, 4, 4, 4, 8, 6, 8, 8, 4], [7, 7, 3, 4, 4, 4, 4, 4, 8, 6, 6, 8, 4], [7, 7, 3, 4, 4, 4, 4, 8, 8, 6, 8, 8, 4], [7, 7, 3, 3, 3, 3, 4, 8, 6, 6, 8, 4, 4], [7, 7, 7, 7, 7, 3, 4, 8, 6, 6, 8, 8, 4], [7, 7, 7, 3, 3, 3, 4, 8, 6, 6, 6, 8, 4], [7, 7, 7, 3, 4, 4, 4, 8, 6, 6, 8, 8, 4], [7, 7, 3, 3, 4, 4, 4, 8, 8, 8, 8, 4, 4], [7, 7, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [7, 7, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]].

Quiz
If input grids are like that
[[0, 5, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 7, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [7, 7, 7, 7, 7, 7, 7, 3, 3, 3, 3, 3, 3], [7, 7, 7, 7, 7, 7, 7, 3, 8, 8, 8, 3, 3], [7, 7, 7, 7, 7, 7, 7, 3, 8, 8, 8, 3, 3], [7, 7, 7, 7, 7, 3, 3, 3, 8, 8, 8, 6, 3], [7, 7, 7, 7, 7, 3, 8, 8, 8, 8, 8, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3], [4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4]].

The pattern here is that the color of the cells is determined by the color of the cell in the top left corner of the 3x3 square that the cell is a part of. If the cell is not part of a 3x3 square (i.e., it is on the edge of the grid), then its color is determined by the nearest cell that is part of a 3x3 square.","[[5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [7, 7, 7, 7, 7, 7, 7, 3, 3, 3, 3, 3, 3], [7, 7, 7, 7, 7, 7, 7, 3, 8, 8, 8, 3, 3], [7, 7, 7, 7, 7, 7, 7, 3, 8, 8, 8, 3, 3], [7, 7, 7, 7, 7, 3, 3, 3, 8, 8, 8, 6, 3], [7, 7, 7, 7, 7, 3, 8, 8, 8, 8, 8, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3], [4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4]]","[[5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [7, 7, 7, 7, 7, 7, 7, 3, 3, 3, 3, 3, 3], [7, 7, 7, 7, 7, 7, 7, 3, 8, 8, 8, 3, 3], [7, 7, 7, 7, 7, 7, 7, 3, 8, 8, 8, 3, 3], [7, 7, 7, 7, 7, 3, 3, 3, 8, 8, 8, 6, 3], [7, 7, 7, 7, 7, 3, 8, 8, 8, 8, 8, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3], [4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4]]","[[5, 5, 5, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7], [5, 5, 5, 3, 7, 7, 6, 6, 6, 6, 6, 7, 7], [5, 5, 3, 3, 7, 7, 6, 8, 8, 8, 6, 7, 7], [3, 3, 3, 7, 7, 7, 6, 6, 8, 8, 6, 6, 7], [7, 7, 7, 7, 7, 7, 7, 6, 8, 8, 8, 6, 7], [7, 7, 7, 7, 7, 7, 7, 6, 8, 8, 8, 6, 7], [7, 7, 7, 7, 7, 7, 7, 6, 8, 8, 8, 6, 7], [7, 7, 7, 7, 7, 6, 6, 6, 8, 8, 8, 6, 7], [7, 7, 7, 7, 7, 6, 8, 8, 8, 8, 8, 6, 7], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7], [4, 4, 4, 4, 4, 4, 4, 4, 6, 7, 7, 7, 7], [4, 4, 4, 4, 4, 4, 4, 6, 6, 7, 7, 7, 7], [4, 4, 4, 4, 4, 4, 4, 6, 7, 7, 7, 7, 7]]",FALSE,
47996f11,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 9, 5, 5, 9, 4, 8, 8, 4, 5, 7, 7, 3, 6, 6, 6, 7, 7, 1, 3, 7, 7, 5, 4, 8, 8, 4, 9, 5, 5], [9, 8, 5, 8, 4, 9, 8, 8, 5, 4, 7, 7, 1, 6, 6, 6, 9, 7, 7, 1, 7, 7, 4, 5, 8, 8, 9, 4, 8, 5], [5, 5, 2, 2, 8, 8, 1, 7, 7, 7, 7, 7, 7, 6, 6, 6, 9, 9, 7, 7, 7, 7, 7, 7, 7, 1, 8, 8, 2, 2], [5, 8, 2, 9, 8, 8, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9, 2], [9, 4, 8, 8, 8, 2, 4, 4, 3, 1, 7, 7, 9, 3, 2, 5, 5, 2, 3, 9, 7, 7, 1, 3, 4, 4, 2, 8, 8, 8], [4, 9, 8, 8, 2, 8, 4, 1, 1, 7, 7, 9, 3, 8, 5, 2, 2, 5, 8, 3, 9, 7, 7, 1, 1, 4, 8, 2, 8, 8], [8, 8, 1, 7, 4, 4, 8, 7, 7, 7, 9, 9, 2, 5, 5, 4, 4, 5, 5, 2, 9, 9, 7, 7, 7, 8, 4, 4, 7, 1], [8, 8, 7, 7, 4, 1, 7, 8, 7, 9, 9, 9, 5, 2, 4, 5, 5, 4, 2, 5, 9, 9, 9, 7, 8, 7, 1, 4, 7, 7], [4, 5, 7, 7, 3, 1, 7, 7, 7, 7, 4, 4, 9, 1, 2, 2, 2, 2, 1, 9, 4, 4, 7, 7, 7, 7, 1, 3, 7, 7], [5, 4, 7, 7, 1, 7, 7, 9, 7, 7, 4, 9, 1, 7, 2, 2, 2, 2, 7, 1, 9, 4, 7, 7, 9, 7, 7, 1, 7, 7], [7, 7, 7, 7, 7, 7, 9, 9, 4, 4, 4, 5, 2, 2, 8, 3, 3, 8, 2, 2, 5, 4, 4, 4, 9, 9, 7, 7, 7, 7], [7, 7, 7, 7, 7, 9, 9, 9, 4, 9, 5, 5, 2, 2, 3, 8, 8, 3, 2, 2, 5, 5, 9, 4, 9, 9, 9, 7, 7, 7], [3, 1, 7, 7, 9, 3, 2, 5, 9, 1, 2, 2, 5, 5, 1, 1, 1, 1, 5, 5, 2, 2, 1, 9, 5, 2, 3, 9, 7, 7], [1, 7, 7, 9, 3, 8, 5, 2, 1, 7, 2, 2, 5, 2, 1, 7, 7, 1, 2, 5, 2, 2, 7, 1, 2, 5, 8, 3, 6, 6], [7, 7, 9, 9, 2, 5, 5, 4, 2, 2, 8, 3, 1, 1, 8, 2, 2, 8, 1, 1, 3, 8, 2, 2, 4, 5, 5, 2, 6, 6], [7, 9, 9, 9, 5, 2, 4, 5, 2, 2, 3, 8, 1, 7, 2, 3, 3, 2, 7, 1, 8, 3, 2, 2, 5, 4, 2, 5, 6, 6], [7, 9, 9, 9, 5, 2, 4, 5, 2, 2, 3, 8, 1, 7, 2, 3, 3, 2, 7, 1, 8, 3, 2, 2, 5, 4, 2, 5, 6, 6], [7, 7, 9, 9, 2, 5, 5, 4, 2, 2, 8, 3, 1, 1, 8, 2, 2, 8, 1, 1, 3, 8, 2, 2, 4, 5, 5, 2, 6, 6], [1, 7, 7, 9, 3, 8, 5, 2, 1, 7, 2, 2, 5, 2, 1, 7, 7, 1, 2, 5, 2, 2, 7, 1, 2, 5, 8, 3, 6, 6], [3, 1, 7, 7, 9, 3, 2, 5, 9, 1, 2, 2, 5, 5, 1, 1, 1, 1, 5, 5, 2, 2, 1, 9, 5, 2, 3, 9, 7, 7], [7, 7, 7, 7, 7, 9, 9, 9, 4, 9, 5, 5, 2, 2, 3, 8, 8, 3, 2, 2, 5, 5, 9, 4, 9, 9, 9, 7, 7, 6], [7, 7, 7, 7, 7, 7, 9, 9, 4, 4, 4, 5, 2, 2, 8, 3, 3, 8, 2, 2, 5, 4, 4, 4, 9, 9, 7, 7, 7, 6], [5, 4, 7, 7, 1, 7, 7, 9, 7, 7, 4, 9, 1, 7, 2, 2, 2, 2, 7, 1, 9, 4, 7, 7, 9, 7, 7, 1, 7, 6], [4, 5, 7, 7, 3, 1, 7, 7, 7, 7, 4, 4, 9, 1, 2, 2, 2, 2, 1, 9, 4, 4, 7, 7, 7, 7, 1, 3, 7, 6], [8, 8, 7, 7, 4, 1, 7, 8, 7, 9, 9, 9, 5, 2, 4, 5, 5, 4, 2, 5, 9, 9, 9, 6, 6, 7, 1, 4, 7, 6], [8, 8, 1, 7, 4, 4, 8, 7, 7, 7, 9, 9, 2, 5, 5, 4, 4, 5, 5, 2, 9, 9, 7, 6, 6, 8, 4, 4, 7, 6], [4, 9, 8, 8, 2, 8, 4, 1, 1, 7, 7, 9, 3, 8, 5, 2, 2, 5, 8, 3, 9, 7, 7, 6, 6, 4, 8, 2, 8, 8], [9, 4, 8, 8, 8, 2, 4, 4, 3, 1, 7, 7, 9, 3, 2, 5, 5, 2, 3, 9, 7, 7, 1, 6, 6, 4, 2, 8, 8, 8], [5, 8, 2, 9, 8, 8, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 6, 6, 7, 8, 8, 9, 2], [5, 5, 2, 2, 8, 8, 1, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 1, 8, 8, 2, 2]],
then this grids change to output grids below
[[8, 9, 5, 5, 9, 4, 8, 8, 4, 5, 7, 7, 3, 1, 7, 7, 7, 7, 1, 3, 7, 7, 5, 4, 8, 8, 4, 9, 5, 5], [9, 8, 5, 8, 4, 9, 8, 8, 5, 4, 7, 7, 1, 7, 7, 9, 9, 7, 7, 1, 7, 7, 4, 5, 8, 8, 9, 4, 8, 5], [5, 5, 2, 2, 8, 8, 1, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 1, 8, 8, 2, 2], [5, 8, 2, 9, 8, 8, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9, 2], [9, 4, 8, 8, 8, 2, 4, 4, 3, 1, 7, 7, 9, 3, 2, 5, 5, 2, 3, 9, 7, 7, 1, 3, 4, 4, 2, 8, 8, 8], [4, 9, 8, 8, 2, 8, 4, 1, 1, 7, 7, 9, 3, 8, 5, 2, 2, 5, 8, 3, 9, 7, 7, 1, 1, 4, 8, 2, 8, 8], [8, 8, 1, 7, 4, 4, 8, 7, 7, 7, 9, 9, 2, 5, 5, 4, 4, 5, 5, 2, 9, 9, 7, 7, 7, 8, 4, 4, 7, 1], [8, 8, 7, 7, 4, 1, 7, 8, 7, 9, 9, 9, 5, 2, 4, 5, 5, 4, 2, 5, 9, 9, 9, 7, 8, 7, 1, 4, 7, 7], [4, 5, 7, 7, 3, 1, 7, 7, 7, 7, 4, 4, 9, 1, 2, 2, 2, 2, 1, 9, 4, 4, 7, 7, 7, 7, 1, 3, 7, 7], [5, 4, 7, 7, 1, 7, 7, 9, 7, 7, 4, 9, 1, 7, 2, 2, 2, 2, 7, 1, 9, 4, 7, 7, 9, 7, 7, 1, 7, 7], [7, 7, 7, 7, 7, 7, 9, 9, 4, 4, 4, 5, 2, 2, 8, 3, 3, 8, 2, 2, 5, 4, 4, 4, 9, 9, 7, 7, 7, 7], [7, 7, 7, 7, 7, 9, 9, 9, 4, 9, 5, 5, 2, 2, 3, 8, 8, 3, 2, 2, 5, 5, 9, 4, 9, 9, 9, 7, 7, 7], [3, 1, 7, 7, 9, 3, 2, 5, 9, 1, 2, 2, 5, 5, 1, 1, 1, 1, 5, 5, 2, 2, 1, 9, 5, 2, 3, 9, 7, 7], [1, 7, 7, 9, 3, 8, 5, 2, 1, 7, 2, 2, 5, 2, 1, 7, 7, 1, 2, 5, 2, 2, 7, 1, 2, 5, 8, 3, 9, 7], [7, 7, 9, 9, 2, 5, 5, 4, 2, 2, 8, 3, 1, 1, 8, 2, 2, 8, 1, 1, 3, 8, 2, 2, 4, 5, 5, 2, 9, 9], [7, 9, 9, 9, 5, 2, 4, 5, 2, 2, 3, 8, 1, 7, 2, 3, 3, 2, 7, 1, 8, 3, 2, 2, 5, 4, 2, 5, 9, 9], [7, 9, 9, 9, 5, 2, 4, 5, 2, 2, 3, 8, 1, 7, 2, 3, 3, 2, 7, 1, 8, 3, 2, 2, 5, 4, 2, 5, 9, 9], [7, 7, 9, 9, 2, 5, 5, 4, 2, 2, 8, 3, 1, 1, 8, 2, 2, 8, 1, 1, 3, 8, 2, 2, 4, 5, 5, 2, 9, 9], [1, 7, 7, 9, 3, 8, 5, 2, 1, 7, 2, 2, 5, 2, 1, 7, 7, 1, 2, 5, 2, 2, 7, 1, 2, 5, 8, 3, 9, 7], [3, 1, 7, 7, 9, 3, 2, 5, 9, 1, 2, 2, 5, 5, 1, 1, 1, 1, 5, 5, 2, 2, 1, 9, 5, 2, 3, 9, 7, 7], [7, 7, 7, 7, 7, 9, 9, 9, 4, 9, 5, 5, 2, 2, 3, 8, 8, 3, 2, 2, 5, 5, 9, 4, 9, 9, 9, 7, 7, 7], [7, 7, 7, 7, 7, 7, 9, 9, 4, 4, 4, 5, 2, 2, 8, 3, 3, 8, 2, 2, 5, 4, 4, 4, 9, 9, 7, 7, 7, 7], [5, 4, 7, 7, 1, 7, 7, 9, 7, 7, 4, 9, 1, 7, 2, 2, 2, 2, 7, 1, 9, 4, 7, 7, 9, 7, 7, 1, 7, 7], [4, 5, 7, 7, 3, 1, 7, 7, 7, 7, 4, 4, 9, 1, 2, 2, 2, 2, 1, 9, 4, 4, 7, 7, 7, 7, 1, 3, 7, 7], [8, 8, 7, 7, 4, 1, 7, 8, 7, 9, 9, 9, 5, 2, 4, 5, 5, 4, 2, 5, 9, 9, 9, 7, 8, 7, 1, 4, 7, 7], [8, 8, 1, 7, 4, 4, 8, 7, 7, 7, 9, 9, 2, 5, 5, 4, 4, 5, 5, 2, 9, 9, 7, 7, 7, 8, 4, 4, 7, 1], [4, 9, 8, 8, 2, 8, 4, 1, 1, 7, 7, 9, 3, 8, 5, 2, 2, 5, 8, 3, 9, 7, 7, 1, 1, 4, 8, 2, 8, 8], [9, 4, 8, 8, 8, 2, 4, 4, 3, 1, 7, 7, 9, 3, 2, 5, 5, 2, 3, 9, 7, 7, 1, 3, 4, 4, 2, 8, 8, 8], [5, 8, 2, 9, 8, 8, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9, 2], [5, 5, 2, 2, 8, 8, 1, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 1, 8, 8, 2, 2]].

Example 2
If input grids are like that
[[9, 3, 7, 7, 3, 3, 9, 4, 3, 3, 5, 5, 7, 1, 2, 3, 3, 2, 1, 7, 5, 6, 6, 6, 6, 6, 6, 3, 7, 7], [3, 9, 7, 9, 3, 9, 4, 9, 3, 3, 5, 5, 1, 1, 3, 3, 3, 3, 1, 1, 5, 6, 6, 6, 6, 6, 6, 3, 9, 7], [7, 7, 5, 3, 9, 4, 8, 5, 5, 5, 3, 3, 2, 3, 1, 1, 1, 1, 3, 2, 3, 3, 5, 5, 5, 8, 4, 9, 3, 5], [7, 9, 3, 3, 4, 9, 5, 8, 5, 5, 3, 3, 3, 3, 1, 7, 7, 1, 3, 3, 3, 3, 5, 5, 8, 5, 9, 4, 3, 3], [3, 3, 9, 4, 3, 5, 7, 2, 7, 1, 2, 3, 7, 6, 6, 6, 4, 7, 3, 7, 3, 2, 1, 7, 2, 7, 5, 3, 4, 9], [3, 9, 4, 9, 5, 5, 2, 1, 1, 1, 3, 3, 3, 6, 6, 6, 7, 4, 7, 3, 3, 3, 1, 1, 1, 2, 5, 5, 9, 4], [9, 4, 8, 5, 7, 2, 4, 4, 2, 3, 1, 1, 7, 6, 6, 6, 9, 5, 4, 7, 1, 1, 3, 2, 4, 4, 2, 7, 5, 8], [4, 9, 5, 8, 2, 1, 4, 2, 3, 3, 1, 7, 4, 6, 6, 6, 1, 9, 7, 4, 7, 1, 3, 3, 2, 4, 1, 2, 8, 5], [3, 3, 5, 5, 7, 1, 2, 3, 3, 3, 1, 4, 8, 5, 8, 3, 3, 8, 5, 8, 4, 1, 3, 3, 3, 2, 1, 7, 5, 5], [3, 3, 5, 5, 1, 1, 3, 3, 3, 3, 4, 1, 5, 8, 3, 2, 2, 3, 8, 5, 1, 4, 3, 3, 3, 3, 1, 1, 5, 5], [5, 5, 3, 3, 2, 3, 1, 1, 1, 4, 9, 7, 8, 3, 7, 7, 7, 7, 3, 8, 7, 9, 4, 1, 1, 1, 3, 2, 3, 3], [5, 5, 3, 3, 3, 3, 1, 7, 4, 1, 7, 9, 3, 2, 7, 5, 5, 7, 2, 3, 9, 7, 1, 4, 7, 1, 3, 3, 3, 3], [7, 1, 2, 3, 7, 3, 7, 4, 8, 5, 8, 3, 8, 1, 4, 8, 8, 4, 1, 8, 3, 8, 5, 8, 4, 7, 3, 7, 3, 2], [1, 1, 3, 3, 3, 7, 4, 7, 5, 8, 3, 2, 1, 1, 8, 4, 4, 8, 1, 6, 6, 6, 6, 6, 6, 4, 7, 3, 3, 3], [2, 3, 1, 1, 7, 4, 5, 9, 8, 3, 7, 7, 4, 8, 7, 7, 7, 7, 8, 6, 6, 6, 6, 6, 6, 5, 4, 7, 1, 1], [3, 3, 1, 7, 4, 7, 9, 1, 3, 2, 7, 5, 8, 4, 7, 1, 1, 7, 4, 8, 5, 7, 2, 3, 1, 9, 7, 4, 7, 1], [3, 3, 1, 7, 4, 7, 9, 1, 3, 2, 7, 5, 8, 4, 7, 1, 1, 7, 4, 8, 5, 7, 2, 3, 1, 9, 7, 4, 7, 1], [2, 3, 1, 1, 7, 4, 5, 9, 8, 3, 7, 7, 4, 8, 7, 7, 7, 7, 8, 4, 7, 7, 3, 8, 9, 5, 4, 7, 1, 1], [1, 1, 3, 3, 3, 7, 4, 7, 5, 8, 3, 2, 1, 1, 8, 4, 4, 8, 1, 1, 2, 3, 8, 5, 7, 4, 7, 3, 3, 3], [7, 1, 2, 3, 7, 3, 7, 4, 8, 5, 8, 3, 8, 1, 4, 8, 8, 4, 1, 8, 3, 8, 5, 8, 4, 7, 3, 7, 3, 2], [5, 5, 3, 3, 3, 3, 1, 7, 4, 1, 7, 9, 3, 2, 7, 5, 5, 7, 2, 3, 9, 7, 1, 4, 7, 1, 3, 3, 3, 3], [5, 5, 3, 3, 2, 3, 1, 1, 1, 4, 9, 7, 8, 3, 7, 7, 7, 7, 3, 8, 7, 9, 4, 1, 1, 1, 3, 2, 3, 3], [3, 3, 5, 5, 1, 1, 3, 3, 3, 3, 4, 1, 5, 8, 3, 2, 2, 3, 8, 5, 1, 4, 3, 3, 3, 3, 1, 1, 5, 5], [3, 3, 5, 5, 7, 1, 2, 3, 3, 3, 1, 4, 8, 5, 8, 3, 3, 8, 5, 8, 4, 1, 3, 3, 3, 2, 1, 7, 5, 5], [4, 9, 5, 8, 2, 1, 4, 2, 3, 3, 1, 7, 4, 7, 9, 1, 1, 9, 7, 4, 7, 1, 3, 3, 2, 4, 1, 2, 8, 5], [9, 4, 8, 5, 7, 2, 4, 4, 2, 3, 1, 1, 7, 4, 5, 9, 9, 5, 4, 7, 1, 1, 3, 2, 4, 4, 2, 7, 5, 8], [3, 9, 4, 9, 5, 5, 2, 1, 1, 1, 3, 3, 3, 7, 4, 7, 7, 4, 7, 3, 3, 3, 1, 1, 1, 2, 5, 5, 9, 4], [3, 3, 9, 4, 3, 6, 6, 6, 7, 1, 2, 3, 7, 3, 7, 4, 4, 7, 3, 7, 3, 2, 1, 7, 2, 7, 5, 3, 4, 9], [7, 9, 3, 3, 4, 6, 6, 6, 5, 5, 3, 3, 3, 3, 1, 7, 7, 1, 3, 3, 3, 3, 5, 5, 8, 5, 9, 4, 3, 3], [7, 7, 5, 3, 9, 6, 6, 6, 5, 5, 3, 3, 2, 3, 1, 1, 1, 1, 3, 2, 3, 3, 5, 5, 5, 8, 4, 9, 3, 5]],
then this grids change to output grids below
[[9, 3, 7, 7, 3, 3, 9, 4, 3, 3, 5, 5, 7, 1, 2, 3, 3, 2, 1, 7, 5, 5, 3, 3, 4, 9, 3, 3, 7, 7], [3, 9, 7, 9, 3, 9, 4, 9, 3, 3, 5, 5, 1, 1, 3, 3, 3, 3, 1, 1, 5, 5, 3, 3, 9, 4, 9, 3, 9, 7], [7, 7, 5, 3, 9, 4, 8, 5, 5, 5, 3, 3, 2, 3, 1, 1, 1, 1, 3, 2, 3, 3, 5, 5, 5, 8, 4, 9, 3, 5], [7, 9, 3, 3, 4, 9, 5, 8, 5, 5, 3, 3, 3, 3, 1, 7, 7, 1, 3, 3, 3, 3, 5, 5, 8, 5, 9, 4, 3, 3], [3, 3, 9, 4, 3, 5, 7, 2, 7, 1, 2, 3, 7, 3, 7, 4, 4, 7, 3, 7, 3, 2, 1, 7, 2, 7, 5, 3, 4, 9], [3, 9, 4, 9, 5, 5, 2, 1, 1, 1, 3, 3, 3, 7, 4, 7, 7, 4, 7, 3, 3, 3, 1, 1, 1, 2, 5, 5, 9, 4], [9, 4, 8, 5, 7, 2, 4, 4, 2, 3, 1, 1, 7, 4, 5, 9, 9, 5, 4, 7, 1, 1, 3, 2, 4, 4, 2, 7, 5, 8], [4, 9, 5, 8, 2, 1, 4, 2, 3, 3, 1, 7, 4, 7, 9, 1, 1, 9, 7, 4, 7, 1, 3, 3, 2, 4, 1, 2, 8, 5], [3, 3, 5, 5, 7, 1, 2, 3, 3, 3, 1, 4, 8, 5, 8, 3, 3, 8, 5, 8, 4, 1, 3, 3, 3, 2, 1, 7, 5, 5], [3, 3, 5, 5, 1, 1, 3, 3, 3, 3, 4, 1, 5, 8, 3, 2, 2, 3, 8, 5, 1, 4, 3, 3, 3, 3, 1, 1, 5, 5], [5, 5, 3, 3, 2, 3, 1, 1, 1, 4, 9, 7, 8, 3, 7, 7, 7, 7, 3, 8, 7, 9, 4, 1, 1, 1, 3, 2, 3, 3], [5, 5, 3, 3, 3, 3, 1, 7, 4, 1, 7, 9, 3, 2, 7, 5, 5, 7, 2, 3, 9, 7, 1, 4, 7, 1, 3, 3, 3, 3], [7, 1, 2, 3, 7, 3, 7, 4, 8, 5, 8, 3, 8, 1, 4, 8, 8, 4, 1, 8, 3, 8, 5, 8, 4, 7, 3, 7, 3, 2], [1, 1, 3, 3, 3, 7, 4, 7, 5, 8, 3, 2, 1, 1, 8, 4, 4, 8, 1, 1, 2, 3, 8, 5, 7, 4, 7, 3, 3, 3], [2, 3, 1, 1, 7, 4, 5, 9, 8, 3, 7, 7, 4, 8, 7, 7, 7, 7, 8, 4, 7, 7, 3, 8, 9, 5, 4, 7, 1, 1], [3, 3, 1, 7, 4, 7, 9, 1, 3, 2, 7, 5, 8, 4, 7, 1, 1, 7, 4, 8, 5, 7, 2, 3, 1, 9, 7, 4, 7, 1], [3, 3, 1, 7, 4, 7, 9, 1, 3, 2, 7, 5, 8, 4, 7, 1, 1, 7, 4, 8, 5, 7, 2, 3, 1, 9, 7, 4, 7, 1], [2, 3, 1, 1, 7, 4, 5, 9, 8, 3, 7, 7, 4, 8, 7, 7, 7, 7, 8, 4, 7, 7, 3, 8, 9, 5, 4, 7, 1, 1], [1, 1, 3, 3, 3, 7, 4, 7, 5, 8, 3, 2, 1, 1, 8, 4, 4, 8, 1, 1, 2, 3, 8, 5, 7, 4, 7, 3, 3, 3], [7, 1, 2, 3, 7, 3, 7, 4, 8, 5, 8, 3, 8, 1, 4, 8, 8, 4, 1, 8, 3, 8, 5, 8, 4, 7, 3, 7, 3, 2], [5, 5, 3, 3, 3, 3, 1, 7, 4, 1, 7, 9, 3, 2, 7, 5, 5, 7, 2, 3, 9, 7, 1, 4, 7, 1, 3, 3, 3, 3], [5, 5, 3, 3, 2, 3, 1, 1, 1, 4, 9, 7, 8, 3, 7, 7, 7, 7, 3, 8, 7, 9, 4, 1, 1, 1, 3, 2, 3, 3], [3, 3, 5, 5, 1, 1, 3, 3, 3, 3, 4, 1, 5, 8, 3, 2, 2, 3, 8, 5, 1, 4, 3, 3, 3, 3, 1, 1, 5, 5], [3, 3, 5, 5, 7, 1, 2, 3, 3, 3, 1, 4, 8, 5, 8, 3, 3, 8, 5, 8, 4, 1, 3, 3, 3, 2, 1, 7, 5, 5], [4, 9, 5, 8, 2, 1, 4, 2, 3, 3, 1, 7, 4, 7, 9, 1, 1, 9, 7, 4, 7, 1, 3, 3, 2, 4, 1, 2, 8, 5], [9, 4, 8, 5, 7, 2, 4, 4, 2, 3, 1, 1, 7, 4, 5, 9, 9, 5, 4, 7, 1, 1, 3, 2, 4, 4, 2, 7, 5, 8], [3, 9, 4, 9, 5, 5, 2, 1, 1, 1, 3, 3, 3, 7, 4, 7, 7, 4, 7, 3, 3, 3, 1, 1, 1, 2, 5, 5, 9, 4], [3, 3, 9, 4, 3, 5, 7, 2, 7, 1, 2, 3, 7, 3, 7, 4, 4, 7, 3, 7, 3, 2, 1, 7, 2, 7, 5, 3, 4, 9], [7, 9, 3, 3, 4, 9, 5, 8, 5, 5, 3, 3, 3, 3, 1, 7, 7, 1, 3, 3, 3, 3, 5, 5, 8, 5, 9, 4, 3, 3], [7, 7, 5, 3, 9, 4, 8, 5, 5, 5, 3, 3, 2, 3, 1, 1, 1, 1, 3, 2, 3, 3, 5, 5, 5, 8, 4, 9, 3, 5]].

Quiz
If input grids are like that
[[5, 4, 4, 8, 1, 1, 5, 5, 8, 6, 6, 6, 6, 6, 6, 6, 6, 8, 3, 8, 3, 1, 5, 8, 5, 5, 1, 1, 8, 4], [4, 8, 8, 8, 1, 1, 5, 8, 5, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 3, 7, 3, 1, 5, 8, 5, 1, 1, 8, 8], [4, 8, 5, 2, 5, 5, 2, 2, 1, 6, 6, 6, 6, 6, 6, 6, 6, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [1, 1, 5, 5, 1, 2, 4, 3, 8, 6, 6, 6, 6, 6, 6, 6, 6, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [1, 1, 5, 8, 2, 2, 3, 4, 3, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 6, 6, 6, 6, 6, 3, 2], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 6, 6, 6, 6, 6, 3, 1], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 6, 6, 6, 6, 6, 7, 3], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 5, 5, 5, 5, 2, 2, 9, 9, 7, 6, 6, 6, 6, 6, 1, 2], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 2, 4, 9, 1, 6, 6, 6, 6, 6, 8, 1], [8, 3, 8, 8, 7, 2, 9, 5, 4, 5, 2, 2, 4, 3, 5, 7, 7, 5, 3, 4, 2, 2, 5, 6, 6, 6, 6, 6, 8, 8], [3, 8, 8, 2, 2, 7, 5, 9, 5, 5, 2, 9, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 6, 6, 6, 6, 6, 2, 8], [8, 8, 3, 8, 9, 5, 4, 3, 2, 2, 5, 5, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 6, 6, 6, 6, 9, 8, 3], [8, 2, 8, 8, 5, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 6, 6, 6, 6, 5, 8, 8], [8, 2, 8, 8, 5, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 6, 6, 6, 6, 5, 8, 8], [8, 8, 3, 8, 9, 6, 6, 6, 6, 6, 6, 6, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 6, 6, 6, 6, 9, 8, 3], [3, 8, 8, 2, 2, 6, 6, 6, 6, 6, 6, 6, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 5, 9, 5, 7, 2, 2, 8], [8, 3, 8, 8, 7, 6, 6, 6, 6, 6, 6, 6, 4, 3, 5, 7, 7, 5, 3, 6, 6, 6, 6, 4, 5, 9, 2, 7, 8, 8], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 6, 6, 6, 6, 7, 8, 8, 2, 8, 8, 1], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 5, 5, 5, 5, 2, 2, 9, 9, 7, 5, 8, 3, 8, 8, 1, 2], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 1, 2, 8, 8, 3, 7, 3], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 2, 8, 8, 3, 8, 3, 1], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [1, 1, 5, 8, 2, 2, 3, 4, 3, 8, 8, 2, 2, 7, 5, 9, 9, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [1, 1, 5, 5, 1, 2, 4, 3, 8, 3, 8, 8, 7, 2, 9, 5, 5, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 7, 1, 8, 8, 2, 8, 8, 8, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [4, 8, 5, 2, 5, 5, 2, 2, 1, 3, 2, 1, 8, 8, 3, 8, 8, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5]],
then output grids?

=========","The output grids would be:

[[5, 4, 4, 8, 1, 1, 5, 5, 8, 6, 6, 6, 6, 6, 6, 6, 6, 8, 3, 8, 3, 1, 5, 8, 5, 5, 1, 1, 8, 4], [4, 8, 8, 8, 1, 1, 5, 8, 5, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 3, 7, 3, 1, 5, 8, 5, 1, 1, 8, 8], [4, 8, 5, 2, 5, 5, 2, 2, 1, 6, 6, 6, 6, 6, 6, 6, 6, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [1, 1, 5, 5, 1, 2, 4, 3, 8, 6, 6, 6, 6, 6, 6, 6, 6, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [1, 1, 5, 8, 2, 2, 3, 4, 3, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 2, 8, 8, 3, 8, 3, 1], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 1, 2, 8, 8, 3, 7, 3], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 5, 5, 5, 5, 2, 2, 9, 9, 7, 5, 8, 3, 8, 8, 1, 2], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 2, 4, 9, 1, 7, 5, 1, 2, 8, 8, 1], [8, 3, 8, 8, 7, 2, 9, 5, 4, 5, 2, 2, 4, 3, 5, 7, 7, 5, 3, 4, 2, 2, 5, 1, 2, 8, 8, 3, 7, 3], [3, 8, 8, 2, 2, 7, 5, 9, 5, 5, 2, 9, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 2, 8, 8, 3, 8, 3, 2], [8, 8, 3, 8, 9, 5, 4, 3, 2, 2, 5, 5, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 8, 8, 3, 8, 8, 3, 1], [8, 2, 8, 8, 5, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 6, 6, 6, 6, 5, 8, 8], [8, 2, 8, 8, 5, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 6, 6, 6, 6, 5, 8, 8], [8, 8, 3, 8, 9, 6, 6, 6, 6, 6, 6, 6, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 6, 6, 6, 6, 9, 8, 3], [3, 8, 8, 2, 2, 6, 6, 6, 6, 6, 6, 6, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 5, 9, 5, 7, 2, 2, 8], [8, 3, 8, 8, 7, 6, 6, 6, 6, 6, 6, 6, 4, 3, 5, 7, 7, 5, 3, 6, 6, 6, 6, 4, 5, 9, 2, 7, 8, 8], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 2, 4, 9, 1, 7, 5, 1, 2, 8, 8, 1], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 5, 5, 5, 5, 2, 2, 9, 9, 7, 5, 8, 3, 8, 8, 1, 2], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 1, 2, 8, 8, 3, 7, 3], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 2, 8, 8, 3, 8, 3, 1], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [1, 1, 5, 8, 2, 2, 3, 4, 3, 8, 8, 2, 2, 7, 5, 9, 9, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [1, 1, 5, 5, 1, 2, 4, 3, 8, 3, 8, 8, 7, 2, 9, 5, 5, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 7, 1, 8, 8, 2, 8, 8, 8, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [4, 8, 5, 2, 5, 5, 2, 2, 1, 3, 2, 1, 8, 8, 3, 8, 8, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5]]","[[5, 4, 4, 8, 1, 1, 5, 5, 8, 6, 6, 6, 6, 6, 6, 6, 6, 8, 3, 8, 3, 1, 5, 8, 5, 5, 1, 1, 8, 4], [4, 8, 8, 8, 1, 1, 5, 8, 5, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 3, 7, 3, 1, 5, 8, 5, 1, 1, 8, 8], [4, 8, 5, 2, 5, 5, 2, 2, 1, 6, 6, 6, 6, 6, 6, 6, 6, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [1, 1, 5, 5, 1, 2, 4, 3, 8, 6, 6, 6, 6, 6, 6, 6, 6, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [1, 1, 5, 8, 2, 2, 3, 4, 3, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 2, 8, 8, 3, 8, 3, 1], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 1, 2, 8, 8, 3, 7, 3], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 5, 5, 5, 5, 2, 2, 9, 9, 7, 5, 8, 3, 8, 8, 1, 2], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 2, 4, 9, 1, 7, 5, 1, 2, 8, 8, 1], [8, 3, 8, 8, 7, 2, 9, 5, 4, 5, 2, 2, 4, 3, 5, 7, 7, 5, 3, 4, 2, 2, 5, 1, 2, 8, 8, 3, 7, 3], [3, 8, 8, 2, 2, 7, 5, 9, 5, 5, 2, 9, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 2, 8, 8, 3, 8, 3, 2], [8, 8, 3, 8, 9, 5, 4, 3, 2, 2, 5, 5, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 8, 8, 3, 8, 8, 3, 1], [8, 2, 8, 8, 5, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 6, 6, 6, 6, 5, 8, 8], [8, 2, 8, 8, 5, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 6, 6, 6, 6, 5, 8, 8], [8, 8, 3, 8, 9, 6, 6, 6, 6, 6, 6, 6, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 6, 6, 6, 6, 9, 8, 3], [3, 8, 8, 2, 2, 6, 6, 6, 6, 6, 6, 6, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 5, 9, 5, 7, 2, 2, 8], [8, 3, 8, 8, 7, 6, 6, 6, 6, 6, 6, 6, 4, 3, 5, 7, 7, 5, 3, 6, 6, 6, 6, 4, 5, 9, 2, 7, 8, 8], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 2, 4, 9, 1, 7, 5, 1, 2, 8, 8, 1], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 5, 5, 5, 5, 2, 2, 9, 9, 7, 5, 8, 3, 8, 8, 1, 2], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 1, 2, 8, 8, 3, 7, 3], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 2, 8, 8, 3, 8, 3, 1], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [1, 1, 5, 8, 2, 2, 3, 4, 3, 8, 8, 2, 2, 7, 5, 9, 9, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [1, 1, 5, 5, 1, 2, 4, 3, 8, 3, 8, 8, 7, 2, 9, 5, 5, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 7, 1, 8, 8, 2, 8, 8, 8, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [4, 8, 5, 2, 5, 5, 2, 2, 1, 3, 2, 1, 8, 8, 3, 8, 8, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5]]","[[5, 4, 4, 8, 1, 1, 5, 5, 8, 6, 6, 6, 6, 6, 6, 6, 6, 8, 3, 8, 3, 1, 5, 8, 5, 5, 1, 1, 8, 4], [4, 8, 8, 8, 1, 1, 5, 8, 5, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 3, 7, 3, 1, 5, 8, 5, 1, 1, 8, 8], [4, 8, 5, 2, 5, 5, 2, 2, 1, 6, 6, 6, 6, 6, 6, 6, 6, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [1, 1, 5, 5, 1, 2, 4, 3, 8, 6, 6, 6, 6, 6, 6, 6, 6, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [1, 1, 5, 8, 2, 2, 3, 4, 3, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 2, 8, 8, 3, 8, 3, 1], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 1, 2, 8, 8, 3, 7, 3], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 5, 5, 5, 5, 2, 2, 9, 9, 7, 5, 8, 3, 8, 8, 1, 2], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 2, 4, 9, 1, 7, 5, 1, 2, 8, 8, 1], [8, 3, 8, 8, 7, 2, 9, 5, 4, 5, 2, 2, 4, 3, 5, 7, 7, 5, 3, 4, 2, 2, 5, 1, 2, 8, 8, 3, 7, 3], [3, 8, 8, 2, 2, 7, 5, 9, 5, 5, 2, 9, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 2, 8, 8, 3, 8, 3, 2], [8, 8, 3, 8, 9, 5, 4, 3, 2, 2, 5, 5, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 8, 8, 3, 8, 8, 3, 1], [8, 2, 8, 8, 5, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 6, 6, 6, 6, 5, 8, 8], [8, 2, 8, 8, 5, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 6, 6, 6, 6, 5, 8, 8], [8, 8, 3, 8, 9, 6, 6, 6, 6, 6, 6, 6, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 6, 6, 6, 6, 9, 8, 3], [3, 8, 8, 2, 2, 6, 6, 6, 6, 6, 6, 6, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 5, 9, 5, 7, 2, 2, 8], [8, 3, 8, 8, 7, 6, 6, 6, 6, 6, 6, 6, 4, 3, 5, 7, 7, 5, 3, 6, 6, 6, 6, 4, 5, 9, 2, 7, 8, 8], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 2, 4, 9, 1, 7, 5, 1, 2, 8, 8, 1], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 5, 5, 5, 5, 2, 2, 9, 9, 7, 5, 8, 3, 8, 8, 1, 2], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 1, 2, 8, 8, 3, 7, 3], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 2, 8, 8, 3, 8, 3, 1], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [1, 1, 5, 8, 2, 2, 3, 4, 3, 8, 8, 2, 2, 7, 5, 9, 9, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [1, 1, 5, 5, 1, 2, 4, 3, 8, 3, 8, 8, 7, 2, 9, 5, 5, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 7, 1, 8, 8, 2, 8, 8, 8, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [4, 8, 5, 2, 5, 5, 2, 2, 1, 3, 2, 1, 8, 8, 3, 8, 8, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5]]","[[5, 4, 4, 8, 1, 1, 5, 5, 8, 5, 1, 3, 8, 3, 8, 8, 8, 8, 3, 8, 3, 1, 5, 8, 5, 5, 1, 1, 8, 4], [4, 8, 8, 8, 1, 1, 5, 8, 5, 1, 3, 7, 3, 8, 8, 2, 2, 8, 8, 3, 7, 3, 1, 5, 8, 5, 1, 1, 8, 8], [4, 8, 5, 2, 5, 5, 2, 2, 1, 3, 2, 1, 8, 8, 3, 8, 8, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 7, 1, 8, 8, 2, 8, 8, 8, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [1, 1, 5, 5, 1, 2, 4, 3, 8, 3, 8, 8, 7, 2, 9, 5, 5, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [1, 1, 5, 8, 2, 2, 3, 4, 3, 8, 8, 2, 2, 7, 5, 9, 9, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 2, 8, 8, 3, 8, 3, 1], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 1, 2, 8, 8, 3, 7, 3], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 5, 5, 5, 5, 2, 2, 9, 9, 7, 5, 8, 3, 8, 8, 1, 2], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 2, 4, 9, 1, 7, 8, 8, 2, 8, 8, 1], [8, 3, 8, 8, 7, 2, 9, 5, 4, 5, 2, 2, 4, 3, 5, 7, 7, 5, 3, 4, 2, 2, 5, 4, 5, 9, 2, 7, 8, 8], [3, 8, 8, 2, 2, 7, 5, 9, 5, 5, 2, 9, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 5, 9, 5, 7, 2, 2, 8], [8, 8, 3, 8, 9, 5, 4, 3, 2, 2, 5, 5, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 2, 3, 4, 5, 9, 8, 3], [8, 2, 8, 8, 5, 9, 3, 3, 2, 9, 5, 5, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 2, 3, 3, 9, 5, 8, 8], [8, 2, 8, 8, 5, 9, 3, 3, 2, 9, 5, 5, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 2, 3, 3, 9, 5, 8, 8], [8, 8, 3, 8, 9, 5, 4, 3, 2, 2, 5, 5, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 2, 3, 4, 5, 9, 8, 3], [3, 8, 8, 2, 2, 7, 5, 9, 5, 5, 2, 9, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 5, 9, 5, 7, 2, 2, 8], [8, 3, 8, 8, 7, 2, 9, 5, 4, 5, 2, 2, 4, 3, 5, 7, 7, 5, 3, 4, 2, 2, 5, 4, 5, 9, 2, 7, 8, 8], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 2, 4, 9, 1, 7, 8, 8, 2, 8, 8, 1], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 5, 5, 5, 5, 2, 2, 9, 9, 7, 5, 8, 3, 8, 8, 1, 2], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 1, 2, 8, 8, 3, 7, 3], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 2, 8, 8, 3, 8, 3, 1], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [1, 1, 5, 8, 2, 2, 3, 4, 3, 8, 8, 2, 2, 7, 5, 9, 9, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [1, 1, 5, 5, 1, 2, 4, 3, 8, 3, 8, 8, 7, 2, 9, 5, 5, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 7, 1, 8, 8, 2, 8, 8, 8, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [4, 8, 5, 2, 5, 5, 2, 2, 1, 3, 2, 1, 8, 8, 3, 8, 8, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5]]",FALSE,
48131b3c,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 8, 0], [8, 0, 8], [0, 0, 0]],
then this grids change to output grids below
[[8, 0, 8, 8, 0, 8], [0, 8, 0, 0, 8, 0], [8, 8, 8, 8, 8, 8], [8, 0, 8, 8, 0, 8], [0, 8, 0, 0, 8, 0], [8, 8, 8, 8, 8, 8]].

Example 2
If input grids are like that
[[7, 0], [0, 7]],
then this grids change to output grids below
[[0, 7, 0, 7], [7, 0, 7, 0], [0, 7, 0, 7], [7, 0, 7, 0]].

Quiz
If input grids are like that
[[0, 1, 0, 1], [1, 0, 0, 1], [0, 0, 1, 0], [1, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that the input grid is mirrored both horizontally and vertically to form the output grid. 

So, if the input grid is 
[[0, 1, 0, 1], [1, 0, 0, 1], [0, 0, 1, 0], [1, 0, 0, 0]],

then the output grid would be
[[0, 1, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0]].","[[0, 1, 0, 1], [1, 0, 0, 1], [0, 0, 1, 0], [1, 0, 0, 0]],

then the output grid would be
[[0, 1, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0]]","[[0, 1, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0]]","[[1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1, 0], [1, 1, 0, 1, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1, 0], [1, 1, 0, 1, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1]]",FALSE,
4852f2fa,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 0, 4, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 8, 8, 0, 8, 8], [8, 8, 8, 8, 8, 8], [0, 8, 0, 8, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 8, 0], [8, 8, 0], [0, 8, 8]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 8, 0, 8, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem seems to be that the output grid is a condensed version of the input grid, where only the rows and columns containing the number 8 are kept. The number 4 is ignored and any empty rows or columns are removed. 

Applying this pattern to the quiz input:

[[0, 0, 0, 0, 0, 8, 8, 0, 0], 
 [0, 0, 0, 0, 0, 8, 0, 8, 0], 
 [0, 0, 0, 0, 0, 8, 8, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [4, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 4, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0]]

We keep only the rows and columns containing the number 8, and remove the rest. The output grid would then be:

[[8, 8], 
 [8, 0, 8], 
 [8, 8]]","[[0, 0, 0, 0, 0, 8, 8, 0, 0], 
 [0, 0, 0, 0, 0, 8, 0, 8, 0], 
 [0, 0, 0, 0, 0, 8, 8, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [4, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 4, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0]]

We keep only the rows and columns containing the number 8, and remove the rest. The output grid would then be:

[[8, 8], 
 [8, 0, 8], 
 [8, 8]]","[[8, 8], 
 [8, 0, 8], 
 [8, 8]]","[[8, 8, 0, 8, 8, 0], [8, 0, 8, 8, 0, 8], [8, 8, 0, 8, 8, 0]]",FALSE,
48f8583b,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[9, 9, 6], [3, 8, 8], [8, 3, 3]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 9, 9, 6], [0, 0, 0, 0, 0, 0, 3, 8, 8], [0, 0, 0, 0, 0, 0, 8, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[8, 5, 5], [8, 8, 8], [5, 9, 9]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 5, 5, 8, 5, 5], [0, 0, 0, 8, 8, 8, 8, 8, 8], [0, 0, 0, 5, 9, 9, 5, 9, 9]].

Quiz
If input grids are like that
[[9, 7, 9], [9, 9, 7], [7, 9, 7]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 9, 7, 9, 9, 7, 9], [0, 0, 0, 9, 9, 7, 9, 9, 7], [0, 0, 0, 7, 9, 7, 7, 9, 7]].

The pattern here is that the original 3x3 grid is moved to the bottom right corner of a new 9x9 grid, and the rest of the cells in the new grid are filled with 0s.","[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 9, 7, 9, 9, 7, 9], [0, 0, 0, 9, 9, 7, 9, 9, 7], [0, 0, 0, 7, 9, 7, 7, 9, 7]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 9, 7, 9, 9, 7, 9], [0, 0, 0, 9, 9, 7, 9, 9, 7], [0, 0, 0, 7, 9, 7, 7, 9, 7]]","[[0, 0, 0, 9, 7, 9, 0, 0, 0], [0, 0, 0, 9, 9, 7, 0, 0, 0], [0, 0, 0, 7, 9, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 9, 7, 9], [0, 0, 0, 0, 0, 0, 9, 9, 7], [0, 0, 0, 0, 0, 0, 7, 9, 7], [9, 7, 9, 0, 0, 0, 9, 7, 9], [9, 9, 7, 0, 0, 0, 9, 9, 7], [7, 9, 7, 0, 0, 0, 7, 9, 7]]",FALSE,
4aab4007,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5], [1, 1, 4, 2, 3, 5, 7, 2, 4, 6, 0, 0, 0, 0, 0, 0, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7], [1, 1, 4, 1, 5, 7, 2, 4, 6, 1, 0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2], [1, 1, 4, 5, 7, 2, 4, 6, 1, 3, 0, 0, 0, 0, 0, 0, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4], [1, 1, 4, 7, 2, 4, 6, 1, 3, 5, 0, 0, 0, 0, 0, 0, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6], [1, 1, 4, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1], [1, 1, 4, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 0, 0, 0, 0, 0, 2, 4, 6, 1, 3], [1, 1, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 0, 0, 0, 0, 0, 4, 6, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 0, 0, 0, 0, 0, 6, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 0, 0, 0, 0, 0, 1, 3, 5, 7, 2], [1, 1, 4, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 0, 0, 0, 0, 0, 3, 5, 7, 2, 4], [1, 1, 4, 7, 0, 0, 0, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 0, 0, 0, 0, 0, 5, 7, 2, 4, 6], [1, 1, 4, 2, 0, 0, 0, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1], [1, 1, 4, 4, 0, 0, 0, 0, 0, 0, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3], [1, 1, 4, 6, 0, 0, 0, 0, 0, 0, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5], [1, 1, 4, 1, 0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7], [1, 1, 4, 3, 0, 0, 0, 0, 0, 0, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2], [1, 1, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4], [1, 1, 4, 7, 2, 4, 6, 0, 0, 0, 0, 0, 0, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6], [1, 1, 4, 2, 4, 6, 1, 0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1], [1, 1, 4, 4, 6, 1, 3, 0, 0, 0, 0, 0, 0, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3], [1, 1, 4, 6, 1, 3, 5, 0, 0, 0, 0, 0, 0, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 0, 0, 0, 0, 0, 0, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2], [1, 1, 4, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4]],
then this grids change to output grids below
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5], [1, 1, 4, 2, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7], [1, 1, 4, 1, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2], [1, 1, 4, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4], [1, 1, 4, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6], [1, 1, 4, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1], [1, 1, 4, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3], [1, 1, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2], [1, 1, 4, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4], [1, 1, 4, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6], [1, 1, 4, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1], [1, 1, 4, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3], [1, 1, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2], [1, 1, 4, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4], [1, 1, 4, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6], [1, 1, 4, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1], [1, 1, 4, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3], [1, 1, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2], [1, 1, 4, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4]].

Example 2
If input grids are like that
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 3, 5, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 2, 1, 3, 5, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 0, 0, 0, 0, 0, 0, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 0, 0, 0, 0, 0, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 0, 0, 0, 0, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 0, 0, 0, 0, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 0, 0, 0, 0, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 0, 0, 0, 0, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 0, 0, 0, 0, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 0, 0, 0, 0, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5]],
then this grids change to output grids below
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 2, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5]].

Quiz
If input grids are like that
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 9, 1, 3, 5, 7, 0, 0, 0, 0, 0, 0, 0, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 1, 4, 2, 7, 9, 1, 3, 5, 7, 9, 0, 0, 0, 0, 0, 0, 0, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 1, 9, 1, 3, 5, 7, 9, 1, 0, 0, 0, 0, 0, 0, 0, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 0, 0, 0, 0, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 0, 0, 0, 0, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 0, 0, 0, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 0, 0, 0, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [0, 0, 0, 0, 0, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [0, 0, 0, 0, 0, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [0, 0, 0, 0, 0, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [0, 0, 0, 0, 0, 9, 1, 3, 5, 0, 0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [0, 0, 0, 0, 0, 1, 3, 5, 7, 0, 0, 0, 0, 0, 0, 0, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [0, 0, 0, 0, 0, 3, 5, 7, 9, 0, 0, 0, 0, 0, 0, 0, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [0, 0, 0, 0, 0, 5, 7, 9, 1, 0, 0, 0, 0, 0, 0, 0, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 9, 1, 3, 0, 0, 0, 0, 0, 0, 0, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 9, 1, 3, 5, 0, 0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9]],
then output grids?

=========","The output grids would be:

[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9], [1, 1, 4, 2, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 1, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3]]

The pattern here is that the numbers in the grid are shifted to the right, filling the empty spaces (0s) in the grid. The numbers are shifted in a cyclic manner, meaning that the numbers that are shifted from the last column appear in the first column.","[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9], [1, 1, 4, 2, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 1, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3]]","[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9], [1, 1, 4, 2, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 1, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3]]","[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 1, 4, 2, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 1, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9]]",FALSE,
4acc7107,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0, 0], [6, 6, 0, 0, 0, 0, 6, 6, 0, 0], [6, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 1, 0, 0, 0, 0, 0], [6, 6, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 0, 0, 1, 1, 1, 0, 0, 0], [6, 6, 0, 1, 1, 1, 1, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 0, 0, 3, 3, 3], [0, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [3, 3, 3, 0, 0, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 0, 4, 4, 4, 0, 0], [3, 3, 0, 0, 0, 0, 4, 4, 0, 0], [3, 3, 0, 0, 0, 0, 4, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 3, 3, 3, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 0, 2, 2, 2, 0], [0, 0, 0, 3, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 3, 3, 3, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 2, 2, 2, 0], [3, 3, 3, 3, 0, 0, 2, 2, 2, 0]]

The pattern in this problem is that the objects (represented by numbers other than 0) are moved down by 3 rows.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 3, 3, 3, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 2, 2, 2, 0], [3, 3, 3, 3, 0, 0, 2, 2, 2, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 3, 3, 3, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 2, 2, 2, 0], [3, 3, 3, 3, 0, 0, 2, 2, 2, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 3, 3, 0], [0, 0, 0, 2, 0, 3, 3, 3, 3, 0], [0, 0, 2, 2, 0, 0, 0, 3, 0, 0]]",FALSE,
4b6b68e5,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 8, 0, 0, 8, 2, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 3, 0, 8, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 5, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 1, 1, 1, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 6, 6, 6, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 6, 0, 3, 0, 0], [0, 0, 2, 2, 2, 0, 3, 0, 0, 0, 2, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 6, 6, 6, 6, 6], [0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0], [3, 0, 0, 0, 0, 0, 0, 4, 8, 0, 3, 0, 8, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 4, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0, 6, 6, 6, 0, 0], [0, 0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0, 6, 0, 0, 0, 0], [0, 0, 2, 2, 2, 3, 3, 3, 3, 3, 2, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 2, 0, 0, 6, 6, 6, 6, 6], [0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 8, 8, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 8, 8, 8, 8, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 8, 8, 8, 8, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 8, 8, 8, 8, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 8, 8, 8, 8, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 8, 8, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 3, 3, 0, 1], [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 2, 0, 6, 0, 0, 8, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 6, 0, 3, 0, 0], [0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 0, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 3, 0, 0, 0, 0, 8, 0, 3, 0, 0], [0, 2, 0, 0, 1, 0, 6, 0, 0, 0, 0, 2, 0, 0, 3, 8, 0, 0, 0, 0, 0, 3, 0, 0], [0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 3, 0, 0, 0, 8, 0, 0, 3, 0, 0], [0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 3, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 3, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 8, 0, 4, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 0, 3, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 7, 0, 2, 0, 1, 0, 7, 0, 0], [0, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0, 7, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 3, 3, 0, 1], [0, 0, 0, 2, 8, 8, 8, 8, 8, 8, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 3, 0, 0, 6, 0, 3, 0, 0], [0, 0, 0, 2, 8, 8, 1, 8, 8, 8, 8, 2, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 0, 0], [0, 2, 2, 2, 8, 8, 1, 8, 8, 8, 1, 2, 0, 0, 3, 0, 0, 0, 0, 8, 0, 3, 0, 0], [0, 2, 8, 8, 1, 8, 6, 8, 8, 8, 8, 2, 0, 0, 3, 8, 0, 0, 0, 0, 0, 3, 0, 0], [0, 2, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 0, 0, 3, 0, 0, 0, 8, 0, 0, 3, 0, 0], [0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 3, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 3, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 8, 0, 4, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 0, 3, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 7, 0, 2, 0, 1, 0, 7, 0, 0], [0, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0, 7, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 3, 3, 0, 1], [0, 0, 0, 2, 8, 8, 8, 8, 8, 8, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 3, 0, 0, 6, 0, 3, 0, 0], [0, 0, 0, 2, 8, 8, 1, 8, 8, 8, 8, 2, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 0, 0], [0, 2, 2, 2, 8, 8, 1, 8, 8, 8, 1, 2, 0, 0, 3, 0, 0, 0, 0, 8, 0, 3, 0, 0], [0, 2, 8, 8, 1, 8, 6, 8, 8, 8, 8, 2, 0, 0, 3, 8, 0, 0, 0, 0, 0, 3, 0, 0], [0, 2, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 0, 0, 3, 0, 0, 0, 8, 0, 0, 3, 0, 0], [0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 3, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 3, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 8, 0, 4, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 0, 3, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 7, 0, 2, 0, 1, 0, 7, 0, 0], [0, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0, 7, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 3, 3, 0, 1], [0, 0, 0, 2, 8, 8, 8, 8, 8, 8, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 3, 0, 0, 6, 0, 3, 0, 0], [0, 0, 0, 2, 8, 8, 1, 8, 8, 8, 8, 2, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 0, 0], [0, 2, 2, 2, 8, 8, 1, 8, 8, 8, 1, 2, 0, 0, 3, 0, 0, 0, 0, 8, 0, 3, 0, 0], [0, 2, 8, 8, 1, 8, 6, 8, 8, 8, 8, 2, 0, 0, 3, 8, 0, 0, 0, 0, 0, 3, 0, 0], [0, 2, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 0, 0, 3, 0, 0, 0, 8, 0, 0, 3, 0, 0], [0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 3, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 3, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 8, 0, 4, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 0, 3, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 7, 0, 2, 0, 1, 0, 7, 0, 0], [0, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0, 7, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 3, 3, 3, 8, 8, 8, 8, 3, 0, 0], [0, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 3, 8, 8, 8, 8, 8, 8, 3, 0, 0], [0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 3, 8, 8, 8, 8, 8, 8, 3, 0, 0], [0, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 0, 0, 3, 8, 8, 8, 8, 8, 8, 3, 0, 0], [0, 2, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 8, 8, 3, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 8, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 8, 8, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 8, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 8, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 4, 4, 4, 4, 4, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 4, 4, 4, 4, 4, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 4, 4, 4, 4, 4, 4, 4, 4, 8, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 4, 4, 4, 4, 4, 4, 4, 4, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 4, 4, 4, 4, 4, 4, 4, 4, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 4, 4, 8, 8, 8, 8, 4, 4, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
4c177718,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 2, 0, 0, 3, 3, 3, 0, 0], [0, 0, 1, 1, 1, 0, 2, 2, 2, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 2, 0, 0, 4, 4, 4, 0, 0], [0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 4, 4, 4, 0, 0], [0, 0, 1, 0, 1, 0, 2, 2, 2, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 8, 8, 0, 0, 0], [0, 0, 1, 1, 0, 0, 2, 2, 2, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

The pattern in this problem is that the objects are moved down to the middle of the grid, replacing the row of 5s. The objects maintain their relative positions to each other, but are centered in the middle of the grid.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",FALSE,
