task_id,prompt,answer,prediction,refine_prediction,label,correct_flag,correct_logic,level
576224,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 6], [6, 4]],
then this grids change to output grids below
[[8, 6, 8, 6, 8, 6], [6, 4, 6, 4, 6, 4], [6, 8, 6, 8, 6, 8], [4, 6, 4, 6, 4, 6], [8, 6, 8, 6, 8, 6], [6, 4, 6, 4, 6, 4]].

Example 2
If input grids are like that
[[7, 9], [4, 3]],
then this grids change to output grids below
[[7, 9, 7, 9, 7, 9], [4, 3, 4, 3, 4, 3], [9, 7, 9, 7, 9, 7], [3, 4, 3, 4, 3, 4], [7, 9, 7, 9, 7, 9], [4, 3, 4, 3, 4, 3]].

Quiz
If input grids are like that
[[3, 2], [7, 8]],
then output grids?

=========","The output grids would be:

[[3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8], [2, 3, 2, 3, 2, 3], [8, 7, 8, 7, 8, 7], [3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8]].

The pattern in this problem is that each row of the input grid is repeated three times in the output grid, and the order of the numbers in each row is reversed every other row.","[[3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8], [2, 3, 2, 3, 2, 3], [8, 7, 8, 7, 8, 7], [3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8]]","[[3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8], [2, 3, 2, 3, 2, 3], [8, 7, 8, 7, 8, 7], [3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8]]","[[3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8], [2, 3, 2, 3, 2, 3], [8, 7, 8, 7, 8, 7], [3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8]]",True,True,Easy
009d5c81,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 8, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 8, 0, 8, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 8, 0, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 0, 3, 0, 3, 3, 0, 0, 0], [0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 0], [0, 0, 0, 0, 3, 3, 0, 3, 0, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 8, 0, 8], [0, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 8], [0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2], [0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern in this problem is that the color of the objects changes from 8 to 2, and the color of the objects changes from 1 to 0.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2], [0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2], [0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7], [0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 7, 0, 7], [0, 0, 0, 0, 0, 7, 0, 7, 0, 7, 0, 0, 0, 7], [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Medium
00dbd492,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[2, 2, 2, 2, 2, 0, 0], [2, 0, 0, 0, 2, 0, 0], [2, 0, 2, 0, 2, 0, 0], [2, 0, 0, 0, 2, 0, 0], [2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[2, 2, 2, 2, 2, 0, 0], [2, 8, 8, 8, 2, 0, 0], [2, 8, 2, 8, 2, 0, 0], [2, 8, 8, 8, 2, 0, 0], [2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[2, 2, 2, 2, 2, 2, 2, 0, 0], [2, 0, 0, 0, 0, 0, 2, 0, 0], [2, 0, 0, 0, 0, 0, 2, 0, 0], [2, 0, 0, 2, 0, 0, 2, 0, 0], [2, 0, 0, 0, 0, 0, 2, 0, 0], [2, 0, 0, 0, 0, 0, 2, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[2, 2, 2, 2, 2, 2, 2, 0, 0], [2, 4, 4, 4, 4, 4, 2, 0, 0], [2, 4, 4, 4, 4, 4, 2, 0, 0], [2, 4, 4, 2, 4, 4, 2, 0, 0], [2, 4, 4, 4, 4, 4, 2, 0, 0], [2, 4, 4, 4, 4, 4, 2, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that the cells inside the ""2"" border are filled with a new color. The new color is determined by the number of cells in the border. In the first example, the border is made up of 16 cells, so the new color is 8 (16 divided by 2). In the second example, the border is made up of 24 cells, so the new color is 4 (24 divided by 6).

Applying this pattern to the quiz, we can see that the border is made up of 60 cells, so the new color is 5 (60 divided by 12). Therefore, the output grids should be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 5, 5, 5, 2, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 2, 5, 2, 5, 2, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 2, 5, 5, 5, 2, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 5, 5, 5, 2, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 2, 5, 5, 5, 2, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 5, 2, 5, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 5, 5, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 5, 5, 2, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 5, 5, 5, 2, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 2, 5, 2, 5, 2, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 2, 5, 5, 5, 2, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 5, 5, 5, 2, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 2, 5, 5, 5, 2, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 5, 2, 5, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 5, 5, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 5, 5, 2, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 5, 5, 5, 2, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 2, 5, 2, 5, 2, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 2, 5, 5, 5, 2, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 5, 5, 5, 2, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 2, 5, 5, 5, 2, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 5, 2, 5, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 5, 5, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 5, 5, 2, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 8, 8, 8, 2, 0, 0, 0, 0], [0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 0, 2, 8, 2, 8, 2, 0, 0, 0, 0], [0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 0, 2, 8, 8, 8, 2, 0, 0, 0, 0], [0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 2, 3, 3, 3, 2, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0, 0, 2, 8, 8, 8, 2, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 8, 2, 8, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 8, 8, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 4, 4, 4, 4, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 4, 4, 4, 4, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 4, 4, 2, 4, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 4, 4, 4, 4, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 4, 4, 4, 4, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Medium
3560426,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4], [1, 1, 0, 0, 0, 0, 0, 0, 0, 4], [1, 1, 0, 2, 2, 0, 3, 3, 0, 4], [1, 1, 0, 2, 2, 0, 3, 3, 0, 4]],
then this grids change to output grids below
[[1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 3, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 7, 7, 0, 2, 2, 2], [8, 8, 8, 0, 7, 7, 0, 2, 2, 2]],
then this grids change to output grids below
[[8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [8, 8, 7, 7, 0, 0, 0, 0, 0, 0], [0, 0, 7, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 8, 8, 0, 6, 0, 0, 0, 0], [7, 0, 8, 8, 0, 6, 0, 3, 3, 0], [7, 0, 8, 8, 0, 6, 0, 3, 3, 0]],
then output grids?

=========","The output grids would be:

[[7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 8, 6, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

The pattern here is that the objects are moving up, with the objects in the lower rows moving up first.","[[7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 8, 6, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 8, 6, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [8, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Medium
0607ce86,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 3, 6, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 3, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 3, 0, 0, 0], [0, 3, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 3, 0, 0, 0, 3, 0, 0], [0, 3, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 3, 6, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 3, 8, 3, 3, 8, 3, 0, 3, 0, 0, 0, 3], [0, 0, 8, 8, 3, 3, 3, 8, 0, 0, 3, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 0], [3, 3, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 3, 6, 6, 6, 0, 3, 6, 6, 6, 3, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 3, 0], [0, 0, 8, 3, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 3, 0, 0, 0, 3, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 1, 1, 1, 2, 3, 3, 0, 3, 0, 0], [0, 1, 1, 3, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 3, 0, 3, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 1, 3, 3, 0, 0, 0, 3], [0, 1, 3, 3, 3, 1, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 1, 3, 3, 3, 0, 3, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 3, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 3, 2, 1, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [1, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 3, 1, 3, 2, 3, 3, 0, 0, 0, 0], [0, 8, 1, 8, 8, 3, 0, 8, 8, 8, 8, 8, 0, 1, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 3, 0], [0, 1, 1, 3, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 1, 3, 3, 0, 1, 1, 2, 3, 1, 0, 0, 0, 0], [1, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 1, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [3, 8, 8, 8, 3, 3, 1, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 3, 0, 3, 0, 1, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 1, 1, 2, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 2, 2, 8, 3, 2, 0, 2, 2, 8, 2, 2, 0, 3, 2, 8, 2, 2, 0, 0, 0, 3], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [3, 8, 8, 3, 3, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 3, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0], [0, 2, 3, 8, 2, 2, 0, 2, 2, 3, 2, 3, 0, 2, 2, 8, 2, 2, 0, 0, 0, 3], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 3, 0, 8, 8, 8, 3, 8, 0, 0, 0, 0], [0, 8, 8, 8, 3, 8, 0, 8, 3, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 3, 0], [0, 3, 3, 3, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 8, 8, 8, 8, 0, 8, 8, 3, 3, 8, 0, 8, 8, 3, 8, 8, 0, 3, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 3, 8, 8, 0, 3, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 3, 0, 0, 0, 0, 3, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 2, 2, 8, 2, 2, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 3, 3, 8, 3, 3, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Hard
0692e18c,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 7, 0], [7, 7, 7], [0, 7, 0]],
then this grids change to output grids below
[[0, 0, 0, 7, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 7, 0, 0, 0], [7, 0, 7, 7, 0, 7, 7, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 7, 7, 0, 7, 7, 0, 7], [0, 0, 0, 7, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 7, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 6], [0, 6, 0], [6, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 6, 6, 0], [0, 0, 0, 0, 0, 0, 6, 0, 6], [0, 0, 0, 0, 0, 0, 0, 6, 6], [0, 0, 0, 6, 6, 0, 0, 0, 0], [0, 0, 0, 6, 0, 6, 0, 0, 0], [0, 0, 0, 0, 6, 6, 0, 0, 0], [6, 6, 0, 0, 0, 0, 0, 0, 0], [6, 0, 6, 0, 0, 0, 0, 0, 0], [0, 6, 6, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 3], [3, 3, 0], [0, 3, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 3, 3, 0], [0, 0, 0, 0, 0, 0, 3, 0, 3], [0, 0, 0, 0, 0, 0, 0, 3, 3], [3, 3, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0], [0, 0, 0, 0, 3, 3, 0, 0, 0]].

The pattern here is that the original 3x3 grid is expanded to a 9x9 grid, where each cell in the original grid is represented by a 3x3 sub-grid in the expanded grid. The value from the original cell is placed in the corners and center of the corresponding sub-grid, with the remaining cells in the sub-grid being filled with 0.","[[0, 0, 0, 0, 0, 0, 3, 3, 0], [0, 0, 0, 0, 0, 0, 3, 0, 3], [0, 0, 0, 0, 0, 0, 0, 3, 3], [3, 3, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0], [0, 0, 0, 0, 3, 3, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 3, 3, 0], [0, 0, 0, 0, 0, 0, 3, 0, 3], [0, 0, 0, 0, 0, 0, 0, 3, 3], [3, 3, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0], [0, 0, 0, 0, 3, 3, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 3, 0, 3], [3, 3, 0, 3, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 3, 0, 0, 0], [3, 0, 3, 3, 0, 3, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0]]",False,,Medium
08573cc6,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 5, 5, 1, 0, 6, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 6, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 2, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 3, 3, 1, 0, 2, 0, 0], [0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 2, 3, 3, 3, 3, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 8, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 8, 0, 2, 2, 1, 0, 0, 0, 8, 0, 0], [0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 8, 0, 8, 2, 2, 2, 2, 2, 8, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

The pattern here is that the objects (2 and 8) are moved to form a square around the center object (1). The square is filled with the first object (2) and the border is made up of the second object (8). The size of the square is determined by the distance of the first object from the top left corner.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 8, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 8, 0, 2, 2, 1, 0, 0, 0, 8, 0, 0], [0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 8, 0, 8, 2, 2, 2, 2, 2, 8, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 8, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 8, 0, 2, 2, 1, 0, 0, 0, 8, 0, 0], [0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 8, 0, 8, 2, 2, 2, 2, 2, 8, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8], [8, 0, 2, 2, 2, 2, 2, 2, 8, 0, 8, 0, 8], [8, 0, 8, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8], [8, 0, 8, 0, 2, 2, 1, 0, 8, 0, 8, 0, 8], [8, 0, 8, 0, 8, 0, 0, 0, 8, 0, 8, 0, 8], [8, 0, 8, 0, 8, 0, 0, 0, 8, 0, 8, 0, 8], [8, 0, 8, 0, 8, 2, 2, 2, 2, 0, 8, 0, 8], [8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8], [8, 0, 8, 2, 2, 2, 2, 2, 2, 2, 2, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]",False,,Medium
0934a4d8,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[3, 1, 1, 9, 5, 6, 7, 1, 1, 4, 5, 7, 3, 9, 9, 1, 1, 9, 9, 3, 7, 5, 4, 1, 1, 7, 6, 5, 9, 1], [1, 3, 9, 5, 6, 5, 1, 7, 4, 1, 7, 5, 4, 3, 1, 3, 3, 1, 3, 4, 5, 7, 1, 4, 7, 1, 5, 6, 5, 9], [6, 9, 3, 1, 7, 1, 5, 6, 9, 9, 1, 4, 9, 1, 1, 4, 4, 1, 1, 9, 4, 1, 9, 9, 6, 5, 1, 7, 1, 3], [9, 1, 1, 3, 1, 7, 6, 5, 9, 9, 4, 1, 1, 3, 4, 1, 1, 4, 3, 1, 1, 4, 9, 9, 5, 6, 7, 1, 3, 1], [6, 6, 6, 7, 3, 1, 5, 9, 3, 4, 9, 1, 6, 7, 2, 5, 5, 2, 7, 6, 1, 9, 4, 3, 9, 5, 1, 3, 7, 6], [6, 6, 7, 6, 1, 3, 9, 1, 9, 3, 1, 3, 7, 6, 5, 2, 2, 5, 6, 7, 3, 1, 3, 9, 1, 9, 3, 1, 6, 7], [6, 7, 6, 6, 1, 9, 3, 1, 9, 1, 1, 4, 6, 9, 6, 7, 7, 6, 9, 6, 4, 1, 1, 9, 1, 3, 9, 1, 6, 6], [7, 6, 6, 6, 9, 6, 1, 3, 1, 3, 4, 1, 9, 6, 7, 6, 6, 7, 6, 9, 1, 4, 3, 1, 3, 1, 8, 8, 8, 8], [1, 4, 9, 9, 3, 9, 9, 1, 1, 1, 6, 1, 5, 2, 5, 5, 5, 5, 2, 5, 1, 6, 1, 1, 1, 9, 8, 8, 8, 8], [4, 1, 9, 9, 4, 3, 1, 3, 1, 1, 1, 6, 2, 5, 5, 5, 5, 5, 5, 2, 6, 1, 1, 1, 3, 1, 8, 8, 8, 8], [5, 7, 1, 4, 9, 1, 1, 4, 2, 2, 1, 1, 5, 5, 5, 2, 2, 5, 5, 5, 1, 1, 2, 2, 4, 1, 8, 8, 8, 8], [7, 5, 4, 1, 1, 3, 4, 1, 2, 1, 1, 1, 5, 5, 2, 5, 5, 2, 5, 5, 1, 1, 1, 2, 1, 4, 3, 1, 1, 4], [3, 4, 9, 1, 6, 7, 6, 9, 7, 6, 3, 3, 1, 1, 6, 1, 1, 6, 1, 1, 3, 3, 6, 7, 9, 6, 7, 6, 1, 9], [9, 3, 1, 3, 7, 6, 9, 6, 6, 7, 3, 3, 1, 1, 1, 6, 6, 1, 1, 1, 3, 3, 7, 6, 6, 9, 6, 7, 3, 1], [9, 1, 1, 4, 2, 5, 6, 7, 3, 3, 7, 6, 1, 2, 1, 1, 1, 1, 2, 1, 6, 7, 3, 3, 7, 6, 5, 2, 4, 1], [1, 3, 4, 1, 5, 2, 7, 6, 3, 3, 6, 7, 2, 2, 1, 1, 1, 1, 2, 2, 7, 6, 3, 3, 6, 7, 2, 5, 1, 4], [1, 3, 4, 1, 5, 2, 7, 6, 3, 3, 6, 7, 2, 2, 1, 1, 1, 1, 2, 2, 7, 6, 3, 3, 6, 7, 2, 5, 1, 4], [9, 1, 1, 4, 2, 5, 6, 7, 3, 3, 7, 6, 1, 2, 1, 1, 1, 1, 2, 1, 6, 7, 3, 3, 7, 6, 5, 2, 4, 1], [9, 3, 1, 3, 7, 6, 9, 6, 6, 7, 3, 3, 1, 1, 1, 6, 6, 1, 1, 1, 3, 3, 7, 6, 6, 9, 6, 7, 3, 1], [3, 4, 9, 1, 6, 7, 6, 9, 7, 6, 3, 3, 1, 1, 6, 1, 1, 6, 1, 1, 3, 3, 6, 7, 9, 6, 7, 6, 1, 9], [7, 5, 4, 1, 1, 3, 4, 1, 2, 1, 1, 1, 5, 5, 2, 5, 5, 2, 5, 5, 1, 1, 1, 2, 1, 4, 3, 1, 1, 4], [5, 7, 1, 4, 9, 1, 1, 4, 2, 2, 1, 1, 5, 5, 5, 2, 2, 5, 5, 5, 1, 1, 2, 2, 4, 1, 1, 9, 4, 1], [4, 1, 9, 9, 4, 3, 1, 3, 1, 1, 1, 6, 2, 5, 5, 5, 5, 5, 5, 2, 6, 1, 1, 1, 3, 1, 3, 4, 9, 9], [1, 4, 9, 9, 3, 9, 9, 1, 1, 1, 6, 1, 5, 2, 5, 5, 5, 5, 2, 5, 1, 6, 1, 1, 1, 9, 9, 3, 9, 9], [7, 6, 6, 6, 9, 6, 1, 3, 1, 3, 4, 1, 9, 6, 7, 6, 6, 7, 6, 9, 1, 4, 3, 1, 3, 1, 6, 9, 6, 6], [6, 7, 6, 6, 1, 9, 3, 1, 9, 1, 1, 4, 6, 9, 6, 7, 7, 6, 9, 6, 4, 1, 1, 9, 1, 3, 9, 1, 6, 6], [6, 6, 7, 6, 1, 3, 9, 1, 9, 3, 1, 3, 7, 6, 5, 2, 2, 5, 6, 7, 3, 1, 3, 9, 1, 9, 3, 1, 6, 7], [6, 6, 6, 7, 3, 1, 5, 9, 3, 4, 9, 1, 6, 7, 2, 5, 5, 2, 7, 6, 1, 9, 4, 3, 9, 5, 1, 3, 7, 6], [9, 1, 1, 3, 1, 7, 6, 5, 9, 9, 4, 1, 1, 3, 4, 1, 1, 4, 3, 1, 1, 4, 9, 9, 5, 6, 7, 1, 3, 1], [6, 9, 3, 1, 7, 1, 5, 6, 9, 9, 1, 4, 9, 1, 1, 4, 4, 1, 1, 9, 4, 1, 9, 9, 6, 5, 1, 7, 1, 3]],
then this grids change to output grids below
[[6, 9, 6, 6], [9, 3, 9, 9], [3, 4, 9, 9], [1, 9, 4, 1]].

Example 2
If input grids are like that
[[9, 9, 2, 3, 4, 4, 7, 5, 3, 3, 6, 6, 3, 5, 6, 4, 4, 6, 5, 3, 6, 6, 3, 3, 5, 7, 4, 4, 3, 2], [7, 9, 3, 5, 4, 4, 5, 7, 3, 3, 6, 6, 6, 3, 4, 6, 6, 4, 3, 6, 6, 6, 3, 3, 7, 5, 4, 4, 5, 3], [3, 2, 9, 9, 7, 5, 4, 4, 4, 1, 3, 3, 6, 4, 4, 7, 7, 4, 4, 6, 3, 8, 8, 8, 8, 8, 5, 7, 9, 9], [2, 3, 7, 9, 5, 7, 4, 4, 1, 4, 3, 3, 4, 6, 7, 4, 4, 7, 6, 4, 3, 8, 8, 8, 8, 8, 7, 5, 9, 7], [7, 7, 9, 3, 9, 9, 5, 3, 3, 6, 6, 4, 6, 7, 9, 9, 9, 9, 7, 6, 4, 8, 8, 8, 8, 8, 9, 9, 3, 9], [7, 7, 3, 9, 7, 9, 3, 2, 5, 3, 4, 6, 2, 6, 9, 9, 9, 9, 6, 2, 6, 8, 8, 8, 8, 8, 9, 7, 9, 3], [9, 3, 7, 7, 3, 2, 9, 9, 6, 4, 4, 7, 9, 2, 6, 7, 7, 6, 2, 9, 7, 4, 4, 6, 9, 9, 2, 3, 7, 7], [3, 9, 7, 7, 2, 3, 7, 9, 4, 6, 7, 4, 2, 9, 2, 6, 6, 2, 9, 2, 4, 7, 6, 4, 9, 7, 3, 2, 7, 7], [3, 3, 4, 1, 3, 5, 6, 4, 2, 4, 7, 7, 1, 6, 7, 2, 2, 7, 6, 1, 7, 7, 4, 2, 4, 6, 5, 3, 1, 4], [3, 3, 1, 4, 6, 3, 4, 6, 2, 2, 7, 1, 6, 1, 2, 7, 7, 2, 1, 6, 1, 7, 2, 2, 6, 4, 3, 6, 4, 1], [6, 6, 3, 3, 6, 4, 4, 7, 1, 1, 2, 4, 7, 2, 1, 6, 6, 1, 2, 7, 4, 2, 1, 1, 7, 4, 4, 6, 3, 3], [6, 6, 3, 3, 4, 6, 7, 4, 1, 3, 2, 2, 2, 7, 6, 1, 1, 6, 7, 2, 2, 2, 3, 1, 4, 7, 6, 4, 3, 3], [3, 6, 6, 4, 6, 2, 9, 2, 9, 9, 9, 7, 2, 4, 1, 7, 7, 1, 4, 2, 7, 9, 9, 9, 2, 9, 2, 6, 4, 6], [5, 3, 4, 6, 7, 6, 2, 9, 9, 9, 7, 9, 2, 2, 7, 7, 7, 7, 2, 2, 9, 7, 9, 9, 9, 2, 6, 7, 6, 4], [6, 4, 4, 7, 9, 9, 6, 2, 9, 7, 9, 9, 3, 1, 2, 4, 4, 2, 1, 3, 9, 9, 7, 9, 2, 6, 9, 9, 7, 4], [4, 6, 7, 4, 9, 9, 7, 6, 7, 9, 9, 9, 1, 1, 2, 2, 2, 2, 1, 1, 9, 9, 9, 7, 6, 7, 9, 9, 4, 7], [4, 6, 7, 4, 9, 9, 7, 6, 7, 9, 9, 9, 1, 1, 2, 2, 2, 2, 1, 1, 9, 9, 9, 7, 6, 7, 9, 9, 4, 7], [6, 4, 4, 7, 9, 9, 6, 2, 9, 7, 9, 9, 3, 1, 2, 4, 4, 2, 1, 3, 9, 9, 7, 9, 2, 6, 9, 9, 7, 4], [5, 3, 4, 6, 7, 6, 2, 9, 9, 9, 7, 9, 2, 2, 7, 7, 7, 7, 2, 2, 9, 7, 9, 9, 9, 2, 6, 7, 6, 4], [3, 6, 6, 4, 6, 2, 9, 2, 9, 9, 9, 7, 2, 4, 1, 7, 7, 1, 4, 2, 7, 9, 9, 9, 2, 9, 2, 6, 4, 6], [6, 6, 3, 3, 4, 6, 7, 4, 1, 3, 2, 2, 2, 7, 6, 1, 1, 6, 7, 2, 2, 2, 3, 1, 4, 7, 6, 4, 3, 3], [6, 6, 3, 3, 6, 4, 4, 7, 1, 1, 2, 4, 7, 2, 1, 6, 6, 1, 2, 7, 4, 2, 1, 1, 7, 4, 4, 6, 3, 3], [3, 3, 1, 4, 6, 3, 4, 6, 2, 2, 7, 1, 6, 1, 2, 7, 7, 2, 1, 6, 1, 7, 2, 2, 6, 4, 3, 6, 4, 1], [3, 3, 4, 1, 3, 5, 6, 4, 2, 4, 7, 7, 1, 6, 7, 2, 2, 7, 6, 1, 7, 7, 4, 2, 4, 6, 5, 3, 1, 4], [3, 9, 7, 7, 2, 3, 7, 9, 4, 6, 7, 4, 2, 9, 2, 6, 6, 2, 9, 2, 4, 7, 6, 4, 9, 7, 3, 2, 7, 7], [9, 3, 7, 7, 3, 2, 9, 9, 6, 4, 4, 7, 9, 2, 6, 7, 7, 6, 2, 9, 7, 4, 4, 6, 9, 9, 2, 3, 7, 7], [7, 7, 3, 9, 7, 9, 3, 2, 5, 3, 4, 6, 2, 6, 9, 9, 9, 9, 6, 2, 6, 4, 3, 5, 2, 3, 9, 7, 9, 3], [7, 7, 9, 3, 9, 9, 5, 3, 3, 6, 6, 4, 6, 7, 9, 9, 9, 9, 7, 6, 4, 6, 6, 3, 3, 5, 9, 9, 3, 9], [2, 3, 7, 9, 5, 7, 4, 4, 1, 4, 3, 3, 4, 6, 7, 4, 4, 7, 6, 4, 3, 3, 4, 1, 4, 4, 7, 5, 9, 7], [3, 2, 9, 9, 7, 5, 4, 4, 4, 1, 3, 3, 6, 4, 4, 7, 7, 4, 4, 6, 3, 3, 1, 4, 4, 4, 5, 7, 9, 9]],
then this grids change to output grids below
[[3, 1, 4, 4, 4], [3, 4, 1, 4, 4], [6, 6, 3, 3, 5], [4, 3, 5, 2, 3]].

Quiz
If input grids are like that
[[4, 4, 1, 3, 5, 7, 7, 9, 6, 1, 6, 6, 4, 4, 7, 7, 7, 7, 4, 4, 6, 6, 1, 6, 9, 7, 7, 5, 3, 1], [4, 4, 3, 3, 7, 5, 9, 7, 6, 6, 6, 6, 4, 4, 7, 2, 2, 7, 4, 4, 6, 6, 6, 6, 7, 9, 5, 7, 3, 3], [3, 4, 4, 4, 7, 9, 5, 7, 5, 1, 6, 1, 7, 7, 9, 9, 9, 9, 7, 7, 1, 6, 1, 5, 7, 5, 9, 7, 4, 4], [4, 3, 4, 4, 9, 7, 7, 5, 1, 5, 6, 6, 7, 2, 1, 9, 9, 1, 2, 7, 6, 6, 5, 1, 5, 7, 7, 9, 4, 4], [9, 7, 7, 4, 4, 4, 3, 3, 4, 4, 7, 7, 9, 7, 3, 2, 2, 3, 7, 9, 7, 7, 4, 4, 3, 3, 4, 4, 4, 7], [7, 9, 4, 7, 4, 4, 3, 1, 4, 4, 7, 2, 7, 9, 2, 3, 3, 2, 9, 7, 2, 7, 4, 4, 1, 3, 4, 4, 7, 4], [7, 4, 9, 7, 3, 4, 4, 4, 7, 7, 9, 1, 7, 4, 9, 7, 7, 9, 4, 7, 1, 9, 7, 7, 4, 4, 4, 3, 7, 9], [4, 7, 7, 9, 4, 3, 4, 4, 7, 2, 9, 9, 4, 7, 7, 9, 9, 7, 7, 4, 9, 9, 2, 7, 4, 4, 3, 4, 9, 7], [6, 6, 5, 1, 4, 4, 7, 7, 7, 2, 2, 6, 4, 6, 2, 2, 2, 2, 6, 4, 6, 2, 2, 7, 7, 7, 4, 4, 1, 5], [1, 6, 1, 5, 4, 4, 7, 2, 3, 7, 6, 6, 6, 4, 2, 2, 2, 2, 4, 6, 6, 6, 7, 3, 2, 7, 4, 4, 5, 1], [6, 6, 6, 6, 7, 7, 9, 9, 9, 1, 7, 2, 2, 2, 4, 6, 6, 4, 2, 2, 2, 7, 1, 9, 9, 9, 7, 7, 6, 6], [6, 6, 1, 6, 7, 2, 1, 9, 1, 5, 3, 7, 2, 2, 6, 4, 4, 6, 2, 2, 7, 3, 5, 1, 9, 1, 2, 7, 6, 1], [4, 4, 7, 7, 9, 7, 7, 4, 9, 9, 1, 6, 7, 2, 6, 6, 6, 6, 2, 7, 6, 1, 9, 9, 4, 7, 7, 9, 7, 7], [4, 4, 7, 2, 7, 9, 4, 7, 9, 9, 6, 1, 3, 7, 6, 2, 2, 6, 7, 3, 1, 6, 9, 9, 7, 4, 9, 7, 2, 7], [8, 8, 8, 1, 3, 2, 9, 7, 1, 6, 9, 9, 5, 1, 7, 2, 2, 7, 1, 5, 9, 9, 6, 1, 7, 9, 2, 3, 1, 9], [8, 8, 8, 9, 2, 3, 7, 9, 6, 1, 9, 9, 1, 9, 3, 7, 7, 3, 9, 1, 9, 9, 1, 6, 9, 7, 3, 2, 9, 9], [8, 8, 8, 9, 2, 3, 7, 9, 6, 1, 9, 9, 1, 9, 3, 7, 7, 3, 9, 1, 9, 9, 1, 6, 9, 7, 3, 2, 9, 9], [8, 8, 8, 1, 3, 2, 9, 7, 1, 6, 9, 9, 5, 1, 7, 2, 2, 7, 1, 5, 9, 9, 6, 1, 7, 9, 2, 3, 1, 9], [8, 8, 8, 2, 7, 9, 4, 7, 9, 9, 6, 1, 3, 7, 6, 2, 2, 6, 7, 3, 1, 6, 9, 9, 7, 4, 9, 7, 2, 7], [8, 8, 8, 7, 9, 7, 7, 4, 9, 9, 1, 6, 7, 2, 6, 6, 6, 6, 2, 7, 6, 1, 9, 9, 4, 7, 7, 9, 7, 7], [8, 8, 8, 6, 7, 2, 1, 9, 1, 5, 3, 7, 2, 2, 6, 4, 4, 6, 2, 2, 7, 3, 5, 1, 9, 1, 2, 7, 6, 1], [8, 8, 8, 6, 7, 7, 9, 9, 9, 1, 7, 2, 2, 2, 4, 6, 6, 4, 2, 2, 2, 7, 1, 9, 9, 9, 7, 7, 6, 6], [8, 8, 8, 5, 4, 4, 7, 2, 3, 7, 6, 6, 6, 4, 2, 2, 2, 2, 4, 6, 6, 6, 7, 3, 2, 7, 4, 4, 5, 1], [6, 6, 5, 1, 4, 4, 7, 7, 7, 2, 2, 6, 4, 6, 2, 2, 2, 2, 6, 4, 6, 2, 2, 7, 7, 7, 4, 4, 1, 5], [4, 7, 7, 9, 4, 3, 4, 4, 7, 2, 9, 9, 4, 7, 7, 9, 9, 7, 7, 4, 9, 9, 2, 7, 4, 4, 3, 4, 9, 7], [7, 4, 9, 7, 3, 4, 4, 4, 7, 7, 9, 1, 7, 4, 9, 7, 7, 9, 4, 7, 1, 9, 7, 7, 4, 4, 4, 3, 7, 9], [7, 9, 4, 7, 4, 4, 3, 1, 4, 4, 7, 2, 7, 9, 2, 3, 3, 2, 9, 7, 2, 7, 4, 4, 1, 3, 4, 4, 7, 4], [9, 7, 7, 4, 4, 4, 3, 3, 4, 4, 7, 7, 9, 7, 3, 2, 2, 3, 7, 9, 7, 7, 4, 4, 3, 3, 4, 4, 4, 7], [4, 3, 4, 4, 9, 7, 7, 5, 1, 5, 6, 6, 7, 2, 1, 9, 9, 1, 2, 7, 6, 6, 5, 1, 5, 7, 7, 9, 4, 4], [3, 4, 4, 4, 7, 9, 5, 7, 5, 1, 6, 1, 7, 7, 9, 9, 9, 9, 7, 7, 1, 6, 1, 5, 7, 5, 9, 7, 4, 4]],
then output grids?

=========","The output grids are:

[[4, 4, 7, 7, 9], [4, 7, 7, 9, 9], [7, 7, 9, 9, 7], [7, 9, 9, 7, 7]]","[[4, 4, 7, 7, 9], [4, 7, 7, 9, 9], [7, 7, 9, 9, 7], [7, 9, 9, 7, 7]]","[[4, 4, 7, 7, 9], [4, 7, 7, 9, 9], [7, 7, 9, 9, 7], [7, 9, 9, 7, 7]]","[[7, 7, 9], [7, 2, 9], [7, 2, 9], [7, 7, 9], [4, 4, 7], [4, 4, 7], [6, 6, 1], [6, 6, 6], [1, 6, 1]]",False,,Tedious
09c534e7,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 3, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1], [0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 1, 2, 2, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 3, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 3, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 1, 3, 1, 1, 1, 3, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 1, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 3, 1, 1, 1, 1, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 1, 3, 3, 3, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 3, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 1, 0, 0, 0, 1, 3, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 3, 3, 3, 3, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 3, 3, 3, 3, 1, 1, 1, 3, 1, 0, 0, 0, 1, 4, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 2, 2, 1, 1, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 2, 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 4, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 4, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0,",not_complete,not_complete,"[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 4, 4, 4, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 4, 4, 4, 4, 1, 0], [0, 0, 1, 4, 4, 1, 1, 1, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4, 1, 0], [0, 0, 1, 4, 4, 1, 0, 0, 1, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 4, 4, 4, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 4, 4, 4, 4, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 4, 4, 1, 1, 1, 4, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 8, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 8, 8, 8, 1, 1, 1, 8, 8, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 1, 0, 0, 0, 1, 8, 8, 8, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 1, 8, 1, 1, 1, 8, 1, 0, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 0, 0, 0, 0, 1, 6, 6, 1, 0], [0, 1, 1, 1, 0, 1, 8, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 0, 0, 0, 0, 1, 6, 6, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 0, 0, 0, 0, 1, 6, 6, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 1, 6, 6, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 6, 6, 1, 0], [0, 0, 1, 6, 6, 1, 1, 1, 1, 6, 6, 1, 1, 1, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0]]",False,,Tedious
0a1d4ef5,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 2, 0, 0, 0, 2, 5, 2, 2, 0, 5, 2, 5, 5, 0, 2, 2, 5, 2, 2, 5, 5, 0, 2, 0, 0, 2, 0, 0, 0], [5, 0, 0, 5, 2, 2, 5, 2, 5, 0, 0, 2, 2, 5, 5, 2, 2, 5, 0, 5, 2, 0, 0, 0, 5, 0, 5, 5, 0, 2], [5, 0, 2, 2, 8, 8, 8, 8, 8, 8, 8, 5, 0, 2, 4, 4, 4, 4, 5, 0, 0, 2, 3, 3, 3, 3, 3, 0, 0, 2], [0, 5, 0, 5, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 4, 4, 4, 4, 0, 0, 2, 0, 3, 3, 3, 3, 3, 0, 2, 0], [5, 0, 5, 0, 8, 8, 8, 8, 8, 8, 8, 2, 2, 0, 4, 4, 4, 4, 2, 2, 0, 2, 3, 3, 3, 3, 3, 5, 0, 5], [0, 0, 0, 5, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 4, 4, 4, 4, 0, 0, 2, 2, 3, 3, 3, 3, 3, 0, 0, 2], [0, 0, 0, 2, 5, 5, 5, 2, 2, 0, 0, 0, 2, 5, 0, 5, 2, 0, 2, 0, 5, 0, 5, 2, 0, 2, 0, 5, 5, 2], [0, 0, 2, 2, 5, 5, 0, 0, 2, 0, 5, 0, 5, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 5, 2, 0, 0, 0, 5, 2, 0, 5, 2, 0, 0, 5, 2, 0, 0], [0, 2, 0, 2, 0, 0, 2, 0, 0, 0, 2, 5, 2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 5, 0, 5, 0], [0, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 0, 0, 7, 7, 7, 7, 7, 0, 0, 5, 0], [0, 0, 0, 2, 1, 1, 1, 1, 1, 0, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 0, 7, 7, 7, 7, 7, 2, 5, 5, 5], [0, 0, 5, 2, 1, 1, 1, 1, 1, 5, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 2, 7, 7, 7, 7, 7, 0, 2, 5, 2], [2, 5, 0, 2, 1, 1, 1, 1, 1, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 2, 5, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 5, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 7, 7, 7, 7, 7, 2, 0, 2, 2], [0, 0, 2, 0, 0, 5, 0, 2, 0, 2, 0, 5, 5, 0, 0, 2, 0, 5, 2, 2, 2, 2, 0, 5, 2, 0, 0, 2, 2, 0], [0, 0, 5, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 2, 2, 0, 0, 0, 0, 5, 5, 0, 2, 0, 0, 5], [0, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 0, 5, 4, 4, 4, 4, 4, 2, 0, 0, 2, 0, 0, 5, 0, 0, 0, 2, 0], [0, 0, 2, 0, 8, 8, 8, 8, 8, 2, 2, 5, 0, 4, 4, 4, 4, 4, 0, 2, 5, 0, 1, 1, 1, 1, 1, 2, 0, 2], [2, 2, 0, 0, 8, 8, 8, 8, 8, 5, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 5, 5, 1, 1, 1, 1, 1, 5, 0, 0], [2, 5, 5, 0, 8, 8, 8, 8, 8, 0, 5, 0, 5, 4, 4, 4, 4, 4, 0, 5, 0, 2, 1, 1, 1, 1, 1, 0, 0, 0], [2, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 5, 2, 5, 0, 0, 2, 5, 0, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0], [0, 5, 2, 5, 5, 2, 2, 0, 2, 0, 0, 2, 5, 0, 5, 0, 0, 5, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], [2, 0, 0, 0, 2, 5, 0, 0, 5, 5, 2, 0, 2, 2, 0, 0, 5, 5, 0, 0, 0, 5, 0, 2, 0, 5, 0, 0, 2, 5], [0, 0, 5, 0, 0, 0, 0, 2, 0, 5, 5, 0, 2, 5, 0, 0, 0, 2, 0, 2, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5], [0, 2, 0, 2, 0, 5, 2, 5, 0, 5, 2, 0, 0, 0, 0, 0, 0, 5, 2, 2, 5, 2, 0, 0, 0, 0, 0, 5, 5, 0], [0, 0, 0, 5, 5, 0, 2, 2, 2, 0, 0, 2, 0, 2, 0, 0, 5, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 5, 2, 2, 2, 0, 0, 0, 5], [2, 2, 2, 0, 0, 0, 0, 2, 0, 5, 5, 0, 0, 0, 5, 0, 2, 0, 5, 0, 0, 0, 5, 0, 2, 0, 2, 2, 2, 5], [5, 0, 0, 2, 2, 5, 2, 2, 0, 0, 0, 0, 2, 5, 0, 2, 0, 5, 0, 0, 5, 5, 5, 0, 0, 2, 0, 0, 0, 5]],
then this grids change to output grids below
[[8, 4, 3], [1, 3, 7], [8, 4, 1]].

Example 2
If input grids are like that
[[0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 2, 8, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 8, 8, 2, 0, 0, 0, 0, 0, 0], [8, 0, 2, 3, 3, 3, 3, 3, 3, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [8, 0, 8, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0, 8, 9, 9, 9, 9, 9, 8, 8], [2, 8, 0, 3, 3, 3, 3, 3, 3, 8, 8, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 9, 9, 9, 9, 9, 0, 0], [8, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 2, 2, 2, 8, 8, 8, 8, 0, 2, 8, 2, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 8, 0, 0, 8, 0, 0, 2, 8, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 8, 0, 9, 9, 9, 9, 9, 8, 8], [0, 8, 8, 8, 0, 0, 2, 0, 8, 0, 0, 0, 2, 8, 8, 0, 0, 0, 8, 0, 2, 0, 2, 0, 8, 0, 0, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 8, 8, 2, 0, 0, 2, 0, 0, 2, 0, 0, 8, 2, 8, 0], [8, 0, 0, 0, 0, 0, 8, 2, 8, 2, 8, 0, 0, 0, 0, 0, 0, 2, 8, 2, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 2, 6, 6, 6, 6, 0, 8, 0, 0, 4, 4, 4, 4, 4, 4, 2, 0, 0, 0, 8, 0, 0, 2, 0, 0, 0, 2, 0], [8, 0, 8, 6, 6, 6, 6, 0, 8, 0, 8, 4, 4, 4, 4, 4, 4, 2, 0, 2, 2, 2, 0, 1, 1, 1, 1, 1, 8, 0], [0, 2, 0, 6, 6, 6, 6, 8, 0, 2, 2, 4, 4, 4, 4, 4, 4, 8, 0, 8, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2], [0, 2, 8, 6, 6, 6, 6, 8, 0, 8, 0, 4, 4, 4, 4, 4, 4, 0, 8, 2, 2, 0, 2, 1, 1, 1, 1, 1, 0, 8], [0, 0, 2, 6, 6, 6, 6, 0, 0, 0, 2, 4, 4, 4, 4, 4, 4, 0, 0, 8, 0, 8, 8, 1, 1, 1, 1, 1, 8, 0], [0, 0, 0, 6, 6, 6, 6, 0, 0, 2, 8, 0, 8, 8, 2, 8, 0, 8, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2], [2, 8, 0, 6, 6, 6, 6, 0, 2, 0, 0, 0, 0, 2, 8, 0, 0, 0, 2, 8, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 2, 0, 0, 0, 0, 0, 8, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 0, 0, 0, 2], [0, 0, 2, 0, 8, 0, 0, 0, 2, 8, 0, 8, 0, 0, 0, 8, 0, 8, 8, 8, 0, 8, 0, 0, 8, 0, 2, 2, 0, 2], [8, 0, 0, 0, 0, 0, 8, 8, 2, 2, 8, 0, 8, 2, 2, 8, 0, 0, 0, 0, 8, 0, 2, 0, 8, 0, 0, 0, 8, 2], [2, 2, 0, 0, 0, 0, 2, 8, 0, 8, 0, 0, 2, 2, 8, 0, 0, 2, 0, 0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 8], [0, 8, 8, 0, 0, 8, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 8, 2, 0, 0], [0, 0, 2, 8, 2, 0, 2, 0, 0, 8, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 8, 8, 0, 8, 0, 2, 0, 0, 0, 8], [2, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 8, 8, 0], [8, 2, 0, 0, 0, 8, 0, 8, 0, 8, 2, 0, 0, 0, 8, 0, 0, 8, 0, 2, 0, 0, 8, 0, 2, 2, 8, 0, 0, 0], [0, 8, 0, 2, 2, 8, 2, 8, 0, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 8, 0, 8, 0, 0, 8, 2], [0, 0, 2, 8, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 2, 0, 2, 2, 0, 0, 8, 0, 2, 0, 0, 8, 8], [0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 2, 8, 0, 0, 8, 0], [8, 2, 0, 2, 8, 8, 0, 0, 0, 2, 0, 0, 0, 8, 8, 0, 8, 0, 0, 0, 8, 2, 8, 8, 0, 2, 8, 2, 2, 2], [2, 0, 8, 8, 0, 0, 0, 8, 0, 0, 8, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 8, 0, 8, 0, 0, 2, 8, 0, 0]],
then this grids change to output grids below
[[3, 1, 9], [6, 4, 1]].

Quiz
If input grids are like that
[[5, 5, 0, 0, 0, 8, 5, 0, 0, 8, 8, 8, 0, 8, 0, 0, 5, 5, 0, 5, 0, 5, 8, 0, 0, 0, 0, 0, 0, 8], [8, 8, 5, 5, 0, 8, 0, 0, 5, 8, 0, 0, 5, 8, 0, 8, 0, 8, 0, 8, 0, 0, 5, 0, 8, 8, 0, 0, 0, 0], [0, 5, 5, 5, 0, 5, 8, 0, 5, 8, 0, 0, 0, 5, 0, 5, 8, 8, 5, 8, 5, 0, 5, 0, 0, 0, 0, 0, 5, 5], [0, 0, 0, 5, 5, 5, 8, 8, 0, 0, 0, 5, 8, 3, 3, 3, 3, 3, 5, 0, 8, 0, 8, 8, 0, 8, 8, 0, 0, 5], [0, 5, 0, 5, 2, 2, 2, 2, 2, 2, 0, 5, 8, 3, 3, 3, 3, 3, 8, 8, 8, 3, 3, 3, 3, 3, 3, 0, 0, 5], [8, 8, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 5, 8, 0, 3, 3, 3, 3, 3, 3, 0, 8, 0], [8, 5, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 8, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 5, 0, 0], [5, 0, 8, 8, 2, 2, 2, 2, 2, 2, 8, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 5], [0, 0, 0, 5, 0, 8, 0, 5, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0], [0, 0, 5, 0, 5, 5, 0, 8, 0, 8, 8, 0, 0, 5, 8, 0, 0, 0, 0, 5, 0, 0, 1, 1, 1, 1, 1, 5, 5, 5], [8, 0, 8, 4, 4, 4, 4, 4, 5, 0, 5, 8, 7, 7, 7, 7, 7, 0, 0, 8, 5, 0, 1, 1, 1, 1, 1, 0, 5, 0], [8, 5, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 5, 0, 0, 1, 1, 1, 1, 1, 0, 5, 0], [0, 8, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 5, 0, 0, 5, 8, 1, 1, 1, 1, 1, 5, 5, 0], [0, 8, 5, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 8, 0, 8, 0, 1, 1, 1, 1, 1, 5, 5, 0], [0, 5, 8, 4, 4, 4, 4, 4, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 5, 8], [8, 8, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 5, 8, 0, 5, 0, 5, 8, 0, 0, 0, 5], [0, 8, 0, 5, 0, 0, 0, 5, 5, 8, 5, 5, 3, 3, 3, 3, 3, 3, 3, 8, 0, 5, 0, 7, 7, 7, 7, 5, 0, 5], [0, 0, 5, 5, 0, 5, 1, 1, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 8, 8, 8, 7, 7, 7, 7, 8, 0, 8], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 5, 8, 3, 3, 3, 3, 3, 3, 3, 8, 5, 0, 8, 7, 7, 7, 7, 0, 5, 5], [0, 5, 0, 8, 0, 5, 1, 1, 1, 1, 5, 0, 3, 3, 3, 3, 3, 3, 3, 5, 0, 5, 0, 7, 7, 7, 7, 5, 0, 0], [0, 0, 5, 0, 0, 8, 1, 1, 1, 1, 0, 0, 5, 8, 0, 0, 5, 8, 8, 0, 0, 8, 0, 7, 7, 7, 7, 8, 0, 0], [5, 0, 5, 8, 0, 0, 8, 0, 5, 0, 0, 0, 0, 0, 5, 8, 0, 0, 5, 8, 0, 0, 5, 0, 8, 8, 8, 0, 0, 5], [0, 5, 0, 5, 5, 4, 4, 4, 5, 0, 5, 0, 6, 6, 6, 6, 6, 6, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 5, 5], [0, 8, 0, 5, 5, 4, 4, 4, 0, 8, 5, 0, 6, 6, 6, 6, 6, 6, 0, 0, 2, 2, 2, 2, 2, 2, 5, 0, 8, 5], [8, 0, 0, 0, 0, 4, 4, 4, 5, 0, 8, 0, 6, 6, 6, 6, 6, 6, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 4, 5, 5, 0, 8, 6, 6, 6, 6, 6, 6, 5, 0, 2, 2, 2, 2, 2, 2, 0, 0, 8, 0], [5, 5, 0, 0, 0, 5, 5, 8, 5, 8, 0, 0, 6, 6, 6, 6, 6, 6, 8, 5, 8, 0, 0, 8, 5, 0, 8, 5, 0, 0], [0, 5, 8, 5, 0, 8, 5, 5, 5, 0, 8, 8, 0, 0, 5, 0, 8, 5, 5, 0, 0, 0, 5, 8, 0, 0, 0, 0, 8, 5], [0, 0, 0, 0, 8, 0, 0, 5, 8, 8, 8, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 0, 8, 0, 5, 5, 0, 0, 8], [8, 0, 5, 0, 0, 0, 0, 0, 5, 8, 8, 8, 0, 0, 5, 5, 5, 5, 8, 5, 0, 0, 5, 8, 5, 8, 5, 5, 0, 5]],
then output grids?

=========","The output grids for the quiz input would be [[5, 1, 3], [2, 4, 6]].","[[5, 1, 3], [2, 4, 6]]","[[5, 1, 3], [2, 4, 6]]","[[2, 3, 3], [4, 7, 1], [1, 3, 7], [4, 6, 2]]",False,,Easy
0a2355a6,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8], [0, 0, 8, 8, 8, 0, 0, 8, 8, 8, 8], [0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 8, 0, 8, 0, 0, 0, 8, 8, 8], [0, 0, 8, 0, 8, 0, 0, 0, 8, 0, 8], [0, 0, 8, 8, 8, 0, 0, 0, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [8, 0, 8, 0, 0, 0, 8, 8, 8, 8, 0], [8, 8, 8, 8, 8, 0, 8, 0, 0, 8, 0], [8, 0, 0, 0, 8, 0, 8, 0, 0, 8, 0], [8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 2, 0, 2, 0, 0, 0, 1, 1, 1], [0, 0, 2, 0, 2, 0, 0, 0, 1, 0, 1], [0, 0, 2, 2, 2, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 0, 0, 1, 1, 1, 1, 0], [3, 3, 3, 3, 3, 0, 1, 0, 0, 1, 0], [3, 0, 0, 0, 3, 0, 1, 0, 0, 1, 0], [3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0], [0, 0, 8, 0, 0, 8, 0, 0, 8, 8, 8, 0, 0, 8, 0, 8, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 0, 8, 0, 0, 8, 8, 8, 0], [0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 8, 0, 8, 0], [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [0, 0, 1, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 2, 0, 2, 0], [0, 0, 1, 1, 1, 1, 1, 1, 2, 0, 2, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 3, 0, 0, 3, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3]].

The pattern here is that each separate shape made up of 8's in the input grid is assigned a different number in the output grid. The first shape encountered is assigned 1, the second shape is assigned 2, and so on.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [0, 0, 1, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 2, 0, 2, 0], [0, 0, 1, 1, 1, 1, 1, 1, 2, 0, 2, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 3, 0, 0, 3, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [0, 0, 1, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 2, 0, 2, 0], [0, 0, 1, 1, 1, 1, 1, 1, 2, 0, 2, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 3, 0, 0, 3, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [0, 0, 4, 0, 0, 4, 0, 0, 4, 4, 4, 0, 0, 2, 0, 2, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 3, 0, 0, 3, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3]]",False,,Medium
0b17323b,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern in this problem is that for each row that contains a 1, a 2 is added in the second to last column of the row that is three rows below. If there is no such row, the 2 is added in the second to last column of the last row.","[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Easy
0bb8deee,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 3, 3], [0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 3, 3, 0], [0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 0, 3, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 4, 0, 4, 0, 0, 0, 2, 0, 5, 5, 0, 0], [0, 0, 4, 0, 0, 0, 0, 2, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[1, 1, 0, 0, 3, 3], [0, 1, 0, 3, 3, 0], [0, 1, 1, 0, 3, 0], [0, 4, 0, 5, 5, 0], [4, 0, 4, 0, 5, 0], [0, 4, 0, 0, 0, 5]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0], [0, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 0, 1, 0, 0, 8, 0, 8, 0, 0, 0], [0, 5, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 2, 2, 3, 0, 0], [2, 2, 2, 0, 3, 3], [0, 2, 0, 0, 3, 0], [0, 0, 5, 8, 0, 8], [5, 5, 5, 0, 8, 0], [0, 5, 0, 8, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 3, 3, 0], [0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 3, 3, 0], [0, 0, 2, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0], [0, 2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0], [0, 0, 6, 6, 0, 0, 1, 0, 0, 4, 0, 4, 0], [0, 6, 0, 6, 0, 0, 1, 0, 0, 0, 4, 0, 0], [0, 6, 6, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[2, 2, 0, 3, 3, 3], [0, 2, 0, 0, 3, 3], [2, 0, 2, 0, 3, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 6, 6, 4, 0, 4], [6, 0, 6, 0, 4, 0], [6, 6, 0, 0, 0, 0]].

The pattern in this problem is that the objects are moved to the left side of the grid, and the grid is then cropped to only include rows that contain objects. The objects maintain their relative positions to each other.","[[2, 2, 0, 3, 3, 3], [0, 2, 0, 0, 3, 3], [2, 0, 2, 0, 3, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 6, 6, 4, 0, 4], [6, 0, 6, 0, 4, 0], [6, 6, 0, 0, 0, 0]]","[[2, 2, 0, 3, 3, 3], [0, 2, 0, 0, 3, 3], [2, 0, 2, 0, 3, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 6, 6, 4, 0, 4], [6, 0, 6, 0, 4, 0], [6, 6, 0, 0, 0, 0]]","[[0, 2, 2, 3, 3, 3], [0, 2, 0, 0, 3, 3], [2, 0, 2, 3, 0, 0], [0, 6, 6, 0, 4, 0], [6, 0, 6, 4, 0, 4], [6, 6, 0, 0, 4, 0]]",False,,Easy
0becf7df,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[4, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 7, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 3, 4, 4, 0, 0], [0, 0, 0, 0, 0, 3, 2, 4, 0, 0], [0, 0, 0, 7, 7, 3, 2, 4, 0, 0], [0, 0, 0, 7, 3, 3, 2, 0, 0, 0], [0, 0, 0, 7, 0, 0, 2, 2, 0, 0], [0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[4, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 7, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 7, 2, 2, 0, 0], [0, 0, 0, 0, 0, 7, 4, 2, 0, 0], [0, 0, 0, 3, 3, 7, 4, 2, 0, 0], [0, 0, 0, 3, 7, 7, 4, 0, 0, 0], [0, 0, 0, 3, 0, 0, 4, 4, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[1, 3, 0, 0, 0, 0, 0, 0, 0, 0], [2, 8, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 3, 3, 3, 3, 1, 8, 0, 0], [0, 0, 3, 3, 2, 0, 8, 8, 0, 0], [0, 0, 0, 0, 2, 0, 8, 8, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[1, 3, 0, 0, 0, 0, 0, 0, 0, 0], [2, 8, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 0, 0, 0], [0, 0, 1, 1, 1, 1, 3, 2, 0, 0], [0, 0, 1, 1, 8, 0, 2, 2, 0, 0], [0, 0, 0, 0, 8, 0, 2, 2, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[8, 9, 0, 0, 0, 0, 0, 0, 0, 0], [2, 4, 0, 0, 0, 9, 9, 0, 0, 0], [0, 0, 0, 8, 8, 8, 9, 0, 0, 0], [0, 0, 0, 2, 8, 8, 9, 0, 0, 0], [0, 0, 0, 2, 4, 2, 0, 0, 0, 0], [0, 0, 0, 2, 2, 4, 0, 0, 0, 0], [0, 0, 0, 2, 4, 4, 0, 0, 0, 0], [0, 0, 0, 9, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[8, 9, 0, 0, 0, 0, 0, 0, 0, 0], [2, 4, 0, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 9, 9, 2, 2, 0, 0, 0], [0, 0, 0, 8, 8, 2, 2, 0, 0, 0], [0, 0, 0, 8, 4, 9, 0, 0, 0, 0], [0, 0, 0, 8, 2, 4, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

The pattern in this problem is that the objects in the grid are moving upwards. The objects in the lower rows move to the upper rows while maintaining their relative positions.","[[8, 9, 0, 0, 0, 0, 0, 0, 0, 0], [2, 4, 0, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 9, 9, 2, 2, 0, 0, 0], [0, 0, 0, 8, 8, 2, 2, 0, 0, 0], [0, 0, 0, 8, 4, 9, 0, 0, 0, 0], [0, 0, 0, 8, 2, 4, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[8, 9, 0, 0, 0, 0, 0, 0, 0, 0], [2, 4, 0, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 9, 9, 2, 2, 0, 0, 0], [0, 0, 0, 8, 8, 2, 2, 0, 0, 0], [0, 0, 0, 8, 4, 9, 0, 0, 0, 0], [0, 0, 0, 8, 2, 4, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[8, 9, 0, 0, 0, 0, 0, 0, 0, 0], [2, 4, 0, 0, 0, 8, 8, 0, 0, 0], [0, 0, 0, 9, 9, 9, 8, 0, 0, 0], [0, 0, 0, 4, 9, 9, 8, 0, 0, 0], [0, 0, 0, 4, 2, 4, 0, 0, 0, 0], [0, 0, 0, 4, 4, 2, 0, 0, 0, 0], [0, 0, 0, 4, 2, 2, 0, 0, 0, 0], [0, 0, 0, 8, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Medium
0c786b71,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[6, 2, 4, 2], [2, 2, 6, 6], [6, 4, 2, 4]],
then this grids change to output grids below
[[4, 2, 4, 6, 6, 4, 2, 4], [6, 6, 2, 2, 2, 2, 6, 6], [2, 4, 2, 6, 6, 2, 4, 2], [2, 4, 2, 6, 6, 2, 4, 2], [6, 6, 2, 2, 2, 2, 6, 6], [4, 2, 4, 6, 6, 4, 2, 4]].

Example 2
If input grids are like that
[[5, 5, 9, 9], [9, 5, 5, 5], [5, 7, 5, 7]],
then this grids change to output grids below
[[7, 5, 7, 5, 5, 7, 5, 7], [5, 5, 5, 9, 9, 5, 5, 5], [9, 9, 5, 5, 5, 5, 9, 9], [9, 9, 5, 5, 5, 5, 9, 9], [5, 5, 5, 9, 9, 5, 5, 5], [7, 5, 7, 5, 5, 7, 5, 7]].

Quiz
If input grids are like that
[[8, 5, 7, 8], [7, 7, 8, 8], [5, 5, 8, 5]],
then output grids?

=========","The pattern in this problem is that the input grid is mirrored both horizontally and vertically to form the output grid. 

So, if the input grid is 
[[8, 5, 7, 8], [7, 7, 8, 8], [5, 5, 8, 5]],

First, we mirror the grid horizontally:
[[8, 5, 7, 8, 8, 7, 5, 8], [7, 7, 8, 8, 8, 8, 7, 7], [5, 5, 8, 5, 5, 8, 5, 5]]

Then, we mirror the grid vertically:
[[8, 5, 7, 8, 8, 7, 5, 8], [7, 7, 8, 8, 8, 8, 7, 7], [5, 5, 8, 5, 5, 8, 5, 5], [5, 5, 8, 5, 5, 8, 5, 5], [7, 7, 8, 8, 8, 8, 7, 7], [8, 5, 7, 8, 8, 7, 5, 8]]

So, the output grid is 
[[8, 5, 7, 8, 8, 7, 5, 8], [7, 7, 8, 8, 8, 8, 7, 7], [5, 5, 8, 5, 5, 8, 5, 5], [5, 5, 8, 5, 5, 8, 5, 5], [7, 7, 8, 8, 8, 8, 7, 7], [8, 5, 7, 8, 8, 7, 5, 8]].","[[8, 5, 7, 8], [7, 7, 8, 8], [5, 5, 8, 5]],

First, we mirror the grid horizontally:
[[8, 5, 7, 8, 8, 7, 5, 8], [7, 7, 8, 8, 8, 8, 7, 7], [5, 5, 8, 5, 5, 8, 5, 5]]

Then, we mirror the grid vertically:
[[8, 5, 7, 8, 8, 7, 5, 8], [7, 7, 8, 8, 8, 8, 7, 7], [5, 5, 8, 5, 5, 8, 5, 5], [5, 5, 8, 5, 5, 8, 5, 5], [7, 7, 8, 8, 8, 8, 7, 7], [8, 5, 7, 8, 8, 7, 5, 8]]

So, the output grid is 
[[8, 5, 7, 8, 8, 7, 5, 8], [7, 7, 8, 8, 8, 8, 7, 7], [5, 5, 8, 5, 5, 8, 5, 5], [5, 5, 8, 5, 5, 8, 5, 5], [7, 7, 8, 8, 8, 8, 7, 7], [8, 5, 7, 8, 8, 7, 5, 8]]","[[8, 5, 7, 8, 8, 7, 5, 8], [7, 7, 8, 8, 8, 8, 7, 7], [5, 5, 8, 5, 5, 8, 5, 5], [5, 5, 8, 5, 5, 8, 5, 5], [7, 7, 8, 8, 8, 8, 7, 7], [8, 5, 7, 8, 8, 7, 5, 8]]","[[5, 8, 5, 5, 5, 5, 8, 5], [8, 8, 7, 7, 7, 7, 8, 8], [8, 7, 5, 8, 8, 5, 7, 8], [8, 7, 5, 8, 8, 5, 7, 8], [8, 8, 7, 7, 7, 7, 8, 8], [5, 8, 5, 5, 5, 5, 8, 5]]",False,,Medium
0c9aba6e,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 2, 2, 0], [2, 0, 0, 0], [0, 2, 0, 2], [2, 2, 2, 2], [0, 0, 2, 0], [0, 0, 2, 2], [7, 7, 7, 7], [0, 6, 6, 0], [0, 0, 0, 0], [6, 6, 6, 6], [6, 6, 0, 6], [0, 6, 6, 6], [0, 0, 6, 0]],
then this grids change to output grids below
[[8, 0, 0, 8], [0, 8, 8, 8], [0, 0, 0, 0], [0, 0, 0, 0], [8, 0, 0, 0], [8, 8, 0, 0]].

Example 2
If input grids are like that
[[2, 2, 0, 2], [2, 0, 2, 2], [2, 2, 0, 0], [0, 2, 0, 2], [0, 2, 2, 0], [2, 0, 0, 2], [7, 7, 7, 7], [6, 0, 6, 6], [0, 6, 0, 0], [0, 0, 0, 0], [0, 0, 0, 6], [6, 6, 0, 0], [6, 0, 6, 0]],
then this grids change to output grids below
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 8, 8], [8, 0, 8, 0], [0, 0, 0, 8], [0, 8, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 2], [0, 2, 2, 0], [2, 0, 0, 2], [0, 2, 2, 0], [2, 0, 2, 2], [0, 0, 0, 2], [7, 7, 7, 7], [6, 6, 0, 6], [6, 6, 6, 0], [0, 0, 0, 0], [6, 6, 0, 6], [6, 0, 6, 0], [0, 0, 6, 6]],
then output grids?

=========","The pattern in this problem seems to be that the grid is divided into three sections, separated by rows of the same number. The first section is ignored, the second section is transformed into a smaller grid with the number 8, and the third section is ignored.

In the first example, the grid is divided into three sections by rows of 7. The second section is transformed into a 6x4 grid with the number 8.

In the second example, the grid is divided into three sections by rows of 7. The second section is transformed into a 6x4 grid with the number 8.

Applying this pattern to the quiz input, the grid is divided into three sections by rows of 7. The second section is transformed into a 6x4 grid with the number 8.

So, the output grids should be:
[[0, 0, 8, 8], [8, 8, 0, 0], [0, 0, 0, 8], [8, 0, 0, 0], [0, 8, 0, 8], [0, 0, 8, 0]].","[[0, 0, 8, 8], [8, 8, 0, 0], [0, 0, 0, 8], [8, 0, 0, 0], [0, 8, 0, 8], [0, 0, 8, 0]]","[[0, 0, 8, 8], [8, 8, 0, 0], [0, 0, 0, 8], [8, 0, 0, 0], [0, 8, 0, 8], [0, 0, 8, 0]]","[[0, 0, 8, 0], [0, 0, 0, 8], [0, 8, 8, 0], [0, 0, 0, 0], [0, 8, 0, 0], [8, 8, 0, 0]]",False,,Medium
0e671a1a,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 4, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 0], [0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern here is that the number 5 is filled in a straight line between the two non-zero numbers in the grid. The line is filled in the direction of the non-zero number that is closest to the center of the grid.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0], [0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Medium
0f63c0b9,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]].

The pattern here is that each non-zero number in the input grid expands to fill its row and column in the output grid, with the exception of cells that are already filled by a number that was encountered earlier in the grid.","[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]","[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]","[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]",False,,Medium
103eff5b,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 1, 1, 3, 3, 3, 3, 0, 0, 0], [0, 0, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0], [0, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0], [0, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 4, 4, 4, 0, 0, 0, 0, 0], [0, 2, 2, 2, 4, 4, 4, 0, 0, 0, 0, 0], [0, 2, 2, 2, 4, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 4, 4, 4, 0, 0, 0, 1, 1, 1, 0, 0], [0, 4, 4, 4, 0, 0, 0, 1, 1, 1, 0, 0], [0, 4, 4, 4, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that the color of the objects in the grid changes according to the color of the object in the upper right corner of the grid. 

In the quiz case, the color of the object in the upper right corner is 4. So, all the objects in the grid which are colored as 8 will change to color 4. 

So, the output grids will be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0], [0, 0, 0, 0, 0",not_complete,not_complete,"[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Medium
12422b43,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[5, 0, 6, 0, 0], [5, 4, 4, 4, 0], [0, 0, 6, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]],
then this grids change to output grids below
[[5, 0, 6, 0, 0], [5, 4, 4, 4, 0], [0, 0, 6, 0, 0], [0, 0, 6, 0, 0], [0, 4, 4, 4, 0]].

Example 2
If input grids are like that
[[5, 0, 8, 8, 0, 0, 0], [5, 0, 0, 7, 0, 0, 0], [5, 0, 0, 4, 4, 0, 0], [0, 0, 3, 3, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[5, 0, 8, 8, 0, 0, 0], [5, 0, 0, 7, 0, 0, 0], [5, 0, 0, 4, 4, 0, 0], [0, 0, 3, 3, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 4, 4, 0, 0]].

Quiz
If input grids are like that
[[5, 0, 4, 4, 4, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that the objects in the grid are mirrored vertically. The objects in the top half of the grid are copied to the bottom half in reverse order. 

So, if the input grids are like that
[[5, 0, 4, 4, 4, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then the output grids would be
[[5, 0, 4, 4, 4, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 4, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0]].","[[5, 0, 4, 4, 4, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then the output grids would be
[[5, 0, 4, 4, 4, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 4, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0]]","[[5, 0, 4, 4, 4, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 4, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0]]","[[5, 0, 4, 4, 4, 0, 0], [5, 0, 0, 8, 0, 0, 0], [5, 0, 0, 6, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 4, 4, 4, 0, 0], [0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0], [0, 0, 4, 4, 4, 0, 0], [0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0]]",False,,Hard
12997ef3,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 3, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[2, 0, 2, 3, 0, 3, 4, 0, 4], [0, 2, 0, 0, 3, 0, 0, 4, 0], [2, 2, 2, 3, 3, 3, 4, 4, 4]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 8, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 3, 3], [3, 3, 3], [0, 3, 0], [0, 6, 6], [6, 6, 6], [0, 6, 0], [0, 8, 8], [8, 8, 8], [0, 8, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 8, 0, 3, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 2, 2], [2, 2, 2], [0, 2, 0], [0, 8, 8], [8, 8, 8], [0, 8, 0], [0, 3, 3], [3, 3, 3], [0, 3, 0], [0, 6, 6], [6, 6, 6], [0, 6, 0]].

The pattern in this problem is that each non-zero number in the input grid is expanded into a 3x3 grid in the output, with the number repeated in the middle row and column, and zeros elsewhere. The order of the numbers in the output corresponds to their order in the input.","[[0, 2, 2], [2, 2, 2], [0, 2, 0], [0, 8, 8], [8, 8, 8], [0, 8, 0], [0, 3, 3], [3, 3, 3], [0, 3, 0], [0, 6, 6], [6, 6, 6], [0, 6, 0]]","[[0, 2, 2], [2, 2, 2], [0, 2, 0], [0, 8, 8], [8, 8, 8], [0, 8, 0], [0, 3, 3], [3, 3, 3], [0, 3, 0], [0, 6, 6], [6, 6, 6], [0, 6, 0]]","[[0, 2, 2, 0, 8, 8, 0, 3, 3, 0, 6, 6], [2, 2, 0, 8, 8, 0, 3, 3, 0, 6, 6, 0], [2, 2, 0, 8, 8, 0, 3, 3, 0, 6, 6, 0]]",False,,Multiple solutions
12eac192,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 1, 0, 7, 7, 7, 0], [8, 8, 0, 0, 5, 5, 0, 0], [0, 8, 8, 0, 0, 5, 5, 0], [0, 1, 1, 0, 8, 0, 0, 1], [0, 7, 0, 1, 8, 0, 0, 0], [8, 0, 0, 0, 1, 0, 7, 0], [0, 8, 8, 8, 1, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 3, 0, 7, 7, 7, 0], [8, 8, 0, 0, 5, 5, 0, 0], [0, 8, 8, 0, 0, 5, 5, 0], [0, 3, 3, 0, 3, 0, 0, 3], [0, 3, 0, 3, 3, 0, 0, 0], [3, 0, 0, 0, 3, 0, 3, 0], [0, 8, 8, 8, 3, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 1, 8, 1, 1, 1, 0], [1, 5, 1, 7, 1, 1, 0, 0], [0, 8, 0, 7, 7, 7, 8, 8], [0, 8, 8, 0, 0, 0, 8, 0], [0, 7, 0, 0, 8, 5, 5, 0], [1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 8, 7, 7, 8, 0, 0], [0, 0, 8, 7, 7, 0, 8, 8], [0, 8, 8, 0, 8, 0, 8, 8]],
then this grids change to output grids below
[[0, 0, 3, 3, 1, 1, 1, 0], [3, 3, 3, 7, 1, 1, 0, 0], [0, 8, 0, 7, 7, 7, 8, 8], [0, 8, 8, 0, 0, 0, 8, 0], [0, 3, 0, 0, 3, 3, 3, 0], [3, 0, 0, 0, 0, 0, 0, 3], [3, 0, 8, 7, 7, 3, 0, 0], [0, 0, 8, 7, 7, 0, 8, 8], [0, 8, 8, 0, 3, 0, 8, 8]].

Quiz
If input grids are like that
[[0, 5, 0, 1, 5, 5, 0, 5], [1, 1, 0, 0, 0, 1, 1, 0], [0, 7, 7, 0, 0, 0, 0, 5], [1, 1, 0, 5, 0, 1, 0, 0], [0, 1, 0, 5, 5, 5, 0, 1], [0, 7, 0, 0, 7, 0, 0, 7], [1, 0, 1, 0, 0, 0, 1, 7], [0, 0, 1, 1, 0, 1, 0, 7]],
then output grids?

=========","The pattern in this problem is that the number 1 in the input grid is replaced by the number 3 in the output grid. The position of other numbers remains the same. 

So, if the input grid is 
[[0, 5, 0, 1, 5, 5, 0, 5], [1, 1, 0, 0, 0, 1, 1, 0], [0, 7, 7, 0, 0, 0, 0, 5], [1, 1, 0, 5, 0, 1, 0, 0], [0, 1, 0, 5, 5, 5, 0, 1], [0, 7, 0, 0, 7, 0, 0, 7], [1, 0, 1, 0, 0, 0, 1, 7], [0, 0, 1, 1, 0, 1, 0, 7]],

then the output grid will be 
[[0, 5, 0, 3, 5, 5, 0, 5], [3, 3, 0, 0, 0, 3, 3, 0], [0, 7, 7, 0, 0, 0, 0, 5], [3, 3, 0, 5, 0, 3, 0, 0], [0, 3, 0, 5, 5, 5, 0, 3], [0, 7, 0, 0, 7, 0, 0, 7], [3, 0, 3, 0, 0, 0, 3, 7], [0, 0, 3, 3, 0, 3, 0, 7]].","[[0, 5, 0, 1, 5, 5, 0, 5], [1, 1, 0, 0, 0, 1, 1, 0], [0, 7, 7, 0, 0, 0, 0, 5], [1, 1, 0, 5, 0, 1, 0, 0], [0, 1, 0, 5, 5, 5, 0, 1], [0, 7, 0, 0, 7, 0, 0, 7], [1, 0, 1, 0, 0, 0, 1, 7], [0, 0, 1, 1, 0, 1, 0, 7]],

then the output grid will be 
[[0, 5, 0, 3, 5, 5, 0, 5], [3, 3, 0, 0, 0, 3, 3, 0], [0, 7, 7, 0, 0, 0, 0, 5], [3, 3, 0, 5, 0, 3, 0, 0], [0, 3, 0, 5, 5, 5, 0, 3], [0, 7, 0, 0, 7, 0, 0, 7], [3, 0, 3, 0, 0, 0, 3, 7], [0, 0, 3, 3, 0, 3, 0, 7]]","[[0, 5, 0, 3, 5, 5, 0, 5], [3, 3, 0, 0, 0, 3, 3, 0], [0, 7, 7, 0, 0, 0, 0, 5], [3, 3, 0, 5, 0, 3, 0, 0], [0, 3, 0, 5, 5, 5, 0, 3], [0, 7, 0, 0, 7, 0, 0, 7], [3, 0, 3, 0, 0, 0, 3, 7], [0, 0, 3, 3, 0, 3, 0, 7]]","[[0, 3, 0, 3, 3, 3, 0, 3], [3, 3, 0, 0, 0, 3, 3, 0], [0, 3, 3, 0, 0, 0, 0, 3], [1, 1, 0, 5, 0, 3, 0, 0], [0, 1, 0, 5, 5, 5, 0, 3], [0, 3, 0, 0, 3, 0, 0, 7], [3, 0, 1, 0, 0, 0, 3, 7], [0, 0, 1, 1, 0, 3, 0, 7]]",False,,Medium
136b0064,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[1, 1, 0, 0, 2, 0, 2, 4, 0, 0, 0, 5, 0, 0, 0], [1, 0, 1, 0, 2, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 2, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [6, 0, 6, 0, 3, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 3, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 2, 2, 0], [0, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[2, 0, 2, 0, 6, 0, 6, 4, 0, 5, 0, 0, 0, 0, 0], [2, 0, 2, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 3, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 3, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 6, 0, 6, 4, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [6, 0, 6, 0, 1, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 1, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 5, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 6, 0, 0], [0, 3, 3, 3, 3, 0, 0], [0, 6, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[1, 1, 0, 0, 1, 1, 0, 4, 0, 0, 5, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 1, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 1, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [6, 0, 6, 0, 6, 0, 6, 4, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 3, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 3, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [6, 0, 6, 0, 2, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 2, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 2, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 3], [0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0]].

The pattern here is that the objects are moving towards the center column, and the order of the objects is preserved. The objects are grouped by their color and the groups are separated by rows of zeros. The center column is filled with the color 4.","[[0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 3], [0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 3], [0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 5, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 6, 0, 0], [0, 3, 3, 3, 3, 0, 0], [2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]",False,,Hard
137f0df0,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[5, 5, 0, 5, 5, 0, 5, 5, 0, 0], [5, 5, 0, 5, 5, 0, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 0, 5, 5, 0, 5, 5, 0, 0], [5, 5, 0, 5, 5, 0, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 0, 5, 5, 0, 5, 5, 0, 0], [5, 5, 0, 5, 5, 0, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[5, 5, 2, 5, 5, 2, 5, 5, 0, 0], [5, 5, 2, 5, 5, 2, 5, 5, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 1, 1], [5, 5, 2, 5, 5, 2, 5, 5, 0, 0], [5, 5, 2, 5, 5, 2, 5, 5, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 1, 1], [5, 5, 2, 5, 5, 2, 5, 5, 0, 0], [5, 5, 2, 5, 5, 2, 5, 5, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 5, 5, 0, 0, 5, 5, 0, 0], [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 5, 5, 2, 2, 5, 5, 0, 0], [0, 0, 5, 5, 2, 2, 5, 5, 0, 0], [1, 1, 2, 2, 2, 2, 2, 2, 1, 1], [0, 0, 5, 5, 2, 2, 5, 5, 0, 0], [0, 0, 5, 5, 2, 2, 5, 5, 0, 0], [1, 1, 2, 2, 2, 2, 2, 2, 1, 1], [0, 0, 5, 5, 2, 2, 5, 5, 0, 0], [0, 0, 5, 5, 2, 2, 5, 5, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 0, 0, 5, 5, 0, 5, 5], [0, 5, 5, 0, 0, 5, 5, 0, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 0, 0, 5, 5, 0, 5, 5], [0, 5, 5, 0, 0, 5, 5, 0, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 0, 0, 5, 5, 0, 5, 5], [0, 5, 5, 0, 0, 5, 5, 0, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]].

The pattern here is that the 0's in the middle of the 5's are replaced with 2's, and the 0's in the middle of the grid are replaced with 1's. The 0's on the outer edges of the grid remain 0's.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]]","[[0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 5, 5, 2, 2, 5, 5, 2, 5, 5], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0]]",False,,Easy
140c817e,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
then this grids change to output grids below
[[8, 8, 1, 8, 8, 1, 8, 8, 8, 1, 3, 1, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1], [8, 3, 1, 3, 8, 1, 8, 8, 8, 1, 3, 1, 3], [1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 3, 1, 3, 8, 1, 8, 8, 8, 1, 8, 1, 8], [8, 8, 1, 8, 8, 1, 8, 8, 3, 1, 3, 1, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1], [8, 8, 1, 8, 8, 1, 8, 8, 3, 1, 3, 1, 8], [8, 8, 1, 8, 3, 1, 3, 8, 8, 1, 8, 1, 8], [1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1], [8, 8, 1, 8, 3, 1, 3, 8, 8, 1, 8, 1, 8], [8, 8, 1, 8, 8, 1, 8, 8, 8, 1, 8, 1, 8], [8, 8, 1, 8, 8, 1, 8, 8, 8, 1, 8, 1, 8]].

Example 2
If input grids are like that
[[9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 1, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 1, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9]],
then this grids change to output grids below
[[9, 9, 9, 1, 9, 9, 1, 9, 9], [9, 9, 9, 1, 9, 9, 1, 9, 9], [9, 9, 3, 1, 3, 9, 1, 9, 9], [1, 1, 1, 2, 1, 1, 1, 1, 1], [9, 9, 3, 1, 3, 9, 1, 9, 9], [9, 9, 9, 1, 9, 3, 1, 3, 9], [1, 1, 1, 1, 1, 1, 2, 1, 1], [9, 9, 9, 1, 9, 3, 1, 3, 9], [9, 9, 9, 1, 9, 9, 1, 9, 9]].

Quiz
If input grids are like that
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1]],
then output grids?

=========","The output grids would be:

[[8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 3, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 2, 1]].

The pattern here is that the 1's are surrounded by 2's and 3's in a cross pattern, with the 2's being in the center of the cross and the 3's being on the arms of the cross. The rest of the grid remains as 8's.","[[8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 3, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 2, 1]]","[[8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 3, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], 
 [8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 2, 1]]","[[8, 8, 1, 8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 1], [8, 8, 1, 8, 1, 8, 3, 1, 3, 8, 8, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1], [8, 8, 1, 8, 1, 8, 3, 1, 3, 8, 8, 8, 8, 1], [8, 3, 1, 3, 1, 8, 8, 1, 8, 8, 8, 8, 8, 1], [1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 3, 1, 3, 1, 8, 8, 1, 8, 8, 8, 8, 8, 1], [8, 8, 1, 8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 1], [8, 8, 1, 8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 1], [8, 8, 1, 8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 1], [8, 8, 1, 3, 1, 3, 8, 1, 8, 8, 8, 8, 8, 1], [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 1, 3, 1, 3, 8, 1, 8, 8, 8, 8, 3, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]]",False,,Medium
14754a24,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 5, 0, 5, 5, 0, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0, 5, 0], [0, 0, 0, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 5, 5, 0, 0, 0], [0, 5, 5, 0, 0, 0, 5, 0, 5, 5, 0, 0, 0, 0, 5, 0, 0, 5, 0], [0, 0, 5, 5, 0, 5, 5, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 0], [0, 0, 5, 0, 0, 4, 0, 5, 0, 5, 0, 5, 0, 0, 0, 5, 5, 0, 5], [0, 0, 5, 0, 4, 5, 4, 5, 5, 0, 5, 0, 0, 0, 5, 4, 5, 5, 5], [5, 0, 0, 0, 0, 4, 0, 0, 5, 5, 0, 0, 0, 0, 5, 4, 4, 5, 0], [5, 0, 5, 5, 5, 5, 0, 5, 0, 0, 0, 5, 0, 5, 0, 4, 5, 0, 0], [5, 5, 0, 0, 5, 0, 5, 0, 5, 5, 0, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 0, 0, 5, 5, 5, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0], [0, 0, 5, 5, 0, 0, 0, 0, 5, 4, 5, 0, 5, 5, 0, 0, 0, 0, 0], [5, 5, 5, 4, 0, 5, 0, 5, 5, 4, 4, 5, 0, 0, 5, 5, 5, 5, 0], [0, 0, 4, 5, 0, 0, 5, 5, 0, 4, 5, 0, 5, 0, 0, 5, 5, 5, 5], [0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 5, 0, 5, 0, 0, 5, 5], [5, 5, 0, 5, 0, 0, 0, 5, 5, 5, 5, 5, 0, 5, 0, 0, 0, 0, 0], [5, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 5], [5, 0, 5, 0, 5, 5, 0, 5, 5, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0], [0, 5, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 5, 0, 5, 5, 0, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0, 5, 0], [0, 0, 0, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 5, 5, 0, 0, 0], [0, 5, 5, 0, 0, 0, 5, 0, 5, 5, 0, 0, 0, 0, 5, 0, 0, 5, 0], [0, 0, 5, 5, 0, 5, 5, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 0], [0, 0, 5, 0, 0, 4, 0, 5, 0, 5, 0, 5, 0, 0, 0, 5, 5, 0, 5], [0, 0, 5, 0, 4, 2, 4, 5, 5, 0, 5, 0, 0, 0, 5, 4, 5, 5, 5], [5, 0, 0, 0, 0, 4, 0, 0, 5, 5, 0, 0, 0, 0, 2, 4, 4, 5, 0], [5, 0, 5, 5, 5, 5, 0, 5, 0, 0, 0, 5, 0, 5, 0, 4, 5, 0, 0], [5, 5, 0, 0, 5, 0, 5, 0, 5, 5, 0, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 0, 0, 5, 5, 5, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0], [0, 0, 2, 5, 0, 0, 0, 0, 5, 4, 5, 0, 5, 5, 0, 0, 0, 0, 0], [5, 2, 2, 4, 0, 5, 0, 5, 2, 4, 4, 5, 0, 0, 5, 5, 5, 5, 0], [0, 0, 4, 5, 0, 0, 5, 5, 0, 4, 5, 0, 5, 0, 0, 5, 5, 5, 5], [0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 5, 0, 5, 0, 0, 5, 5], [5, 5, 0, 5, 0, 0, 0, 5, 5, 5, 5, 5, 0, 5, 0, 0, 0, 0, 0], [5, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 5], [5, 0, 5, 0, 5, 5, 0, 5, 5, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0], [0, 5, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 5, 0, 0, 5, 5, 0, 0, 0, 5, 5, 0, 5, 0, 0, 5], [5, 5, 0, 0, 0, 0, 5, 0, 5, 0, 0, 5, 5, 5, 0, 0], [0, 0, 4, 5, 0, 5, 0, 5, 5, 0, 0, 4, 5, 5, 5, 0], [0, 5, 5, 4, 0, 0, 5, 0, 0, 5, 0, 0, 4, 0, 0, 5], [0, 0, 4, 5, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 5, 0], [0, 0, 0, 5, 0, 5, 5, 5, 5, 0, 5, 0, 5, 5, 0, 5], [5, 0, 5, 0, 0, 4, 5, 4, 5, 5, 5, 5, 0, 5, 0, 0], [0, 0, 0, 0, 5, 5, 4, 5, 5, 0, 0, 0, 0, 0, 0, 5], [0, 0, 5, 5, 0, 0, 5, 0, 5, 5, 0, 5, 5, 4, 5, 0], [0, 0, 5, 0, 0, 5, 0, 0, 0, 5, 5, 0, 5, 5, 4, 5], [5, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 5, 5], [5, 5, 4, 5, 4, 5, 0, 5, 5, 5, 0, 0, 0, 0, 5, 5], [5, 0, 0, 5, 5, 5, 0, 5, 4, 5, 4, 0, 5, 0, 0, 0], [5, 0, 0, 5, 5, 0, 0, 5, 0, 4, 0, 0, 0, 5, 5, 0], [5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 5, 5, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 5, 5, 5, 5, 0, 5], [5, 0, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 5, 0, 0], [5, 0, 0, 0, 0, 5, 0, 0, 5, 5, 5, 5, 0, 0, 0, 5]],
then this grids change to output grids below
[[0, 5, 0, 0, 5, 5, 0, 0, 0, 5, 5, 0, 5, 0, 0, 5], [5, 5, 0, 0, 0, 0, 5, 0, 5, 0, 0, 5, 2, 5, 0, 0], [0, 0, 4, 5, 0, 5, 0, 5, 5, 0, 0, 4, 2, 2, 5, 0], [0, 2, 2, 4, 0, 0, 5, 0, 0, 5, 0, 0, 4, 0, 0, 5], [0, 0, 4, 5, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 5, 0], [0, 0, 0, 5, 0, 5, 2, 5, 5, 0, 5, 0, 5, 5, 0, 5], [5, 0, 5, 0, 0, 4, 2, 4, 5, 5, 5, 5, 0, 5, 0, 0], [0, 0, 0, 0, 5, 5, 4, 5, 5, 0, 0, 0, 0, 0, 0, 5], [0, 0, 5, 5, 0, 0, 5, 0, 5, 5, 0, 5, 5, 4, 5, 0], [0, 0, 5, 0, 0, 5, 0, 0, 0, 5, 5, 0, 2, 2, 4, 5], [5, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 2, 5, 5], [5, 5, 4, 2, 4, 5, 0, 5, 5, 2, 0, 0, 0, 0, 5, 5], [5, 0, 0, 2, 5, 5, 0, 5, 4, 2, 4, 0, 5, 0, 0, 0], [5, 0, 0, 5, 5, 0, 0, 5, 0, 4, 0, 0, 0, 5, 5, 0], [5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 5, 5, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 5, 5, 5, 5, 0, 5], [5, 0, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 5, 0, 0], [5, 0, 0, 0, 0, 5, 0, 0, 5, 5, 5, 5, 0, 0, 0, 5]].

Quiz
If input grids are like that
[[0, 0, 5, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 5, 4, 5, 0, 0, 5], [0, 5, 5, 0, 5, 4, 5, 5, 5, 0, 5, 5, 0, 4, 5, 0, 5, 5, 0], [5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 0, 5, 5, 5, 5, 0, 5, 0, 5], [5, 5, 4, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 5], [5, 4, 5, 5, 5, 5, 0, 5, 0, 0, 5, 5, 0, 5, 5, 0, 5, 0, 0], [5, 5, 0, 5, 0, 0, 0, 5, 5, 0, 5, 4, 5, 0, 0, 5, 0, 5, 5], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 4, 4, 5, 0, 5, 5, 0, 0, 0], [5, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 5, 5, 0, 0, 5, 0], [0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 5], [0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 5, 0], [0, 0, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 4, 0, 0, 0, 5, 0], [5, 5, 4, 5, 5, 5, 5, 5, 0, 0, 5, 0, 4, 5, 4, 0, 5, 0, 5], [5, 5, 5, 4, 0, 0, 0, 5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 5, 5], [0, 0, 4, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5], [5, 0, 5, 0, 0, 5, 0, 4, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5], [5, 5, 0, 5, 5, 0, 5, 5, 4, 0, 0, 5, 5, 5, 0, 5, 0, 5, 5], [5, 5, 5, 0, 5, 5, 5, 4, 0, 5, 5, 0, 5, 5, 0, 0, 5, 5, 0], [5, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0], [0, 5, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5]],
then output grids?

=========","The output grids would be:

[[0, 0, 5, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 5, 4, 5, 0, 0, 5], [0, 5, 5, 0, 5, 4, 5, 5, 5, 0, 5, 5, 0, 4, 5, 0, 5, 5, 0], [5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 0, 5, 5, 5, 5, 0, 5, 0, 5], [5, 5, 4, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 5], [5, 4, 5, 5, 5, 5, 0, 5, 0, 0, 5, 5, 0, 5, 5, 0, 5, 0, 0], [5, 5, 0, 5, 0, 0, 0, 5, 5, 0, 5, 4, 5, 0, 0, 5, 0, 5, 5], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 4, 4, 5, 0, 5, 5, 0, 0, 0], [5, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 5, 5, 0, 0, 5, 0], [0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 5], [0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 5, 0], [0, 0, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 4, 0, 0, 0, 5, 0], [5, 5, 4, 5, 5, 5, 5, 5, 0, 0, 5, 0, 4, 5, 4, 0, 5, 0, 5], [5, 5, 5, 4, 0, 0, 0, 5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 5, 5], [0, 0, 4, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5], [5, 0, 5, 0, 0, 5, 0, 4, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5], [5, 5, 0, 5, 5, 0, 5, 5, 4, 0, 0, 5, 5, 5, 0, 5, 0, 5, 5], [5, 5, 5, 0, 5, 5, 5, 4, 0, 5, 5, 0, 5, 5, 0, 0, 5, 5, 0], [5, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0], [0, 5, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5]].

The pattern here is that the color 5 is replaced by 4 and vice versa in certain positions. The positions are determined by the number of 5s in the row and column. If the number of 5s in the row is greater than or equal to 3 and the number of 5s in the column is less than or equal to 2, then the color 5 is replaced by 4 and vice versa.","[[0, 0, 5, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 5, 4, 5, 0, 0, 5], [0, 5, 5, 0, 5, 4, 5, 5, 5, 0, 5, 5, 0, 4, 5, 0, 5, 5, 0], [5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 0, 5, 5, 5, 5, 0, 5, 0, 5], [5, 5, 4, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 5], [5, 4, 5, 5, 5, 5, 0, 5, 0, 0, 5, 5, 0, 5, 5, 0, 5, 0, 0], [5, 5, 0, 5, 0, 0, 0, 5, 5, 0, 5, 4, 5, 0, 0, 5, 0, 5, 5], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 4, 4, 5, 0, 5, 5, 0, 0, 0], [5, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 5, 5, 0, 0, 5, 0], [0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 5], [0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 5, 0], [0, 0, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 4, 0, 0, 0, 5, 0], [5, 5, 4, 5, 5, 5, 5, 5, 0, 0, 5, 0, 4, 5, 4, 0, 5, 0, 5], [5, 5, 5, 4, 0, 0, 0, 5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 5, 5], [0, 0, 4, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5], [5, 0, 5, 0, 0, 5, 0, 4, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5], [5, 5, 0, 5, 5, 0, 5, 5, 4, 0, 0, 5, 5, 5, 0, 5, 0, 5, 5], [5, 5, 5, 0, 5, 5, 5, 4, 0, 5, 5, 0, 5, 5, 0, 0, 5, 5, 0], [5, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0], [0, 5, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5]]","[[0, 0, 5, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 5, 4, 5, 0, 0, 5], [0, 5, 5, 0, 5, 4, 5, 5, 5, 0, 5, 5, 0, 4, 5, 0, 5, 5, 0], [5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 0, 5, 5, 5, 5, 0, 5, 0, 5], [5, 5, 4, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 5], [5, 4, 5, 5, 5, 5, 0, 5, 0, 0, 5, 5, 0, 5, 5, 0, 5, 0, 0], [5, 5, 0, 5, 0, 0, 0, 5, 5, 0, 5, 4, 5, 0, 0, 5, 0, 5, 5], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 4, 4, 5, 0, 5, 5, 0, 0, 0], [5, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 5, 5, 0, 0, 5, 0], [0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 5], [0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 5, 0], [0, 0, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 4, 0, 0, 0, 5, 0], [5, 5, 4, 5, 5, 5, 5, 5, 0, 0, 5, 0, 4, 5, 4, 0, 5, 0, 5], [5, 5, 5, 4, 0, 0, 0, 5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 5, 5], [0, 0, 4, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5], [5, 0, 5, 0, 0, 5, 0, 4, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5], [5, 5, 0, 5, 5, 0, 5, 5, 4, 0, 0, 5, 5, 5, 0, 5, 0, 5, 5], [5, 5, 5, 0, 5, 5, 5, 4, 0, 5, 5, 0, 5, 5, 0, 0, 5, 5, 0], [5, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0], [0, 5, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5]]","[[0, 0, 5, 0, 0, 5, 2, 0, 5, 0, 5, 0, 2, 2, 4, 5, 0, 0, 5], [0, 5, 5, 0, 5, 4, 2, 2, 5, 0, 5, 5, 0, 4, 5, 0, 5, 5, 0], [5, 2, 5, 0, 5, 5, 4, 0, 5, 5, 0, 5, 5, 5, 5, 0, 5, 0, 5], [2, 2, 4, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 5], [5, 4, 5, 5, 5, 5, 0, 5, 0, 0, 5, 5, 0, 5, 5, 0, 5, 0, 0], [5, 5, 0, 5, 0, 0, 0, 5, 5, 0, 5, 4, 5, 0, 0, 5, 0, 5, 5], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 4, 4, 2, 0, 5, 5, 0, 0, 0], [5, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 2, 0, 5, 5, 0, 0, 5, 0], [0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0, 5], [0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 5, 0], [0, 0, 0, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 4, 0, 0, 0, 5, 0], [5, 5, 4, 5, 5, 5, 5, 5, 0, 0, 5, 0, 4, 2, 4, 0, 5, 0, 5], [5, 2, 2, 4, 0, 0, 0, 5, 5, 5, 0, 5, 5, 4, 0, 5, 5, 5, 5], [0, 0, 4, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5], [5, 0, 5, 0, 0, 5, 0, 4, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5], [5, 5, 0, 5, 5, 0, 2, 2, 4, 0, 0, 5, 5, 5, 0, 5, 0, 5, 5], [5, 5, 5, 0, 5, 5, 5, 4, 0, 5, 5, 0, 5, 5, 0, 0, 5, 5, 0], [5, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0], [0, 5, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5]]",False,,Hard
15113be4,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 1, 0, 4, 0, 0, 0], [4, 8, 8, 0, 0, 8, 8, 4, 0, 0, 1, 4, 0, 1, 0, 4, 0, 0, 0, 4, 0, 1, 0], [4, 8, 8, 0, 0, 8, 8, 4, 0, 1, 1, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0], [4, 0, 0, 8, 8, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 0, 0, 8, 8, 0, 0, 4, 1, 1, 1, 4, 0, 1, 0, 4, 0, 0, 0, 4, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 0, 1, 0, 4, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 0, 1, 0, 4, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 1, 0], [0, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 1, 1, 4, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 1, 4, 0, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 4, 0, 1, 1, 4, 0, 1, 0], [0, 0, 0, 4, 0, 1, 1, 4, 0, 1, 1, 4, 1, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0], [0, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 1, 1, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 1], [0, 1, 0, 4, 1, 0, 1, 4, 0, 1, 0, 4, 0, 1, 0, 4, 0, 0, 1, 4, 1, 0, 0], [1, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 0, 1], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 0, 0, 1, 4, 1, 1, 0], [1, 1, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 0, 1, 0, 4, 1, 1, 0, 4, 1, 0, 1], [1, 0, 0, 4, 1, 1, 1, 4, 0, 1, 0, 4, 0, 1, 1, 4, 1, 1, 1, 4, 0, 0, 0]],
then this grids change to output grids below
[[4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1, 4, 8, 0, 8, 4, 0, 1, 0, 4, 0, 0, 0], [4, 8, 8, 0, 0, 8, 8, 4, 0, 0, 1, 4, 0, 8, 0, 4, 0, 0, 0, 4, 0, 1, 0], [4, 8, 8, 0, 0, 8, 8, 4, 0, 1, 1, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0], [4, 0, 0, 8, 8, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 0, 0, 8, 8, 0, 0, 4, 8, 1, 8, 4, 0, 1, 0, 4, 0, 0, 0, 4, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 4, 0, 8, 1, 4, 0, 1, 0, 4, 0, 1, 0, 4, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 0, 1, 0, 4, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 1, 0], [0, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 1, 1, 4, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 1, 4, 0, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 4, 0, 1, 1, 4, 0, 1, 0], [0, 0, 0, 4, 0, 1, 1, 4, 0, 1, 1, 4, 1, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0], [0, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 1, 1, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 1], [0, 1, 0, 4, 1, 0, 1, 4, 0, 1, 0, 4, 0, 1, 0, 4, 0, 0, 1, 4, 1, 0, 0], [1, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 0, 1], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 0, 0, 1, 4, 1, 1, 0], [1, 1, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 0, 1, 0, 4, 1, 1, 0, 4, 1, 0, 1], [1, 0, 0, 4, 1, 1, 1, 4, 0, 1, 0, 4, 0, 1, 1, 4, 1, 1, 1, 4, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 1, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 0, 0, 1, 4, 0, 1, 0], [1, 1, 0, 4, 0, 1, 0, 4, 1, 0, 1, 4, 1, 1, 1, 4, 1, 1, 0, 4, 0, 0, 1], [1, 1, 1, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 0, 1, 4, 0, 0, 1, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 1, 0, 0], [0, 0, 0, 4, 0, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1], [0, 1, 0, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 0, 4, 0, 1, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 0, 1, 0, 4, 0, 1, 1], [0, 0, 0, 4, 0, 1, 0, 4, 0, 0, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 0, 0, 1], [0, 1, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 1, 4, 1, 1, 0, 4, 1, 0, 0, 4, 0, 0, 1, 4, 0, 0, 1, 4, 0, 0, 1], [1, 1, 1, 4, 1, 0, 1, 4, 0, 0, 1, 4, 0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0], [1, 1, 0, 4, 1, 1, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 0, 1, 1, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 0, 1, 0, 4, 1, 0, 1, 4, 1, 0, 1, 4, 0, 0, 0, 0, 6, 6, 4], [1, 1, 0, 4, 0, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0, 0, 6, 6, 4], [0, 0, 0, 4, 0, 0, 1, 4, 0, 0, 0, 4, 0, 1, 1, 4, 6, 6, 6, 6, 0, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 0, 0, 4], [0, 0, 1, 4, 1, 0, 0, 4, 0, 1, 0, 4, 1, 1, 0, 4, 0, 0, 6, 6, 0, 0, 4], [1, 1, 1, 4, 0, 0, 0, 4, 1, 1, 1, 4, 0, 0, 1, 4, 0, 0, 6, 6, 0, 0, 4], [0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4]],
then this grids change to output grids below
[[0, 0, 6, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 0, 0, 1, 4, 0, 1, 0], [6, 6, 0, 4, 0, 1, 0, 4, 1, 0, 1, 4, 1, 1, 1, 4, 1, 1, 0, 4, 0, 0, 1], [1, 6, 1, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 0, 1, 4, 0, 0, 1, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 1, 0, 0], [0, 0, 0, 4, 0, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1], [0, 1, 0, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 0, 4, 0, 1, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 0, 1, 0, 4, 0, 1, 1], [0, 0, 0, 4, 0, 1, 0, 4, 0, 0, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 0, 0, 1], [0, 1, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 6, 4, 1, 1, 0, 4, 1, 0, 0, 4, 0, 0, 1, 4, 0, 0, 6, 4, 0, 0, 1], [6, 6, 1, 4, 1, 0, 1, 4, 0, 0, 1, 4, 0, 0, 0, 4, 6, 6, 0, 4, 1, 0, 0], [1, 6, 0, 4, 1, 1, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 0, 6, 1, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 0, 1, 0, 4, 1, 0, 1, 4, 1, 0, 1, 4, 0, 0, 0, 0, 6, 6, 4], [1, 1, 0, 4, 0, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0, 0, 0, 6, 6, 4], [0, 0, 0, 4, 0, 0, 1, 4, 0, 0, 0, 4, 0, 1, 1, 4, 6, 6, 6, 6, 0, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 0, 0, 4], [0, 0, 1, 4, 1, 0, 0, 4, 0, 1, 0, 4, 1, 1, 0, 4, 0, 0, 6, 6, 0, 0, 4], [1, 1, 1, 4, 0, 0, 0, 4, 1, 1, 1, 4, 0, 0, 1, 4, 0, 0, 6, 6, 0, 0, 4], [0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4]].

Quiz
If input grids are like that
[[1, 0, 1, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 0, 7, 7, 4], [0, 1, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 4, 0, 0, 0, 0, 7, 7, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 4], [0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 4], [0, 1, 0, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 1, 4, 7, 7, 0, 0, 0, 0, 4], [1, 0, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 0, 1, 0, 4, 7, 7, 0, 0, 0, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 0, 0, 1, 4, 1, 1, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 1, 1, 0], [1, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0], [0, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 1, 4, 0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 0, 4, 0, 0, 0, 4, 0, 0, 1], [1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 1, 1, 0, 4, 0, 0, 0], [0, 1, 1, 4, 0, 1, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0], [0, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0], [1, 1, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 1, 0, 1, 4, 0, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 1, 1, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 1, 0, 4, 1, 1, 0, 4, 0, 1, 0], [0, 0, 0, 4, 1, 1, 1, 4, 1, 1, 1, 4, 0, 1, 1, 4, 1, 0, 1, 4, 1, 1, 0], [0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0]],
then output grids?

=========","The output grids would be:

[[1, 0, 6, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4], [6, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 0, 7, 7, 4], [0, 6, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 4, 0, 0, 0, 0, 7, 7, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 4], [0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 4], [0, 1, 0, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 1, 4, 7, 7, 0, 0, 0, 0, 4], [1, 0, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 0, 1, 0, 4, 7, 7, 0, 0, 0, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 0, 0, 1, 4, 1, 1, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 1, 1, 0], [1, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0], [0, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 6, 4, 0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 0, 4, 0, 0, 0, 4, 0, 0, 1], [6, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 1, 1, 0, 4, 0, 0, 0], [1, 6, 1, 4, 0, 1, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0], [0, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0], [1, 1, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 1, 0, 1, 4, 0, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 1, 1, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 1, 0, 4, 1, 1, 0, 4, 0, 1, 0], [0, 0, 0, 4, 1, 1, 1, 4, 1, 1, 1, 4, 0, 1, 1, 4, 1, 0, 1, 4, 1, 1, 0], [0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0]]","[[1, 0, 6, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4], [6, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 0, 7, 7, 4], [0, 6, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 4, 0, 0, 0, 0, 7, 7, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 4], [0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 4], [0, 1, 0, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 1, 4, 7, 7, 0, 0, 0, 0, 4], [1, 0, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 0, 1, 0, 4, 7, 7, 0, 0, 0, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 0, 0, 1, 4, 1, 1, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 1, 1, 0], [1, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0], [0, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 6, 4, 0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 0, 4, 0, 0, 0, 4, 0, 0, 1], [6, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 1, 1, 0, 4, 0, 0, 0], [1, 6, 1, 4, 0, 1, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0], [0, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0], [1, 1, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 1, 0, 1, 4, 0, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 1, 1, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 1, 0, 4, 1, 1, 0, 4, 0, 1, 0], [0, 0, 0, 4, 1, 1, 1, 4, 1, 1, 1, 4, 0, 1, 1, 4, 1, 0, 1, 4, 1, 1, 0], [0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0]]","[[1, 0, 6, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4], [6, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 0, 7, 7, 4], [0, 6, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 4, 0, 0, 0, 0, 7, 7, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 4], [0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 4], [0, 1, 0, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 1, 4, 7, 7, 0, 0, 0, 0, 4], [1, 0, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 0, 1, 0, 4, 7, 7, 0, 0, 0, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 0, 0, 1, 4, 1, 1, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 1, 1, 0], [1, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0], [0, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 6, 4, 0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 0, 4, 0, 0, 0, 4, 0, 0, 1], [6, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 1, 1, 0, 4, 0, 0, 0], [1, 6, 1, 4, 0, 1, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0], [0, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0], [1, 1, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 1, 0, 1, 4, 0, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 1, 1, 4, 0, 0, 1, 4, 1, 0, 1, 4, 0, 1, 0, 4, 1, 1, 0, 4, 0, 1, 0], [0, 0, 0, 4, 1, 1, 1, 4, 1, 1, 1, 4, 0, 1, 1, 4, 1, 0, 1, 4, 1, 1, 0], [0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0]]","[[1, 0, 1, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 0, 0, 0, 0, 7, 7, 4], [0, 1, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 4, 0, 0, 0, 0, 7, 7, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 4], [0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 4], [0, 1, 0, 4, 1, 0, 0, 4, 0, 1, 1, 4, 0, 1, 1, 4, 7, 7, 0, 0, 0, 0, 4], [1, 0, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 0, 1, 0, 4, 7, 7, 0, 0, 0, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 0, 4, 0, 0, 7, 4, 1, 1, 0, 4, 1, 1, 0, 4, 0, 0, 1, 4, 1, 1, 0], [1, 0, 0, 4, 7, 7, 7, 4, 0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0], [0, 0, 0, 4, 7, 0, 0, 4, 1, 1, 0, 4, 1, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 0, 1, 4, 0, 0, 0, 4, 1, 0, 1, 4, 1, 1, 0, 4, 0, 0, 0, 4, 0, 0, 1], [1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 1, 4, 1, 1, 1, 4, 1, 1, 0, 4, 0, 0, 0], [0, 1, 1, 4, 0, 1, 0, 4, 1, 0, 1, 4, 0, 0, 1, 4, 1, 0, 0, 4, 1, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0], [0, 0, 1, 4, 0, 1, 0, 4, 1, 0, 0, 4, 1, 0, 0, 4, 1, 1, 0, 4, 1, 0, 0], [1, 1, 0, 4, 0, 0, 0, 4, 1, 0, 0, 4, 1, 0, 1, 4, 0, 0, 0, 4, 0, 1, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 1, 1, 4, 0, 0, 7, 4, 1, 0, 7, 4, 0, 1, 0, 4, 1, 1, 0, 4, 0, 1, 0], [0, 0, 0, 4, 7, 7, 7, 4, 7, 7, 7, 4, 0, 1, 1, 4, 1, 0, 1, 4, 1, 1, 0], [0, 0, 0, 4, 7, 0, 1, 4, 7, 1, 1, 4, 0, 0, 0, 4, 1, 0, 0, 4, 0, 1, 0]]",False,,Hard
15663ba9,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 3, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 3, 3, 4, 0, 0, 0, 0, 0], [0, 0, 4, 3, 2, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 2, 3, 4, 0, 0, 0, 0, 0], [0, 0, 4, 3, 3, 4, 0, 0, 0, 4, 3, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0], [0, 0, 0, 0, 4, 3, 3, 3, 2, 0, 0, 3, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 0, 0, 0, 2, 3, 3, 4, 0], [0, 0, 0, 0, 4, 3, 3, 3, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 8, 8, 8, 8, 8], [0, 0, 8, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 0, 8], [0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8], [0, 0, 8, 8, 8, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0], [0, 0, 8, 0, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0], [0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 8, 8, 8, 8, 8, 4, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 4, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 4, 8, 8, 8, 4], [0, 0, 8, 0, 2, 8, 8, 4, 0, 0, 8, 0, 0, 0, 8], [0, 0, 4, 8, 4, 0, 0, 0, 0, 0, 4, 2, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 2, 0, 2, 4], [0, 0, 4, 8, 4, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0], [0, 0, 8, 0, 8, 0, 0, 0, 0, 4, 8, 8, 8, 4, 0], [0, 0, 4, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 0], [0, 3, 3, 3, 0, 0, 3, 3, 3, 3, 0, 3, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 3, 3, 0, 3, 0], [0, 3, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 0, 3, 0], [0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 3, 4, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0], [0, 4, 3, 0, 2, 3, 4, 4, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 3, 3, 4, 0], [0, 4, 3, 3, 0, 0, 2, 3, 4, 4, 0, 3, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 4, 2, 0, 3, 0], [0, 4, 3, 3, 0, 0, 3, 4, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 2, 3, 4, 4, 0, 0, 4, 3, 4, 0, 3, 0], [0, 4, 3, 3, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 4, 3, 3, 3, 4, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

The pattern here is that the corners of the shapes are replaced with 4, the edges with 3, and the center with 2.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 3, 4, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0], [0, 4, 3, 0, 2, 3, 4, 4, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 3, 3, 4, 0], [0, 4, 3, 3, 0, 0, 2, 3, 4, 4, 0, 3, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 4, 2, 0, 3, 0], [0, 4, 3, 3, 0, 0, 3, 4, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 2, 3, 4, 4, 0, 0, 4, 3, 4, 0, 3, 0], [0, 4, 3, 3, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 4, 3, 3, 3, 4, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 3, 4, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0], [0, 4, 3, 0, 2, 3, 4, 4, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 3, 3, 4, 0], [0, 4, 3, 3, 0, 0, 2, 3, 4, 4, 0, 3, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 4, 2, 0, 3, 0], [0, 4, 3, 3, 0, 0, 3, 4, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 2, 3, 4, 4, 0, 0, 4, 3, 4, 0, 3, 0], [0, 4, 3, 3, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 4, 3, 3, 3, 4, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 3, 4, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0], [0, 4, 2, 0, 2, 3, 3, 2, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 3, 3, 4, 0], [0, 4, 3, 2, 0, 0, 2, 3, 3, 4, 0, 3, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 4, 2, 0, 3, 0], [0, 4, 3, 2, 0, 0, 2, 4, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 3, 0], [0, 3, 0, 0, 2, 3, 3, 4, 0, 0, 4, 3, 2, 0, 3, 0], [0, 4, 3, 3, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 4, 3, 3, 3, 4, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Medium
15696249,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[4, 4, 6], [3, 3, 3], [6, 6, 4]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 6, 4, 4, 6, 4, 4, 6], [3, 3, 3, 3, 3, 3, 3, 3, 3], [6, 6, 4, 6, 6, 4, 6, 6, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[2, 4, 3], [2, 3, 4], [2, 3, 4]],
then this grids change to output grids below
[[2, 4, 3, 0, 0, 0, 0, 0, 0], [2, 3, 4, 0, 0, 0, 0, 0, 0], [2, 3, 4, 0, 0, 0, 0, 0, 0], [2, 4, 3, 0, 0, 0, 0, 0, 0], [2, 3, 4, 0, 0, 0, 0, 0, 0], [2, 3, 4, 0, 0, 0, 0, 0, 0], [2, 4, 3, 0, 0, 0, 0, 0, 0], [2, 3, 4, 0, 0, 0, 0, 0, 0], [2, 3, 4, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[6, 6, 3], [4, 4, 3], [4, 4, 3]],
then output grids?

=========","The output grids would be:

[[6, 6, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [6, 6, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [6, 6, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0]].

The pattern here is that the input grid is repeated three times vertically, with each repetition separated by a row of zeros. The original grid is also expanded horizontally by adding six zeros to the right of each row.","[[6, 6, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [6, 6, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [6, 6, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0]]","[[6, 6, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [6, 6, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [6, 6, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 6, 6, 3], [0, 0, 0, 0, 0, 0, 4, 4, 3], [0, 0, 0, 0, 0, 0, 4, 4, 3], [0, 0, 0, 0, 0, 0, 6, 6, 3], [0, 0, 0, 0, 0, 0, 4, 4, 3], [0, 0, 0, 0, 0, 0, 4, 4, 3], [0, 0, 0, 0, 0, 0, 6, 6, 3], [0, 0, 0, 0, 0, 0, 4, 4, 3], [0, 0, 0, 0, 0, 0, 4, 4, 3]]",False,,Medium
17b80ad2,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 4, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 9, 0, 0, 0, 7, 0, 0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], [7, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 9], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 2, 0, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0], [0, 0, 6, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0]],
then this grids change to output grids below
[[0, 4, 0, 0, 8, 9, 0, 0, 0, 7, 0, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 9, 0, 0, 0, 7, 0, 0, 0, 0, 9, 4, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 9, 0, 0], [0, 0, 3, 0, 0, 2, 0, 0, 0, 4, 4, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 6, 0, 7], [7, 0, 0, 0, 0, 2, 0, 9, 0, 4, 0, 0, 0, 0, 6, 0, 9], [0, 0, 0, 3, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 6, 0, 0], [0, 2, 0, 0, 0, 2, 0, 0, 0, 4, 3, 0, 0, 0, 6, 4, 0], [6, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 4, 0, 0, 0, 6, 0, 6], [0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 2, 0, 0, 6, 0, 0], [0, 8, 0, 0, 0, 2, 0, 0, 0, 4, 7, 0, 0, 0, 6, 0, 0], [0, 0, 6, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0]].

Example 2
If input grids are like that
[[8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6], [0, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 2, 0], [0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 6], [0, 0, 0, 8, 4, 0, 8, 0, 6, 0, 0, 2, 0], [0, 0, 7, 0, 4, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 4, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 6, 1, 0, 0, 0], [0, 0, 0, 0, 8, 0, 3, 0, 6, 0, 0, 0, 0], [0, 3, 0, 0, 8, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 0, 0, 2], [0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 2, 3, 0, 9, 0, 4, 0, 0, 0, 3, 0, 0, 8], [0, 0, 3, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 9, 4, 9, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 1, 0, 1, 0, 6, 0, 0, 0, 7], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 3, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 1, 9, 0, 0, 0, 7, 0, 0, 1, 2, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 4, 9, 0, 3, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 2, 3, 4, 9, 1, 4, 1, 0, 0, 3, 9, 0, 8], [0, 0, 3, 0, 0, 3, 4, 4, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 0, 3, 0, 1, 8, 4, 1, 0, 9, 4, 9, 0, 0], [0, 0, 0, 6, 0, 3, 0, 0, 1, 4, 1, 1, 6, 4, 9, 0, 7], [0, 0, 0, 0, 0, 8, 0, 0, 1, 4, 1, 3, 0, 4, 9, 0, 0], [0, 0, 0, 0, 7, 3, 3, 0, 1, 4, 3, 0, 0, 4, 9, 0, 0], [0, 0, 4, 0, 0, 3, 0, 0, 1, 4, 3, 0, 0, 4, 9, 0, 0], [0, 0, 0, 2, 0, 3, 1, 9, 1, 4, 3, 7, 0, 4, 1, 2, 0], [0, 0, 0, 3, 0, 3, 0, 0, 1, 4, 3, 0, 0, 4, 1, 0, 0], [0, 4, 0, 4, 0, 3, 0, 0, 1, 4, 9, 0, 0, 4, 1, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 1, 4, 9, 0, 0, 4, 3, 0, 0], [0, 0, 0, 0, 0, 3, 0, 3, 1, 4, 9, 0, 0, 2, 3, 0, 0], [0, 0, 0, 1, 0, 5, 0, 0, 6, 4, 9, 4, 9, 3, 3, 0, 3], [0, 0, 0, 0, 0, 5, 0, 0, 5, 4, 9, 0, 0, 1, 3, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 5, 4, 9, 5, 0, 0, 3, 0, 0]].

The pattern here is that the non-zero elements in the 5th column are copied to the 10th column, and the non-zero elements in the 7th column are copied to the 11th column.","[[0, 0, 0, 0, 2, 3, 4, 9, 1, 4, 1, 0, 0, 3, 9, 0, 8], [0, 0, 3, 0, 0, 3, 4, 4, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 0, 3, 0, 1, 8, 4, 1, 0, 9, 4, 9, 0, 0], [0, 0, 0, 6, 0, 3, 0, 0, 1, 4, 1, 1, 6, 4, 9, 0, 7], [0, 0, 0, 0, 0, 8, 0, 0, 1, 4, 1, 3, 0, 4, 9, 0, 0], [0, 0, 0, 0, 7, 3, 3, 0, 1, 4, 3, 0, 0, 4, 9, 0, 0], [0, 0, 4, 0, 0, 3, 0, 0, 1, 4, 3, 0, 0, 4, 9, 0, 0], [0, 0, 0, 2, 0, 3, 1, 9, 1, 4, 3, 7, 0, 4, 1, 2, 0], [0, 0, 0, 3, 0, 3, 0, 0, 1, 4, 3, 0, 0, 4, 1, 0, 0], [0, 4, 0, 4, 0, 3, 0, 0, 1, 4, 9, 0, 0, 4, 1, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 1, 4, 9, 0, 0, 4, 3, 0, 0], [0, 0, 0, 0, 0, 3, 0, 3, 1, 4, 9, 0, 0, 2, 3, 0, 0], [0, 0, 0, 1, 0, 5, 0, 0, 6, 4, 9, 4, 9, 3, 3, 0, 3], [0, 0, 0, 0, 0, 5, 0, 0, 5, 4, 9, 0, 0, 1, 3, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 5, 4, 9, 5, 0, 0, 3, 0, 0]]","[[0, 0, 0, 0, 2, 3, 4, 9, 1, 4, 1, 0, 0, 3, 9, 0, 8], [0, 0, 3, 0, 0, 3, 4, 4, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 1, 4, 1, 0, 0, 3, 9, 0, 0], [0, 0, 0, 0, 0, 3, 0, 1, 8, 4, 1, 0, 9, 4, 9, 0, 0], [0, 0, 0, 6, 0, 3, 0, 0, 1, 4, 1, 1, 6, 4, 9, 0, 7], [0, 0, 0, 0, 0, 8, 0, 0, 1, 4, 1, 3, 0, 4, 9, 0, 0], [0, 0, 0, 0, 7, 3, 3, 0, 1, 4, 3, 0, 0, 4, 9, 0, 0], [0, 0, 4, 0, 0, 3, 0, 0, 1, 4, 3, 0, 0, 4, 9, 0, 0], [0, 0, 0, 2, 0, 3, 1, 9, 1, 4, 3, 7, 0, 4, 1, 2, 0], [0, 0, 0, 3, 0, 3, 0, 0, 1, 4, 3, 0, 0, 4, 1, 0, 0], [0, 4, 0, 4, 0, 3, 0, 0, 1, 4, 9, 0, 0, 4, 1, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 1, 4, 9, 0, 0, 4, 3, 0, 0], [0, 0, 0, 0, 0, 3, 0, 3, 1, 4, 9, 0, 0, 2, 3, 0, 0], [0, 0, 0, 1, 0, 5, 0, 0, 6, 4, 9, 4, 9, 3, 3, 0, 3], [0, 0, 0, 0, 0, 5, 0, 0, 5, 4, 9, 0, 0, 1, 3, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 5, 4, 9, 5, 0, 0, 3, 0, 0]]","[[0, 0, 0, 0, 2, 3, 0, 9, 8, 4, 0, 3, 0, 3, 0, 0, 8], [0, 0, 3, 0, 0, 8, 4, 4, 8, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 1, 8, 0, 0, 3, 9, 4, 9, 0, 0], [0, 0, 0, 6, 0, 8, 0, 0, 1, 0, 1, 3, 6, 0, 0, 0, 7], [0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 5, 3, 0, 1, 3, 0, 7, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 5, 0, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 5, 1, 9, 1, 0, 0, 7, 0, 0, 1, 2, 0], [0, 0, 0, 3, 0, 5, 0, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0], [0, 4, 0, 4, 0, 5, 0, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 6, 0, 9, 4, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 5, 0, 3, 6, 0, 0, 4, 0, 2, 0, 0, 0], [0, 0, 0, 1, 0, 5, 0, 0, 6, 0, 0, 4, 9, 0, 3, 0, 3], [0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0]]",False,,Medium
17cae0c1,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[5, 5, 5, 0, 0, 0, 0, 0, 5], [5, 0, 5, 0, 5, 0, 0, 5, 0], [5, 5, 5, 0, 0, 0, 5, 0, 0]],
then this grids change to output grids below
[[3, 3, 3, 4, 4, 4, 9, 9, 9], [3, 3, 3, 4, 4, 4, 9, 9, 9], [3, 3, 3, 4, 4, 4, 9, 9, 9]].

Example 2
If input grids are like that
[[0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 5, 0], [5, 0, 0, 5, 5, 5, 0, 0, 0]],
then this grids change to output grids below
[[9, 9, 9, 1, 1, 1, 4, 4, 4], [9, 9, 9, 1, 1, 1, 4, 4, 4], [9, 9, 9, 1, 1, 1, 4, 4, 4]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 5, 5, 5, 5], [0, 0, 0, 0, 5, 0, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be 
[[4, 4, 4, 9, 9, 9, 3, 3, 3], [4, 4, 4, 9, 9, 9, 3, 3, 3], [4, 4, 4, 9, 9, 9, 3, 3, 3]].

The pattern in this problem is that the 5s in the input grid are replaced with 3s in the output grid, the 0s are replaced with 4s, and the areas with no numbers are replaced with 9s. The pattern also shifts to the left in the output grid.","[[4, 4, 4, 9, 9, 9, 3, 3, 3], [4, 4, 4, 9, 9, 9, 3, 3, 3], [4, 4, 4, 9, 9, 9, 3, 3, 3]]","[[4, 4, 4, 9, 9, 9, 3, 3, 3], [4, 4, 4, 9, 9, 9, 3, 3, 3], [4, 4, 4, 9, 9, 9, 3, 3, 3]]","[[1, 1, 1, 9, 9, 9, 6, 6, 6], [1, 1, 1, 9, 9, 9, 6, 6, 6], [1, 1, 1, 9, 9, 9, 6, 6, 6]]",False,,Easy
184a9768,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 5, 0], [5, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 6, 6, 6, 6, 6, 6], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6], [0, 0, 0, 8, 8, 8, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 4, 4, 4, 4, 2, 2, 2, 4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 8, 8, 8, 8, 8, 8, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 8, 8, 8, 8, 8, 8, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 6, 6, 6, 6, 6, 6, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 6, 6, 6, 6, 6, 6, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 6, 6, 6, 6, 6, 6, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 4, 4, 4, 0, 5, 0, 0, 3, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 5], [0, 0, 0, 0, 5, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 4, 4, 4, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 4, 4, 3, 3, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 0, 8, 8, 8, 8, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 8, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 8, 8, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 0, 0, 8, 0], [0, 3, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 8, 8, 0, 0, 8, 0, 0, 8, 0], [0, 3, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 1, 0, 0, 0, 8, 8, 0, 0, 8, 8, 8, 8, 0], [0, 3, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 1, 1, 1, 1, 4, 4, 4, 4, 1, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 1, 1, 1, 1, 4, 1, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0",not_complete,not_complete,"[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 2, 2, 2, 2, 4, 4, 4, 4, 3, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 2, 2, 2, 2, 4, 1, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 3, 8, 8, 8, 8, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 4, 4, 4, 4, 4, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 3, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 3, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 3, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1, 1, 8, 8, 3, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1, 1, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1, 1, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1, 1, 8, 7, 7, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1, 1, 8, 7, 7, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1, 1, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Hard
195ba7dc,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 7, 7, 0, 7, 7, 2, 7, 0, 0, 0, 0, 7], [7, 0, 0, 0, 0, 7, 2, 7, 0, 0, 7, 7, 0], [7, 0, 7, 7, 0, 7, 2, 7, 0, 0, 7, 0, 0], [0, 7, 0, 0, 0, 0, 2, 7, 0, 7, 0, 7, 0], [7, 7, 0, 7, 7, 0, 2, 0, 7, 0, 0, 7, 0]],
then this grids change to output grids below
[[1, 1, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 1, 0], [1, 1, 0, 1, 1, 0]].

Example 2
If input grids are like that
[[0, 7, 7, 7, 0, 7, 2, 7, 7, 0, 7, 0, 7], [0, 0, 0, 7, 0, 7, 2, 0, 7, 7, 7, 0, 7], [7, 0, 7, 0, 0, 0, 2, 7, 7, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0, 2, 7, 7, 0, 0, 7, 7], [0, 7, 7, 0, 7, 7, 2, 7, 7, 7, 0, 0, 7]],
then this grids change to output grids below
[[1, 1, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0], [1, 1, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1]].

Quiz
If input grids are like that
[[7, 7, 0, 0, 0, 0, 2, 0, 7, 7, 0, 0, 7], [0, 7, 0, 0, 0, 0, 2, 7, 0, 0, 7, 0, 7], [7, 7, 7, 0, 0, 7, 2, 0, 7, 7, 7, 0, 7], [0, 0, 0, 0, 0, 0, 2, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 7, 0, 2, 0, 7, 7, 0, 7, 7]],
then output grids?

=========","The pattern in this problem is that the grid is divided into two parts by the column that contains the number 2. The left part of the grid is ignored and the right part is transformed into a new grid where the number 7 is replaced by 1 and the number 0 remains the same. The size of the new grid is the same as the size of the right part of the original grid.

So, if the input grid is
[[7, 7, 0, 0, 0, 0, 2, 0, 7, 7, 0, 0, 7], [0, 7, 0, 0, 0, 0, 2, 7, 0, 0, 7, 0, 7], [7, 7, 7, 0, 0, 7, 2, 0, 7, 7, 7, 0, 7], [0, 0, 0, 0, 0, 0, 2, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 7, 0, 2, 0, 7, 7, 0, 7, 7]],
then the output grid will be
[[0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1]].","[[7, 7, 0, 0, 0, 0, 2, 0, 7, 7, 0, 0, 7], [0, 7, 0, 0, 0, 0, 2, 7, 0, 0, 7, 0, 7], [7, 7, 7, 0, 0, 7, 2, 0, 7, 7, 7, 0, 7], [0, 0, 0, 0, 0, 0, 2, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 7, 0, 2, 0, 7, 7, 0, 7, 7]],
then the output grid will be
[[0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1]]","[[0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1]]","[[1, 1, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1]]",False,,Medium
1990f7a8,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 2, 0, 0], [0, 2, 0, 0, 0, 2, 2], [2, 2, 2, 0, 2, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[2, 0, 2, 0, 2, 2, 0], [0, 2, 2, 0, 2, 0, 2], [0, 0, 2, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 2, 2, 0], [2, 0, 2, 0, 0, 2, 0], [2, 2, 2, 0, 2, 0, 2]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[2, 0, 2, 0, 2, 2, 0], [0, 2, 0, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 0, 2], [2, 0, 0, 0, 2, 0, 2]].

The pattern in this problem is that the objects (represented by the number 2) are grouped together and the empty spaces (represented by the number 0) are removed. The objects are then arranged in a 7x7 grid.","[[2, 0, 2, 0, 2, 2, 0], [0, 2, 0, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 0, 2], [2, 0, 0, 0, 2, 0, 2]]","[[2, 0, 2, 0, 2, 2, 0], [0, 2, 0, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 0, 2], [2, 0, 0, 0, 2, 0, 2]]","[[2, 0, 2, 0, 0, 0, 2], [0, 2, 0, 0, 0, 2, 2], [2, 2, 2, 0, 2, 0, 2], [0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2], [2, 0, 0, 0, 2, 0, 2]]",False,,Easy
19bb5feb,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 2, 2, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 2, 2, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 3, 3, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 3, 3, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[2, 0], [0, 3]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 8, 1, 1, 8, 8, 8, 3, 3, 8, 8, 8, 8, 0], [0, 8, 8, 1, 1, 8, 8, 8, 3, 3, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 2, 2, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 2, 2, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[1, 3], [0, 2]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 8, 8, 2, 2, 8, 8, 8, 8, 6, 6, 8, 8, 0], [0, 0, 8, 8, 2, 2, 8, 8, 8, 8, 6, 6, 8, 8, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 8, 8, 1, 1, 8, 8, 8, 8, 3, 3, 8, 8, 0], [0, 0, 8, 8, 1, 1, 8, 8, 8, 8, 3, 3, 8, 8, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be [[2, 6], [1, 3]]. 

The pattern in this problem is that the objects in the input grid are being reduced to a 2x2 grid in the output, with the top row of the output grid representing the top half of the input grid and the bottom row representing the bottom half. The left column of the output grid represents the left half of the input grid, and the right column represents the right half. The value in each cell of the output grid is the unique non-zero value found in the corresponding section of the input grid. If there are multiple non-zero values in a section of the input grid, the smallest one is chosen.","[[2, 6], [1, 3]]","[[2, 6], [1, 3]]","[[2, 6], [1, 3]]",True,True,Entry
1a2e2828,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 2, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0], [3, 2, 2, 3, 3, 3, 3, 8, 3, 3, 3, 3], [3, 2, 2, 3, 3, 3, 3, 8, 3, 3, 3, 3], [0, 2, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 2, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0]],
then this grids change to output grids below
[[6]].

Example 2
If input grids are like that
[[0, 0, 0, 4, 4, 0, 0, 0, 8, 0, 0], [0, 0, 0, 4, 4, 0, 0, 0, 8, 0, 0], [3, 3, 3, 4, 4, 3, 3, 3, 8, 3, 3], [0, 0, 0, 4, 4, 0, 0, 0, 8, 0, 0], [0, 0, 0, 4, 4, 0, 0, 0, 8, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6], [0, 0, 0, 4, 4, 0, 0, 0, 8, 0, 0], [0, 0, 0, 4, 4, 0, 0, 0, 8, 0, 0]],
then this grids change to output grids below
[[8]].

Quiz
If input grids are like that
[[0, 0, 0, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0], [1, 1, 1, 3, 3, 1, 1, 1, 1, 7, 1, 1, 1], [1, 1, 1, 3, 3, 1, 1, 1, 1, 7, 1, 1, 1], [0, 0, 0, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6], [0, 0, 0, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0]],
then output grids?

=========","The output grid would be [[7]]. 

The pattern in this problem is that the output grid is a single cell containing the number that is in the same position in all rows of the input grid. In this case, the number 7 is in the same position in all rows of the input grid, so the output grid is [[7]].","[[7]]. 

The pattern in this problem is that the output grid is a single cell containing the number that is in the same position in all rows of the input grid. In this case, the number 7 is in the same position in all rows of the input grid, so the output grid is [[7]]",[[7]],[[7]],True,True,Entry
1a6449f1,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[5, 3, 0, 8, 0, 6, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 4], [0, 8, 4, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0], [7, 8, 0, 0, 6, 0, 0, 7, 5, 8, 4, 8, 3], [2, 8, 4, 2, 0, 0, 0, 8, 0, 8, 0, 0, 0], [0, 8, 9, 1, 9, 6, 0, 0, 0, 8, 0, 0, 7], [1, 8, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0], [0, 8, 0, 0, 0, 0, 4, 0, 4, 8, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 7, 8, 0, 6, 0, 0, 0, 3], [5, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 9, 4, 0, 0, 6, 0, 7, 7, 7, 7, 7], [0, 0, 2, 2, 4, 0, 0, 0, 7, 0, 0, 0, 7], [8, 8, 0, 3, 0, 0, 0, 1, 7, 0, 8, 4, 7], [7, 0, 0, 0, 0, 5, 0, 5, 7, 0, 6, 8, 7], [0, 0, 7, 0, 0, 6, 0, 0, 7, 7, 7, 7, 7], [3, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 9, 1], [0, 0, 0, 8, 0, 8, 6, 0, 0, 0, 0, 0, 1]],
then this grids change to output grids below
[[4, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 7, 5], [4, 2, 0, 0, 0, 8, 0], [9, 1, 9, 6, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 4, 0, 4]].

Example 2
If input grids are like that
[[0, 3, 0, 9, 0, 0, 0, 9, 5, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 4, 0, 8, 0], [0, 3, 0, 0, 0, 0, 0, 9, 0, 0, 9, 0, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2], [0, 0, 8, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 2, 8, 0, 0, 7, 0, 0, 0, 2, 0, 0, 1, 0, 0, 4, 0, 7, 9, 8], [0, 0, 7, 0, 2, 0, 1, 5, 3, 0, 6, 5, 2, 5, 0, 0, 1, 1, 5, 0, 0, 0, 0], [9, 0, 0, 8, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 8, 0, 7], [8, 0, 4, 0, 2, 0, 9, 5, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9], [1, 0, 0, 0, 2, 3, 0, 0, 0, 2, 0, 0, 2, 0, 0, 6, 4, 4, 8, 0, 0, 0, 0], [8, 0, 0, 0, 2, 0, 0, 1, 4, 0, 0, 8, 2, 0, 0, 0, 4, 2, 7, 0, 9, 1, 6], [0, 4, 4, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 8, 0, 3, 0, 6, 0], [0, 7, 0, 0, 0, 8, 0, 3, 7, 0, 9, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 2, 5, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 3, 3, 3, 3, 3, 0, 0, 4, 0, 4, 6, 0, 0, 0, 1, 1, 0, 0, 6, 0, 4], [6, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 6, 0, 6, 0, 4, 0, 0, 0, 4], [0, 0, 3, 7, 9, 0, 3, 0, 0, 0, 6, 4, 0, 0, 3, 0, 0, 8, 0, 7, 0, 5, 4], [0, 7, 3, 0, 0, 0, 3, 0, 2, 8, 0, 4, 4, 0, 3, 4, 0, 3, 0, 0, 8, 0, 4], [0, 8, 3, 0, 9, 0, 3, 0, 3, 3, 0, 4, 0, 0, 3, 7, 7, 5, 0, 0, 1, 0, 4], [0, 0, 3, 3, 3, 3, 3, 6, 5, 0, 0, 4, 3, 0, 0, 0, 0, 9, 0, 0, 0, 0, 4], [0, 9, 2, 0, 0, 2, 3, 0, 0, 0, 9, 4, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4], [0, 5, 8, 0, 0, 0, 1, 0, 6, 0, 9, 4, 3, 0, 0, 0, 0, 0, 0, 9, 0, 0, 4], [9, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
then this grids change to output grids below
[[6, 0, 0, 0, 1, 1, 0, 0, 6, 0], [0, 0, 6, 0, 6, 0, 4, 0, 0, 0], [0, 0, 3, 0, 0, 8, 0, 7, 0, 5], [4, 0, 3, 4, 0, 3, 0, 0, 8, 0], [0, 0, 3, 7, 7, 5, 0, 0, 1, 0], [3, 0, 0, 0, 0, 9, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 9, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 2, 4, 0, 0, 0, 9, 0], [0, 0, 3, 3, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 5, 0, 0, 4, 0, 4], [0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 6, 0], [0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 5, 4, 0, 0, 3, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 8, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0, 6, 7, 3, 0, 3, 0, 0, 9, 0], [6, 3, 0, 0, 0, 0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 2, 7, 0], [7, 0, 0, 8, 3, 0, 0, 3, 0, 3, 9, 0, 0, 0, 6, 7, 0, 0, 3, 0, 0, 0, 0, 0, 0], [5, 7, 0, 0, 8, 8, 7, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 3, 4, 0, 0, 2, 0, 1], [7, 0, 0, 0, 9, 0, 0, 3, 0, 1, 0, 0, 0, 8, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 3, 0, 2, 3, 0, 3, 3, 0, 0, 2], [0, 0, 7, 0, 0, 0, 7, 3, 0, 0, 0, 0, 0, 5, 0, 0, 1, 0, 3, 0, 0, 7, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 3, 7, 0, 0, 0, 0, 0, 0, 0, 8, 1, 3, 4, 0, 0, 6, 0, 8], [0, 0, 0, 3, 0, 4, 2, 3, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 3, 0, 9, 9, 0, 0, 9], [5, 0, 1, 0, 0, 0, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 3, 0, 0, 7, 0, 5, 0, 3, 0, 0, 0, 0], [0, 5, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 2, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0, 6], [4, 0, 0, 0, 7, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 5, 0, 0, 7, 7, 7, 7, 7, 7], [9, 0, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 5, 8, 8, 0, 0, 0, 0, 7, 0, 0, 8, 0, 7], [2, 0, 0, 0, 6, 2, 8, 0, 0, 9, 0, 0, 0, 8, 5, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7], [8, 0, 1, 0, 8, 0, 8, 0, 7, 0, 0, 6, 0, 8, 0, 0, 0, 0, 7, 7, 0, 0, 0, 2, 7], [5, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 5, 6, 8, 4, 0, 8, 0, 5, 7, 7, 7, 7, 7, 7], [0, 0, 0, 0, 4, 0, 8, 0, 9, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 2], [8, 0, 0, 0, 0, 0, 8, 0, 0, 2, 0, 2, 0, 8, 0, 6, 0, 0, 0, 3, 0, 3, 0, 8, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 3, 0, 0, 5, 1, 0, 0, 0, 0], [0, 0, 6, 0, 9, 6, 0, 5, 9, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 1, 5, 3, 0, 0, 6], [5, 0, 0, 0, 8, 8, 0, 9, 8, 0, 0, 0, 0, 0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 2, 0], [8, 0, 0, 0, 3, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 0, 2, 5, 0, 0]],
then output grids?

=========","The output grids would be:

[[5, 4, 0, 0, 3, 0, 0, 9, 0], [0, 0, 6, 7, 3, 0, 3, 0, 0], [0, 0, 0, 0, 3, 0, 5, 0, 2], [4, 0, 0, 0, 3, 0, 0, 0, 0], [0, 9, 0, 0, 3, 4, 0, 0, 6], [0, 0, 0, 0, 3, 0, 0, 0, 0], [3, 3, 0, 0, 3, 0, 0, 7, 0], [0, 0, 0, 0, 3, 4, 0, 0, 6], [0, 0, 0, 0, 3, 0, 9, 9, 0], [3, 3, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0]].

The pattern in this problem is that the grid is divided into sections by the number 3. Each section is then rotated 90 degrees counterclockwise. The sections are then placed back into the grid in their original locations.","[[5, 4, 0, 0, 3, 0, 0, 9, 0], [0, 0, 6, 7, 3, 0, 3, 0, 0], [0, 0, 0, 0, 3, 0, 5, 0, 2], [4, 0, 0, 0, 3, 0, 0, 0, 0], [0, 9, 0, 0, 3, 4, 0, 0, 6], [0, 0, 0, 0, 3, 0, 0, 0, 0], [3, 3, 0, 0, 3, 0, 0, 7, 0], [0, 0, 0, 0, 3, 4, 0, 0, 6], [0, 0, 0, 0, 3, 0, 9, 9, 0], [3, 3, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0]]","[[5, 4, 0, 0, 3, 0, 0, 9, 0], [0, 0, 6, 7, 3, 0, 3, 0, 0], [0, 0, 0, 0, 3, 0, 5, 0, 2], [4, 0, 0, 0, 3, 0, 0, 0, 0], [0, 9, 0, 0, 3, 4, 0, 0, 6], [0, 0, 0, 0, 3, 0, 0, 0, 0], [3, 3, 0, 0, 3, 0, 0, 7, 0], [0, 0, 0, 0, 3, 4, 0, 0, 6], [0, 0, 0, 0, 3, 0, 9, 9, 0], [3, 3, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 3, 5, 4, 0, 0], [0, 9, 0, 0, 0, 0, 0, 0, 6, 7], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 9, 0, 0, 0, 6, 7, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 8, 0, 0, 4, 0], [0, 0, 0, 6, 0, 0, 0, 3, 0, 2], [0, 0, 0, 0, 0, 5, 0, 0, 1, 0], [7, 0, 0, 0, 0, 0, 0, 0, 8, 1], [0, 0, 0, 0, 0, 4, 0, 2, 0, 0]]",False,,Tedious
1acc24af,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 5, 5, 5, 0, 5, 5, 0, 5, 5, 0, 0], [0, 5, 5, 0, 0, 5, 5, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 2, 2, 2, 0, 2, 2, 0, 5, 5, 0, 0], [0, 2, 2, 0, 0, 2, 2, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 5, 5, 0, 0, 0, 0, 5, 0], [0, 5, 5, 0, 5, 0, 0, 5, 5, 0, 5, 0], [0, 0, 5, 0, 5, 0, 0, 5, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0], [0, 2, 2, 0, 2, 0, 0, 2, 2, 0, 2, 0], [0, 0, 2, 0, 2, 0, 0, 2, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern here is that the color 5 changes to color 2 when it is surrounded by the same color on its top, bottom, left, and right.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0], [0, 2, 2, 0, 2, 0, 0, 2, 2, 0, 2, 0], [0, 0, 2, 0, 2, 0, 0, 2, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0], [0, 2, 2, 0, 2, 0, 0, 2, 2, 0, 2, 0], [0, 0, 2, 0, 2, 0, 0, 2, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0], [0, 2, 2, 0, 2, 0, 0, 5, 5, 0, 2, 0], [0, 0, 2, 0, 2, 0, 0, 5, 5, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Hard
1c02dbbe,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 3, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 1, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 1], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 3, 0, 0, 0]].

The pattern here is that the color of the cells in the middle of the grid changes to the color of the cells at the corners of the grid. The color change starts from the top left corner and goes clockwise. The color change stops when it reaches the color of the cell at the bottom right corner.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 1, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 1], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 3, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 1, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 1], [0, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 3, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 5, 5, 1, 1, 1, 1, 1, 1, 1, 0], [0, 6, 6, 6, 6, 5, 5, 1, 1, 1, 1, 1, 1, 1, 0], [0, 6, 6, 6, 6, 5, 5, 1, 1, 1, 1, 1, 1, 1, 0], [0, 6, 6, 6, 6, 5, 5, 1, 1, 1, 1, 1, 1, 1, 0], [0, 6, 6, 6, 6, 5, 5, 1, 1, 1, 1, 1, 1, 1, 0], [0, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 3, 3, 3, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 3, 3, 3, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 3, 3, 3, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Medium
1c0d0a4b,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 8, 0, 8, 0, 0, 0, 8, 8, 0, 0], [0, 8, 0, 8, 0, 0, 8, 0, 0, 0, 8, 0, 0], [0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0], [0, 0, 8, 0, 0, 8, 8, 8, 0, 8, 8, 0, 0], [0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 0, 0], [0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 8, 0, 0, 8, 8, 8, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 2, 2, 2, 0, 2, 2, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 8, 0, 8, 0, 0, 8, 0, 0], [0, 8, 0, 8, 0, 8, 8, 8, 0, 0, 8, 8, 0], [0, 8, 8, 8, 0, 8, 0, 0, 0, 8, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 8, 0, 8, 0, 0, 0, 8, 8, 8, 0], [0, 8, 8, 8, 0, 0, 8, 0, 0, 8, 0, 8, 0], [0, 0, 8, 8, 0, 8, 0, 8, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 8, 0, 8, 0, 0, 0, 8, 0], [0, 8, 8, 0, 0, 8, 8, 0, 0, 8, 8, 8, 0], [0, 0, 8, 0, 0, 0, 8, 8, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem seems to be that the 8's in the input grid are replaced with 2's in the output grid, but only if they are surrounded by at least one 8 in the four cardinal directions (up, down, left, right). If an 8 is not surrounded by any other 8's, it remains an 8 in the output grid.

Applying this pattern to the quiz input, the output grid would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 8, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0], 
 [0, 2, 0, 2, 0, 2, 2, 2, 0, 0, 2, 2, 0], 
 [0, 2, 2, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 2, 2, 0], 
 [0, 2, 2, 2, 0, 0, 2, 0, 0, 2, 0, 2, 0], 
 [0, 0, 2, 2, 0, 2, 0, 2, 0, 0, 2, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 2, 2, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0], 
 [0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 2, 0], 
 [0, 0, 2, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 8, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0], 
 [0, 2, 0, 2, 0, 2, 2, 2, 0, 0, 2, 2, 0], 
 [0, 2, 2, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 2, 2, 0], 
 [0, 2, 2, 2, 0, 0, 2, 0, 0, 2, 0, 2, 0], 
 [0, 0, 2, 2, 0, 2, 0, 2, 0, 0, 2, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 2, 2, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0], 
 [0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 2, 0], 
 [0, 0, 2, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 8, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0], 
 [0, 2, 0, 2, 0, 2, 2, 2, 0, 0, 2, 2, 0], 
 [0, 2, 2, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 2, 2, 0], 
 [0, 2, 2, 2, 0, 0, 2, 0, 0, 2, 0, 2, 0], 
 [0, 0, 2, 2, 0, 2, 0, 2, 0, 0, 2, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 2, 2, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0], 
 [0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 2, 0], 
 [0, 0, 2, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 2, 0, 0, 2, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Hard
1c56ad9f,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern here is that the 7's are moving towards the center of the grid, creating a diamond shape.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Hard
1d0a4b61,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 0, 0, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [1, 2, 5, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 5, 4, 5, 0, 0, 2, 5, 4, 5, 2, 1], [1, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 5, 1, 5, 0, 0, 5, 5, 1, 5, 5, 1], [1, 4, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1], [1, 5, 5, 1, 5, 5, 1, 5, 0, 0, 0, 0, 0, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 0, 0, 0, 0, 0, 2, 1, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 0, 0, 0, 0, 0, 2, 1, 2, 5, 4, 5, 2, 1], [1, 5, 5, 0, 0, 0, 1, 5, 5, 1, 5, 5, 0, 0, 0, 0, 0, 5, 1, 5, 5, 1, 5, 5, 1], [1, 4, 1, 0, 0, 0, 1, 4, 1, 4, 1, 4, 0, 0, 0, 0, 0, 4, 1, 4, 1, 4, 1, 4, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 0, 0, 0, 0, 0, 5, 1, 5, 5, 1, 5, 5, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
then this grids change to output grids below
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1], [1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 5, 1], [1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]].

Example 2
If input grids are like that
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 0, 0, 0, 0, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 0, 0, 0, 0, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 0, 0, 0, 0, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 0, 0, 0, 0, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 0, 0, 0, 0, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 0, 0, 0, 0, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 5, 2, 3, 0, 0, 0, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 2, 3, 5, 0, 0, 0, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 5, 0, 0, 0, 1, 2, 3, 5, 5, 3, 2, 0, 0, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 5, 2, 0, 0, 0, 0, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 3, 5, 0, 0, 0, 0, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 3, 5, 0, 0, 0, 0, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 5, 2, 0, 0, 0, 0, 1, 5, 0, 0, 0, 0, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 2, 3, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 5, 5, 3, 2, 1, 2, 0, 0, 0, 0, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 5, 2, 3, 3, 2, 5, 1, 5, 0, 0, 0, 0, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2]],
then this grids change to output grids below
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5, 5, 3, 2, 1, 2, 3, 5], [1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3, 3, 2, 5, 1, 5, 2, 3], [1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2, 2, 5, 3, 1, 3, 5, 2]].

Quiz
If input grids are like that
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 0, 0, 0, 0, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 0, 0, 0, 0, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 0, 0, 0, 0, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 0, 0, 1], [1, 8, 5, 1, 2, 0, 0, 0, 0, 0, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 0, 0, 0, 0, 1, 2, 5, 1, 5, 2, 1, 0, 0, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 0, 0, 0, 0, 1, 8, 2, 1, 2, 8, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 0, 0, 0, 0, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 0, 0, 0, 0, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
then output grids?

=========","The output grids would be:

[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]

The pattern here is that the 0's in the input grid are replaced with the corresponding values from the top of the grid.","[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]","[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]","[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1, 8, 2, 1, 2, 8, 1, 5, 5, 1], [1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1, 2, 5, 1, 5, 2, 1, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1, 5, 8, 1, 8, 5, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]",True,False,Tedious
1d398264,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 5, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 8, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 2, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 5, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 1, 2, 0, 0, 0, 0], [0, 0, 0, 2, 6, 2, 0, 0, 0, 0], [0, 0, 0, 2, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 3, 0, 0, 1, 0, 0, 2, 0, 0], [0, 0, 3, 0, 1, 0, 2, 0, 0, 0], [0, 0, 0, 3, 1, 2, 0, 0, 0, 0], [2, 2, 2, 2, 6, 2, 2, 2, 2, 2], [0, 0, 0, 2, 7, 7, 0, 0, 0, 0], [0, 0, 2, 0, 7, 0, 7, 0, 0, 0], [0, 2, 0, 0, 7, 0, 0, 7, 0, 0], [2, 0, 0, 0, 7, 0, 0, 0, 7, 0], [0, 0, 0, 0, 7, 0, 0, 0, 0, 7], [0, 0, 0, 0, 7, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 7, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 6, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 7, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 3, 3, 1, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0], [0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0], [3, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0]].

The pattern here is that the objects in the grid are expanding outwards from their original position, with the first object moving upwards, the second object moving to the right, and the third object moving downwards.","[[0, 6, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 7, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 3, 3, 1, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0], [0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0], [3, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0]]","[[0, 6, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 7, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 3, 3, 1, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0], [0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0], [3, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0]]","[[0, 6, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 7, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 3, 3, 1, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0], [0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0], [3, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0]]",True,False,Multiple solutions
1e81d6f9,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 8, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 6, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 9, 2, 4, 0, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0], [0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 2, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0], [0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 3, 0, 7, 8, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 9, 2, 0, 0, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 2, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0], [0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 3, 0, 7, 8, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 3, 0, 0, 0, 0, 8, 0, 0, 0, 7], [5, 5, 5, 5, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 6, 2, 0], [0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 1, 0, 8, 7, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 7, 0, 0, 7, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7], [5, 5, 5, 5, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0], [0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 1, 0, 8, 7, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 7, 0, 0, 7, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0]]

The pattern in this problem is that if a cell has a number and the cell to its right is empty, the number is moved to the right. If the cell to the right is not empty, the number stays in its place.","[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7], [5, 5, 5, 5, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0], [0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 1, 0, 8, 7, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 7, 0, 0, 7, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0]]","[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7], [5, 5, 5, 5, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0], [0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 1, 0, 8, 7, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 7, 0, 0, 7, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0]]","[[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 3, 0, 0, 0, 0, 8, 0, 0, 0, 7], [5, 5, 5, 5, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 6, 2, 0], [0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 7, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 7, 0, 0, 7, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0]]",False,,Medium
1e97544e,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 0, 0, 0, 4, 5, 6, 1, 2, 3], [6, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 0, 0, 0, 4, 5, 6, 1, 2, 3], [6, 1, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 0, 0, 0, 4, 5, 6, 1, 2, 3], [6, 1, 2, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 0, 0, 0, 0, 6, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 0, 0, 0, 0, 6, 1, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 0, 0, 0, 0, 6, 1, 2, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 0, 0, 0, 0, 6, 1, 2, 3, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 0, 0, 0, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 0, 0, 0, 4, 5, 6, 1, 2, 0, 0, 0, 0, 0, 2, 2, 3, 4, 5, 6, 1, 2, 3], [6, 0, 0, 0, 4, 5, 6, 1, 2, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 6, 1, 2, 3], [6, 0, 0, 0, 4, 5, 6, 1, 2, 0, 0, 0, 0, 0, 2, 3, 4, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 0, 0, 0, 0, 0, 2, 3, 4, 5, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 0, 0, 0, 2, 3, 4, 5, 6, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 0, 0, 0, 2, 3, 4, 5, 6, 1, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 0, 0, 0, 2, 3, 4, 5, 6, 1, 2, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 3]],
then this grids change to output grids below
[[5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 1, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 2, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 3, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 4, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 5, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 6, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 1, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 2, 3], [6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 3]].

Example 2
If input grids are like that
[[3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 0, 0, 0, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 0, 0, 0, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 1, 2, 3, 4, 5, 6, 7, 1, 2, 0, 0, 0, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 2, 3, 4, 5, 6, 7, 1, 2, 0, 0, 0, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 0, 0, 0, 0, 0, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 0, 0, 0, 0, 0, 7, 1, 2, 0, 0, 0, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 6, 7, 1, 2, 0, 0, 0, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 0, 0, 0, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 0, 0, 0, 0, 0, 6, 7, 1, 1, 2, 0, 0, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 0, 0, 0, 0, 0, 6, 7, 1, 2, 2, 0, 0, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 0, 0, 0, 0, 0, 6, 7, 1, 2, 3, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 4]],
then this grids change to output grids below
[[3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 3, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 4, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 5, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 6, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 1, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 2, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 3, 4], [4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 4]].

Quiz
If input grids are like that
[[2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 0, 0, 0, 0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 0, 0, 0, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 0, 0, 0, 4, 5, 6, 7, 8, 9, 1, 0, 0, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 1, 0, 0, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 1, 0, 0, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 0, 0, 0, 0, 0, 7, 8, 9, 1, 0, 0, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 0, 0, 0, 0, 0, 7, 8, 9, 1, 0, 0, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 0, 0, 0, 0, 0, 8, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 0, 0, 0, 0, 0, 8, 9, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 6]],
then output grids?

=========","The output grids would be:

[[2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 6, 7, 8,",not_complete,not_complete,"[[2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 6]]",False,,Tedious
2072aba6,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 5, 0], [5, 5, 5], [0, 5, 0]],
then this grids change to output grids below
[[0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1], [0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0]].

Example 2
If input grids are like that
[[5, 0, 0], [0, 5, 0], [0, 0, 5]],
then this grids change to output grids below
[[1, 2, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [0, 0, 0, 0, 1, 2], [0, 0, 0, 0, 2, 1]].

Quiz
If input grids are like that
[[0, 0, 0], [0, 5, 0], [5, 5, 5]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1]].

The pattern here is that each cell with a value of 5 in the input grid is replaced by a 2x2 square in the output grid. The 2x2 square alternates between [1, 2] and [2, 1] for each row. If the cell in the input grid is 0, it remains 0 in the output grid.","[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1]]","[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1]]","[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1]]",True,False,Easy
2.08E+20,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4], [4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4], [4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4], [4, 4, 2, 2, 2, 2, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 2, 2, 2, 2, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 2, 2, 2, 2, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
then this grids change to output grids below
[[3, 3, 3, 3, 1, 2, 2, 2], [3, 3, 3, 3, 1, 2, 2, 2], [1, 1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 1, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2]].

Example 2
If input grids are like that
[[8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 8, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 8, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
then this grids change to output grids below
[[5, 5, 3, 3, 3, 3, 2, 2, 2], [5, 5, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2]].

Quiz
If input grids are like that
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
then output grids?

=========","The output grids would be:

[[6, 6, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [8, 8, 8, 2, 2, 2, 2, 2, 2]].

The pattern in this problem is that the grid is being reduced to only include the rows and columns that contain numbers other than 1, and the order of the rows is being reversed.","[[6, 6, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [8, 8, 8, 2, 2, 2, 2, 2, 2]]","[[6, 6, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 2, 2, 2], [8, 8, 8, 2, 2, 2, 2, 2, 2]]","[[6, 6, 8, 3, 2, 2, 2, 2, 2, 2], [8, 8, 8, 3, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]",False,,Medium
20981f0e,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2]].

The pattern here is that the 1's are moving towards the center of the grid, while the 2's remain stationary.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2]]",False,,Medium
21f83797,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0]].

The pattern here is that the 2's form a square with the top and bottom lines filled with 2's and the sides filled with 2's. The inside of the square is filled with 1's. The square is positioned where the original 2's were in the input grid.","[[0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0]]","[[0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0]]","[[0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0]]",False,,Easy
22a4bbc2,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[1, 1, 0], [1, 1, 0], [8, 8, 8], [8, 8, 8], [0, 1, 1], [0, 1, 1], [8, 8, 0], [1, 1, 1], [8, 8, 0], [8, 8, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [8, 8, 8], [8, 8, 8]],
then this grids change to output grids below
[[2, 2, 0], [2, 2, 0], [8, 8, 8], [8, 8, 8], [0, 1, 1], [0, 1, 1], [2, 2, 0], [1, 1, 1], [8, 8, 0], [8, 8, 0], [2, 2, 2], [2, 2, 2], [2, 2, 2], [8, 8, 8], [8, 8, 8]].

Example 2
If input grids are like that
[[0, 8, 8, 8, 0], [0, 8, 8, 8, 0], [1, 1, 1, 0, 0], [0, 8, 8, 8, 0], [0, 8, 8, 8, 0], [1, 1, 1, 1, 1], [0, 8, 8, 8, 8], [0, 8, 8, 8, 8], [1, 1, 1, 1, 0], [1, 1, 1, 1, 0], [0, 8, 8, 8, 0], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [8, 8, 8, 0, 0], [0, 0, 0, 1, 1], [8, 8, 8, 0, 0], [8, 8, 8, 0, 0], [0, 0, 1, 1, 0], [0, 0, 1, 1, 0]],
then this grids change to output grids below
[[0, 2, 2, 2, 0], [0, 2, 2, 2, 0], [1, 1, 1, 0, 0], [0, 8, 8, 8, 0], [0, 8, 8, 8, 0], [2, 2, 2, 2, 2], [0, 8, 8, 8, 8], [0, 8, 8, 8, 8], [1, 1, 1, 1, 0], [1, 1, 1, 1, 0], [0, 2, 2, 2, 0], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [8, 8, 8, 0, 0], [0, 0, 0, 2, 2], [8, 8, 8, 0, 0], [8, 8, 8, 0, 0], [0, 0, 1, 1, 0], [0, 0, 1, 1, 0]].

Quiz
If input grids are like that
[[8, 8, 8, 0], [0, 1, 1, 1], [0, 8, 8, 0], [1, 1, 1, 1], [8, 8, 8, 0], [8, 8, 8, 0], [0, 1, 1, 1], [0, 8, 8, 0], [0, 8, 8, 0], [1, 1, 1, 1], [1, 1, 1, 1], [8, 8, 8, 8], [1, 1, 0, 0], [0, 8, 8, 8], [1, 1, 1, 0], [8, 8, 8, 8], [0, 1, 1, 0], [0, 1, 1, 0], [8, 8, 8, 8], [8, 8, 8, 8], [0, 1, 1, 1], [0, 1, 1, 1]],
then output grids?

=========","The pattern in this problem is that the color 1 changes to color 2 and color 8 remains the same. So, if the input grids are like that
[[8, 8, 8, 0], [0, 1, 1, 1], [0, 8, 8, 0], [1, 1, 1, 1], [8, 8, 8, 0], [8, 8, 8, 0], [0, 1, 1, 1], [0, 8, 8, 0], [0, 8, 8, 0], [1, 1, 1, 1], [1, 1, 1, 1], [8, 8, 8, 8], [1, 1, 0, 0], [0, 8, 8, 8], [1, 1, 1, 0], [8, 8, 8, 8], [0, 1, 1, 0], [0, 1, 1, 0], [8, 8, 8, 8], [8, 8, 8, 8], [0, 1, 1, 1], [0, 1, 1, 1]],
then the output grids would be
[[8, 8, 8, 0], [0, 2, 2, 2], [0, 8, 8, 0], [2, 2, 2, 2], [8, 8, 8, 0], [8, 8, 8, 0], [0, 2, 2, 2], [0, 8, 8, 0], [0, 8, 8, 0], [2, 2, 2, 2], [2, 2, 2, 2], [8, 8, 8, 8], [2, 2, 0, 0], [0, 8, 8, 8], [2, 2, 2, 0], [8, 8, 8, 8], [0, 2, 2, 0], [0, 2, 2, 0], [8, 8, 8, 8], [8, 8, 8, 8], [0, 2, 2, 2], [0, 2, 2, 2]].","[[8, 8, 8, 0], [0, 1, 1, 1], [0, 8, 8, 0], [1, 1, 1, 1], [8, 8, 8, 0], [8, 8, 8, 0], [0, 1, 1, 1], [0, 8, 8, 0], [0, 8, 8, 0], [1, 1, 1, 1], [1, 1, 1, 1], [8, 8, 8, 8], [1, 1, 0, 0], [0, 8, 8, 8], [1, 1, 1, 0], [8, 8, 8, 8], [0, 1, 1, 0], [0, 1, 1, 0], [8, 8, 8, 8], [8, 8, 8, 8], [0, 1, 1, 1], [0, 1, 1, 1]],
then the output grids would be
[[8, 8, 8, 0], [0, 2, 2, 2], [0, 8, 8, 0], [2, 2, 2, 2], [8, 8, 8, 0], [8, 8, 8, 0], [0, 2, 2, 2], [0, 8, 8, 0], [0, 8, 8, 0], [2, 2, 2, 2], [2, 2, 2, 2], [8, 8, 8, 8], [2, 2, 0, 0], [0, 8, 8, 8], [2, 2, 2, 0], [8, 8, 8, 8], [0, 2, 2, 0], [0, 2, 2, 0], [8, 8, 8, 8], [8, 8, 8, 8], [0, 2, 2, 2], [0, 2, 2, 2]]","[[8, 8, 8, 0], [0, 2, 2, 2], [0, 8, 8, 0], [2, 2, 2, 2], [8, 8, 8, 0], [8, 8, 8, 0], [0, 2, 2, 2], [0, 8, 8, 0], [0, 8, 8, 0], [2, 2, 2, 2], [2, 2, 2, 2], [8, 8, 8, 8], [2, 2, 0, 0], [0, 8, 8, 8], [2, 2, 2, 0], [8, 8, 8, 8], [0, 2, 2, 0], [0, 2, 2, 0], [8, 8, 8, 8], [8, 8, 8, 8], [0, 2, 2, 2], [0, 2, 2, 2]]","[[2, 2, 2, 0], [0, 1, 1, 1], [0, 8, 8, 0], [2, 2, 2, 2], [8, 8, 8, 0], [8, 8, 8, 0], [0, 1, 1, 1], [0, 2, 2, 0], [0, 2, 2, 0], [1, 1, 1, 1], [1, 1, 1, 1], [8, 8, 8, 8], [2, 2, 0, 0], [0, 8, 8, 8], [1, 1, 1, 0], [2, 2, 2, 2], [0, 1, 1, 0], [0, 1, 1, 0], [8, 8, 8, 8], [8, 8, 8, 8], [0, 2, 2, 2], [0, 2, 2, 2]]",False,,Medium
25094a63,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[3, 3, 2, 6, 3, 6, 8, 8, 8, 2, 3, 3, 3, 3, 3, 6, 3, 3, 8, 8, 1, 2, 2, 6, 3, 3, 2, 8, 1, 1], [8, 2, 1, 6, 3, 1, 8, 3, 1, 8, 3, 8, 8, 1, 3, 2, 8, 3, 8, 8, 3, 1, 3, 1, 8, 3, 2, 6, 2, 6], [1, 8, 3, 1, 8, 8, 8, 8, 8, 8, 1, 3, 2, 3, 3, 6, 6, 2, 3, 6, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3], [1, 2, 8, 1, 8, 8, 8, 8, 8, 8, 3, 8, 1, 2, 1, 1, 2, 3, 8, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3], [1, 3, 8, 1, 8, 8, 8, 8, 8, 8, 3, 2, 3, 3, 8, 3, 1, 1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 6, 8, 3], [3, 3, 8, 2, 8, 8, 8, 8, 8, 8, 3, 3, 1, 3, 2, 3, 6, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 6, 2], [8, 2, 1, 1, 8, 8, 8, 8, 8, 8, 3, 3, 6, 1, 3, 1, 8, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 8], [1, 3, 3, 6, 8, 8, 8, 8, 8, 8, 8, 1, 2, 8, 2, 8, 2, 1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 8, 6], [3, 1, 3, 8, 3, 2, 3, 8, 1, 3, 1, 8, 1, 3, 1, 2, 3, 1, 8, 6, 2, 1, 3, 1, 1, 8, 3, 1, 6, 3], [2, 8, 6, 3, 1, 3, 8, 2, 1, 3, 2, 3, 3, 3, 3, 1, 8, 3, 3, 6, 2, 8, 2, 2, 6, 2, 1, 6, 2, 3], [8, 8, 2, 2, 3, 1, 1, 3, 2, 3, 3, 8, 2, 3, 3, 8, 8, 6, 6, 2, 1, 2, 6, 2, 3, 3, 3, 2, 6, 3], [6, 3, 2, 2, 8, 3, 2, 3, 3, 1, 3, 2, 2, 3, 2, 6, 3, 2, 2, 1, 1, 2, 1, 8, 6, 3, 2, 1, 8, 2], [8, 6, 2, 8, 2, 2, 2, 3, 3, 8, 1, 1, 3, 1, 6, 1, 3, 2, 8, 3, 8, 3, 3, 3, 3, 3, 3, 1, 8, 1], [8, 8, 2, 8, 8, 6, 8, 6, 3, 8, 6, 1, 3, 2, 8, 3, 6, 6, 2, 6, 3, 8, 3, 3, 3, 3, 3, 3, 8, 1], [1, 8, 2, 6, 2, 8, 1, 3, 6, 3, 8, 2, 2, 3, 6, 1, 6, 2, 8, 3, 8, 3, 3, 3, 3, 3, 3, 2, 2, 3], [3, 2, 8, 1, 1, 3, 2, 2, 2, 6, 8, 3, 8, 8, 1, 2, 8, 6, 1, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 2], [8, 3, 8, 1, 2, 3, 8, 6, 3, 3, 3, 1, 6, 3, 1, 2, 1, 3, 2, 3, 2, 8, 3, 3, 3, 3, 3, 8, 3, 3], [6, 2, 3, 8, 6, 2, 2, 1, 8, 8, 1, 1, 1, 1, 1, 1, 1, 6, 6, 2, 1, 6, 3, 1, 6, 8, 3, 1, 2, 3], [2, 1, 2, 1, 8, 2, 3, 2, 6, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 6, 2, 1, 2, 2, 2, 3, 3, 1], [1, 8, 8, 2, 8, 2, 2, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 8, 2, 3, 2, 3, 6, 6, 2, 3, 3, 3, 6, 3], [2, 6, 8, 3, 6, 1, 3, 8, 3, 6, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 1, 6, 3, 3, 6, 1, 3, 2, 2], [6, 8, 6, 2, 3, 2, 6, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 8, 1, 6, 3, 3, 3, 8, 1, 8, 2, 3], [6, 3, 1, 3, 6, 6, 1, 6, 3, 8, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 6, 3, 3, 8, 1, 8, 3, 8, 2, 1], [3, 2, 2, 3, 1, 1, 2, 3, 8, 6, 1, 3, 3, 1, 8, 3, 1, 8, 8, 3, 8, 3, 1, 8, 8, 1, 1, 2, 1, 8], [3, 2, 3, 6, 1, 8, 3, 6, 3, 3, 2, 2, 1, 3, 6, 3, 2, 3, 8, 3, 8, 3, 2, 2, 2, 2, 3, 3, 1, 6], [2, 8, 6, 2, 2, 1, 8, 3, 1, 6, 8, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 2, 2, 8, 6, 8, 3, 6, 1, 3], [6, 2, 3, 2, 3, 3, 8, 3, 3, 6, 2, 2, 3, 3, 8, 8, 1, 3, 1, 2, 8, 3, 8, 3, 3, 3, 6, 1, 2, 2], [2, 3, 2, 1, 2, 6, 3, 1, 8, 3, 1, 6, 2, 3, 8, 2, 6, 1, 1, 1, 3, 6, 8, 1, 2, 8, 6, 2, 3, 2], [2, 1, 8, 2, 6, 3, 8, 2, 3, 6, 8, 8, 2, 8, 8, 3, 2, 3, 1, 6, 8, 2, 6, 3, 2, 3, 2, 1, 8, 3], [1, 6, 3, 1, 6, 6, 3, 1, 2, 8, 8, 1, 8, 1, 3, 3, 1, 2, 6, 8, 3, 1, 6, 8, 3, 8, 3, 1, 1, 8]],
then this grids change to output grids below
[[3, 3, 2, 6, 3, 6, 8, 8, 8, 2, 3, 3, 3, 3, 3, 6, 3, 3, 8, 8, 1, 2, 2, 6, 3, 3, 2, 8, 1, 1], [8, 2, 1, 6, 3, 1, 8, 3, 1, 8, 3, 8, 8, 1, 3, 2, 8, 3, 8, 8, 3, 1, 3, 1, 8, 3, 2, 6, 2, 6], [1, 8, 3, 1, 4, 4, 4, 4, 4, 4, 1, 3, 2, 3, 3, 6, 6, 2, 3, 6, 4, 4, 4, 4, 4, 4, 4, 3, 2, 3], [1, 2, 8, 1, 4, 4, 4, 4, 4, 4, 3, 8, 1, 2, 1, 1, 2, 3, 8, 3, 4, 4, 4, 4, 4, 4, 4, 2, 1, 3], [1, 3, 8, 1, 4, 4, 4, 4, 4, 4, 3, 2, 3, 3, 8, 3, 1, 1, 3, 3, 4, 4, 4, 4, 4, 4, 4, 6, 8, 3], [3, 3, 8, 2, 4, 4, 4, 4, 4, 4, 3, 3, 1, 3, 2, 3, 6, 1, 1, 2, 4, 4, 4, 4, 4, 4, 4, 3, 6, 2], [8, 2, 1, 1, 4, 4, 4, 4, 4, 4, 3, 3, 6, 1, 3, 1, 8, 1, 2, 1, 4, 4, 4, 4, 4, 4, 4, 2, 3, 8], [1, 3, 3, 6, 4, 4, 4, 4, 4, 4, 8, 1, 2, 8, 2, 8, 2, 1, 3, 3, 4, 4, 4, 4, 4, 4, 4, 2, 8, 6], [3, 1, 3, 8, 3, 2, 3, 8, 1, 3, 1, 8, 1, 3, 1, 2, 3, 1, 8, 6, 2, 1, 3, 1, 1, 8, 3, 1, 6, 3], [2, 8, 6, 3, 1, 3, 8, 2, 1, 3, 2, 3, 3, 3, 3, 1, 8, 3, 3, 6, 2, 8, 2, 2, 6, 2, 1, 6, 2, 3], [8, 8, 2, 2, 3, 1, 1, 3, 2, 3, 3, 8, 2, 3, 3, 8, 8, 6, 6, 2, 1, 2, 6, 2, 3, 3, 3, 2, 6, 3], [6, 3, 2, 2, 8, 3, 2, 3, 3, 1, 3, 2, 2, 3, 2, 6, 3, 2, 2, 1, 1, 2, 1, 8, 6, 3, 2, 1, 8, 2], [8, 6, 2, 8, 2, 2, 2, 3, 3, 8, 1, 1, 3, 1, 6, 1, 3, 2, 8, 3, 8, 3, 4, 4, 4, 4, 4, 1, 8, 1], [8, 8, 2, 8, 8, 6, 8, 6, 3, 8, 6, 1, 3, 2, 8, 3, 6, 6, 2, 6, 3, 8, 4, 4, 4, 4, 4, 3, 8, 1], [1, 8, 2, 6, 2, 8, 1, 3, 6, 3, 8, 2, 2, 3, 6, 1, 6, 2, 8, 3, 8, 3, 4, 4, 4, 4, 4, 2, 2, 3], [3, 2, 8, 1, 1, 3, 2, 2, 2, 6, 8, 3, 8, 8, 1, 2, 8, 6, 1, 3, 1, 2, 4, 4, 4, 4, 4, 2, 2, 2], [8, 3, 8, 1, 2, 3, 8, 6, 3, 3, 3, 1, 6, 3, 1, 2, 1, 3, 2, 3, 2, 8, 4, 4, 4, 4, 4, 8, 3, 3], [6, 2, 3, 8, 6, 2, 2, 1, 8, 8, 4, 4, 4, 4, 4, 4, 4, 6, 6, 2, 1, 6, 3, 1, 6, 8, 3, 1, 2, 3], [2, 1, 2, 1, 8, 2, 3, 2, 6, 8, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 3, 6, 2, 1, 2, 2, 2, 3, 3, 1], [1, 8, 8, 2, 8, 2, 2, 2, 3, 1, 4, 4, 4, 4, 4, 4, 4, 8, 2, 3, 2, 3, 6, 6, 2, 3, 3, 3, 6, 3], [2, 6, 8, 3, 6, 1, 3, 8, 3, 6, 4, 4, 4, 4, 4, 4, 4, 2, 3, 3, 3, 1, 6, 3, 3, 6, 1, 3, 2, 2], [6, 8, 6, 2, 3, 2, 6, 3, 3, 1, 4, 4, 4, 4, 4, 4, 4, 3, 3, 8, 1, 6, 3, 3, 3, 8, 1, 8, 2, 3], [6, 3, 1, 3, 6, 6, 1, 6, 3, 8, 4, 4, 4, 4, 4, 4, 4, 1, 2, 1, 6, 3, 3, 8, 1, 8, 3, 8, 2, 1], [3, 2, 2, 3, 1, 1, 2, 3, 8, 6, 1, 3, 3, 1, 8, 3, 1, 8, 8, 3, 8, 3, 1, 8, 8, 1, 1, 2, 1, 8], [3, 2, 3, 6, 1, 8, 3, 6, 3, 3, 2, 2, 1, 3, 6, 3, 2, 3, 8, 3, 8, 3, 2, 2, 2, 2, 3, 3, 1, 6], [2, 8, 6, 2, 2, 1, 8, 3, 1, 6, 8, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 2, 2, 8, 6, 8, 3, 6, 1, 3], [6, 2, 3, 2, 3, 3, 8, 3, 3, 6, 2, 2, 3, 3, 8, 8, 1, 3, 1, 2, 8, 3, 8, 3, 3, 3, 6, 1, 2, 2], [2, 3, 2, 1, 2, 6, 3, 1, 8, 3, 1, 6, 2, 3, 8, 2, 6, 1, 1, 1, 3, 6, 8, 1, 2, 8, 6, 2, 3, 2], [2, 1, 8, 2, 6, 3, 8, 2, 3, 6, 8, 8, 2, 8, 8, 3, 2, 3, 1, 6, 8, 2, 6, 3, 2, 3, 2, 1, 8, 3], [1, 6, 3, 1, 6, 6, 3, 1, 2, 8, 8, 1, 8, 1, 3, 3, 1, 2, 6, 8, 3, 1, 6, 8, 3, 8, 3, 1, 1, 8]].

Example 2
If input grids are like that
[[6, 8, 6, 8, 8, 8, 8, 6, 6, 3, 8, 6, 2, 3, 8, 1, 2, 8, 1, 3, 8, 3, 3, 6, 6, 1, 2, 6, 2, 2], [2, 3, 3, 2, 2, 3, 6, 2, 6, 2, 8, 1, 3, 8, 1, 8, 1, 8, 8, 8, 8, 2, 2, 3, 2, 1, 2, 8, 6, 3], [2, 3, 8, 2, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 8, 2, 6, 6, 2, 8, 3, 8, 8, 3, 2, 3, 3, 3, 2], [8, 6, 8, 2, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 1, 1, 2, 1, 2, 6, 8, 2, 6, 2, 1, 8, 3, 3, 8], [6, 8, 6, 2, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 8, 1, 1, 2, 1, 8, 3, 8, 2, 3, 6, 8, 2], [3, 8, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 8, 6, 3, 2, 6, 1, 6, 6, 2, 8, 8, 3, 2, 6, 6], [2, 6, 3, 2, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 3, 8, 3, 3, 6, 3, 1, 8, 8, 1, 2, 3, 1, 8, 8], [3, 8, 1, 6, 1, 8, 1, 3, 8, 3, 2, 3, 2, 8, 1, 3, 1, 2, 2, 8, 1, 6, 3, 3, 3, 6, 2, 2, 8, 6], [8, 3, 3, 8, 3, 8, 2, 2, 8, 8, 8, 8, 8, 1, 1, 6, 3, 3, 6, 2, 2, 6, 1, 3, 3, 6, 3, 1, 3, 3], [2, 3, 3, 2, 3, 2, 6, 2, 3, 6, 8, 3, 3, 8, 3, 6, 1, 3, 3, 8, 8, 1, 6, 6, 8, 8, 1, 6, 2, 6], [3, 6, 3, 3, 3, 2, 3, 6, 1, 6, 3, 8, 2, 8, 2, 3, 2, 6, 3, 6, 6, 8, 3, 6, 6, 1, 6, 8, 8, 6], [8, 3, 3, 1, 2, 2, 6, 8, 2, 3, 6, 8, 3, 2, 2, 6, 3, 2, 1, 2, 6, 3, 6, 8, 8, 8, 1, 8, 1, 6], [1, 8, 8, 1, 6, 6, 8, 2, 8, 2, 1, 2, 8, 8, 1, 8, 2, 8, 3, 8, 3, 3, 8, 8, 2, 3, 3, 3, 3, 3], [8, 8, 3, 8, 3, 2, 8, 6, 3, 3, 1, 3, 2, 1, 6, 6, 8, 3, 6, 6, 3, 6, 3, 1, 8, 1, 2, 6, 3, 8], [8, 6, 6, 3, 2, 6, 6, 8, 6, 1, 3, 2, 8, 3, 1, 2, 8, 3, 6, 2, 8, 8, 3, 2, 2, 6, 1, 8, 6, 3], [1, 8, 1, 6, 2, 3, 2, 2, 1, 8, 2, 2, 8, 3, 6, 8, 8, 8, 2, 8, 8, 3, 3, 1, 3, 2, 2, 1, 3, 2], [8, 1, 3, 6, 8, 8, 6, 6, 3, 3, 2, 2, 3, 8, 8, 8, 8, 8, 8, 8, 1, 3, 3, 8, 2, 3, 6, 2, 8, 2], [3, 3, 3, 6, 3, 2, 2, 2, 6, 3, 2, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 2, 3, 2, 2, 2, 2, 3], [3, 2, 1, 2, 2, 8, 6, 3, 8, 8, 8, 3, 1, 8, 8, 8, 8, 8, 8, 8, 6, 1, 8, 3, 8, 3, 6, 8, 1, 8], [3, 6, 1, 3, 2, 3, 6, 6, 6, 3, 2, 1, 3, 8, 8, 8, 8, 8, 8, 8, 3, 3, 2, 1, 8, 3, 6, 3, 2, 3], [8, 1, 3, 8, 6, 2, 3, 3, 3, 3, 2, 8, 6, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 3, 8, 2, 3, 1, 3, 2], [3, 6, 3, 2, 8, 6, 6, 3, 8, 3, 1, 2, 3, 8, 8, 8, 8, 8, 8, 8, 3, 6, 8, 6, 1, 2, 1, 3, 3, 6], [3, 8, 8, 2, 3, 8, 3, 6, 8, 8, 3, 1, 3, 3, 8, 8, 2, 2, 2, 2, 3, 8, 1, 1, 3, 3, 2, 3, 1, 3], [3, 3, 6, 8, 1, 6, 6, 2, 8, 6, 6, 1, 8, 1, 2, 2, 1, 6, 8, 3, 2, 6, 8, 6, 8, 8, 6, 2, 8, 3], [8, 3, 3, 1, 8, 3, 2, 3, 3, 3, 8, 3, 3, 3, 3, 2, 3, 8, 3, 1, 3, 6, 6, 6, 6, 6, 3, 6, 2, 3], [3, 6, 8, 3, 2, 1, 8, 6, 6, 8, 6, 6, 1, 6, 6, 1, 3, 3, 6, 2, 6, 1, 3, 3, 8, 1, 2, 2, 3, 3], [1, 8, 3, 6, 3, 2, 6, 8, 8, 1, 6, 6, 8, 6, 6, 6, 2, 6, 8, 3, 8, 1, 3, 8, 2, 6, 3, 2, 6, 6], [8, 8, 6, 8, 1, 1, 8, 2, 2, 3, 6, 2, 8, 3, 8, 2, 1, 1, 8, 6, 8, 6, 8, 6, 3, 3, 3, 3, 2, 3], [1, 3, 8, 1, 3, 1, 6, 3, 6, 8, 2, 3, 3, 8, 2, 2, 2, 1, 3, 2, 8, 8, 3, 8, 6, 6, 3, 8, 3, 8], [6, 2, 6, 2, 8, 2, 3, 3, 3, 3, 1, 3, 3, 3, 2, 6, 3, 8, 2, 3, 6, 3, 3, 2, 2, 3, 8, 8, 1, 3]],
then this grids change to output grids below
[[6, 8, 6, 8, 8, 8, 8, 6, 6, 3, 8, 6, 2, 3, 8, 1, 2, 8, 1, 3, 8, 3, 3, 6, 6, 1, 2, 6, 2, 2], [2, 3, 3, 2, 2, 3, 6, 2, 6, 2, 8, 1, 3, 8, 1, 8, 1, 8, 8, 8, 8, 2, 2, 3, 2, 1, 2, 8, 6, 3], [2, 3, 8, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 8, 2, 6, 6, 2, 8, 3, 8, 8, 3, 2, 3, 3, 3, 2], [8, 6, 8, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 1, 1, 2, 1, 2, 6, 8, 2, 6, 2, 1, 8, 3, 3, 8], [6, 8, 6, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 8, 1, 1, 2, 1, 8, 3, 8, 2, 3, 6, 8, 2], [3, 8, 3, 3, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 8, 6, 3, 2, 6, 1, 6, 6, 2, 8, 8, 3, 2, 6, 6], [2, 6, 3, 2, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 3, 8, 3, 3, 6, 3, 1, 8, 8, 1, 2, 3, 1, 8, 8], [3, 8, 1, 6, 1, 8, 1, 3, 8, 3, 2, 3, 2, 8, 1, 3, 1, 2, 2, 8, 1, 6, 3, 3, 3, 6, 2, 2, 8, 6], [8, 3, 3, 8, 3, 8, 2, 2, 8, 8, 8, 8, 8, 1, 1, 6, 3, 3, 6, 2, 2, 6, 1, 3, 3, 6, 3, 1, 3, 3], [2, 3, 3, 2, 3, 2, 6, 2, 3, 6, 8, 3, 3, 8, 3, 6, 1, 3, 3, 8, 8, 1, 6, 6, 8, 8, 1, 6, 2, 6], [3, 6, 3, 3, 3, 2, 3, 6, 1, 6, 3, 8, 2, 8, 2, 3, 2, 6, 3, 6, 6, 8, 3, 6, 6, 1, 6, 8, 8, 6], [8, 3, 3, 1, 2, 2, 6, 8, 2, 3, 6, 8, 3, 2, 2, 6, 3, 2, 1, 2, 6, 3, 6, 8, 8, 8, 1, 8, 1, 6], [1, 8, 8, 1, 6, 6, 8, 2, 8, 2, 1, 2, 8, 8, 1, 8, 2, 8, 3, 8, 3, 3, 8, 8, 2, 3, 3, 3, 3, 3], [8, 8, 3, 8, 3, 2, 8, 6, 3, 3, 1, 3, 2, 1, 6, 6, 8, 3, 6, 6, 3, 6, 3, 1, 8, 1, 2, 6, 3, 8], [8, 6, 6, 3, 2, 6, 6, 8, 6, 1, 3, 2, 8, 3, 1, 2, 8, 3, 6, 2, 8, 8, 3, 2, 2, 6, 1, 8, 6, 3], [1, 8, 1, 6, 2, 3, 2, 2, 1, 8, 2, 2, 8, 3, 6, 8, 8, 8, 2, 8, 8, 3, 3, 1, 3, 2, 2, 1, 3, 2], [8, 1, 3, 6, 8, 8, 6, 6, 3, 3, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 1, 3, 3, 8, 2, 3, 6, 2, 8, 2], [3, 3, 3, 6, 3, 2, 2, 2, 6, 3, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 8, 3, 3, 2, 3, 2, 2, 2, 2, 3], [3, 2, 1, 2, 2, 8, 6, 3, 8, 8, 8, 3, 1, 4, 4, 4, 4, 4, 4, 4, 6, 1, 8, 3, 8, 3, 6, 8, 1, 8], [3, 6, 1, 3, 2, 3, 6, 6, 6, 3, 2, 1, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 1, 8, 3, 6, 3, 2, 3], [8, 1, 3, 8, 6, 2, 3, 3, 3, 3, 2, 8, 6, 4, 4, 4, 4, 4, 4, 4, 2, 8, 8, 3, 8, 2, 3, 1, 3, 2], [3, 6, 3, 2, 8, 6, 6, 3, 8, 3, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 6, 8, 6, 1, 2, 1, 3, 3, 6], [3, 8, 8, 2, 3, 8, 3, 6, 8, 8, 3, 1, 3, 3, 8, 8, 2, 2, 2, 2, 3, 8, 1, 1, 3, 3, 2, 3, 1, 3], [3, 3, 6, 8, 1, 6, 6, 2, 8, 6, 6, 1, 8, 1, 2, 2, 1, 6, 8, 3, 2, 6, 8, 6, 8, 8, 6, 2, 8, 3], [8, 3, 3, 1, 8, 3, 2, 3, 3, 3, 8, 3, 3, 3, 3, 2, 3, 8, 3, 1, 3, 6, 6, 6, 6, 6, 3, 6, 2, 3], [3, 6, 8, 3, 2, 1, 8, 6, 6, 8, 6, 6, 1, 6, 6, 1, 3, 3, 6, 2, 6, 1, 3, 3, 8, 1, 2, 2, 3, 3], [1, 8, 3, 6, 3, 2, 6, 8, 8, 1, 6, 6, 8, 6, 6, 6, 2, 6, 8, 3, 8, 1, 3, 8, 2, 6, 3, 2, 6, 6], [8, 8, 6, 8, 1, 1, 8, 2, 2, 3, 6, 2, 8, 3, 8, 2, 1, 1, 8, 6, 8, 6, 8, 6, 3, 3, 3, 3, 2, 3], [1, 3, 8, 1, 3, 1, 6, 3, 6, 8, 2, 3, 3, 8, 2, 2, 2, 1, 3, 2, 8, 8, 3, 8, 6, 6, 3, 8, 3, 8], [6, 2, 6, 2, 8, 2, 3, 3, 3, 3, 1, 3, 3, 3, 2, 6, 3, 8, 2, 3, 6, 3, 3, 2, 2, 3, 8, 8, 1, 3]].

Quiz
If input grids are like that
[[6, 8, 3, 3, 3, 8, 1, 8, 3, 8, 8, 1, 6, 3, 1, 2, 3, 1, 1, 1, 3, 1, 2, 2, 6, 8, 2, 3, 8, 6], [1, 6, 6, 8, 8, 1, 3, 3, 6, 3, 8, 8, 2, 1, 1, 3, 6, 8, 8, 3, 1, 2, 1, 8, 2, 3, 8, 8, 8, 2], [8, 8, 3, 6, 3, 1, 6, 8, 3, 8, 6, 3, 1, 2, 8, 1, 8, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 8, 3, 6], [1, 3, 1, 2, 8, 1, 8, 2, 2, 2, 1, 3, 1, 8, 3, 6, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 6, 3], [8, 1, 2, 3, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 3, 8, 1, 1, 1, 1, 1, 1, 1, 8, 3, 6, 8], [6, 1, 3, 1, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 3, 1, 6, 1, 1, 1, 1, 1, 6, 2, 8, 3], [3, 3, 3, 3, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 3, 1, 1, 6, 2, 8, 8, 8, 8, 8, 8, 1, 3], [3, 3, 1, 3, 2, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 3, 2, 6, 3, 2, 1, 8, 8, 8, 2, 8], [1, 8, 3, 2, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 8, 8, 8, 2, 8, 3, 1, 3, 3, 6, 1, 3, 1], [8, 1, 2, 3, 1, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 6, 6, 1, 3, 8, 3, 3, 2, 8, 8, 8, 1], [3, 3, 1, 1, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 1, 8, 1, 8, 6, 2, 8, 1, 1, 1, 6, 3], [6, 1, 1, 2, 1, 6, 8, 3, 2, 2, 8, 1, 6, 3, 8, 2, 6, 3, 2, 1, 3, 3, 6, 1, 2, 8, 6, 2, 2, 2], [1, 3, 2, 8, 1, 2, 8, 8, 1, 3, 2, 2, 2, 2, 3, 3, 3, 8, 3, 2, 1, 1, 6, 6, 3, 8, 3, 3, 1, 6], [8, 1, 2, 6, 3, 1, 3, 2, 8, 1, 3, 3, 8, 1, 8, 3, 6, 6, 8, 3, 1, 8, 1, 3, 3, 2, 3, 3, 6, 3], [8, 8, 1, 3, 2, 8, 1, 1, 2, 1, 2, 1, 8, 1, 1, 3, 3, 3, 8, 8, 8, 3, 3, 3, 1, 8, 6, 1, 1, 3], [6, 8, 3, 2, 8, 1, 3, 1, 1, 3, 1, 1, 8, 3, 8, 8, 3, 3, 3, 6, 3, 3, 3, 1, 3, 6, 3, 2, 8, 6], [3, 8, 1, 1, 8, 2, 3, 3, 2, 8, 1, 6, 1, 6, 6, 8, 6, 3, 1, 8, 3, 8, 8, 8, 1, 1, 6, 3, 3, 1], [8, 8, 1, 2, 3, 6, 3, 3, 1, 8, 8, 3, 3, 6, 8, 1, 8, 1, 2, 2, 3, 8, 3, 8, 8, 2, 6, 8, 6, 1], [3, 1, 8, 2, 3, 3, 6, 3, 3, 6, 3, 1, 1, 3, 1, 1, 8, 1, 3, 1, 8, 2, 8, 1, 1, 2, 1, 3, 3, 8], [8, 8, 8, 1, 2, 8, 8, 3, 1, 1, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 1, 3, 8, 2, 8, 8, 1, 2, 8], [6, 8, 3, 8, 1, 2, 8, 3, 8, 3, 1, 8, 3, 3, 1, 3, 3, 3, 3, 3, 3, 8, 2, 8, 8, 8, 3, 3, 1, 1], [8, 1, 6, 3, 1, 2, 8, 8, 1, 1, 3, 8, 2, 3, 8, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 1, 3, 1], [2, 1, 2, 2, 1, 8, 6, 3, 1, 3, 8, 8, 8, 2, 2, 3, 3, 3, 3, 3, 3, 8, 8, 1, 3, 1, 1, 3, 2, 6], [1, 1, 3, 6, 6, 3, 2, 2, 8, 2, 6, 3, 8, 6, 2, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 8, 3, 3, 3], [1, 3, 6, 1, 8, 3, 2, 1, 3, 3, 1, 3, 8, 3, 8, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 8, 1, 2], [8, 8, 3, 8, 8, 2, 2, 2, 2, 8, 8, 6, 8, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1, 6, 1, 8, 6, 8, 6], [3, 3, 1, 1, 1, 8, 8, 3, 3, 3, 2, 8, 2, 3, 3, 3, 3, 3, 6, 8, 8, 2, 2, 8, 1, 1, 2, 1, 8, 8], [6, 6, 3, 3, 3, 6, 3, 3, 8, 8, 8, 8, 1, 3, 6, 8, 3, 3, 8, 1, 1, 1, 6, 1, 2, 6, 2, 6, 3, 8], [1, 2, 8, 3, 2, 1, 3, 3, 3, 3, 1, 3, 8, 6, 6, 1, 8, 1, 6, 2, 1, 6, 3, 3, 3, 8, 3, 8, 1, 8], [8, 6, 2, 6, 3, 8, 2, 8, 8, 3, 1, 1, 6, 1, 1, 2, 1, 8, 1, 2, 1, 3, 1, 8, 3, 6, 3, 3, 3, 8]],
then output grids?

=========","The output grids would be:

[[6, 8, 3, 3, 3, 8, 1, 8, 3, 8, 8, 1, 6, 3, 1, 2, 3, 1, 1, 1, 3, 1, 2, 2, 6, 8, 2, 3, 8, 6], [1, 6, 6, 8, 8, 1, 3, 3, 6, 3, 8, 8, 2, 1, 1, 3, 6, 8, 8, 3, 1, 2, 1, 8, 2, 3, 8, 8, 8, 2], [8, 8, 3, 6, 3, 1, 6, 8, 3, 8, 6, 3, 1, 2, 8, 1, 8, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 8, 3, 6], [1, 3, 1, 2, 8, 1, 8, 2, 2, 2, 1, 3, 1, 8, 3, 6, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 6, 3], [8, 1, 2, 3, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 3, 8, 1, 1, 1, 1, 1, 1, 1, 8, 3, 6, 8], [6, 1, 3, 1, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 3, 1, 6, 1, 1, 1, 1, 1, 6, 2, 8, 3], [3, 3, 3, 3, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 3, 2, 1, 1, 1, 1, 1, 6, 2, 8, 6], [3, 8, 1, 6, 1, 8, 1, 3, 8, 3, 2, 3, 2, 8, 1, 3, 1, 2, 2, 8, 1, 6, 3, 3, 3, 6, 2, 2, 8, 6], [8, 3, 3, 8, 3, 8, 2, 2, 8, 8, 8, 8, 8, 1, 1, 6, 3, 3, 6, 2, 2, 6, 1, 3, 3, 6, 3, 1, 3, 3], [2, 3, 3, 2, 3, 2, 6, 2, 3, 6, 8, 3, 3, 8, 3, 6, 1, 3, 3, 8, 8, 1, 6, 6, 8, 8, 1, 6, 2, 6], [3, 6, 3, 3, 3, 2, 3, 6, 1, 6, 3, 8, 2, 8, 2, 3, 2, 6, 3, 6, 6, 8, 3, 6, 6, 1, 6, 8, 8, 6], [8, 3, 3, 1, 2, 2, 6, 8, 2, 3, 6, 8, 3, 2, 2, 6, 3, 2, 1, 2, 6, 3, 6, 8, 8, 8, 1, 8, 1, 6], [1, 8, 8, 1, 6, 6, 8, 2, 8, 2, 1, 2, 8, 8, 1, 8, 2, 8, 3, 8, 3, 3, 8, 8, 2, 3, 3, 3, 3, 3], [8, 8, 3, 8, 3, 2, 8, 6, 3, 3, 1, 3, 2, 1, 6, 6, 8, 3, 6, 6, 3, 6, 3, 1, 8, 1, 2, 6, 3, 8], [8, 6, 6, 3, 2, 6, 6, 8, 6, 1, 3, 2, 8, 3, 1, 2, 8, 3, 6, 2, 8, 8, 3, 2, 2, 6, 1, 8, 6, 3], [1, 8, 1, 6, 2, 3, 2, 2, 1, 8, 2, 2, 8, 3, 6, 8, 8, 8, 2, 8, 8, 3, 3, 1, 3, 2, 2, 1, 3, 2], [8, 1, 3, 6, 8, 8, 6, 6, 3, 3, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 1, 3, 3, 8, 2, 3, 6, 2, 8, 2], [3, 3, 3, 6, 3, 2, 2, 2, 6, 3, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 8, 3, 3, 2, 3, 2, 2, 2, 2, 3], [3, 2, 1, 2, 2, 8, 6, 3, 8, 8, 8, 3, 1, 4, 4, 4, 4, 4, 4, 4, 6, 1, 8, 3, 8, 3, 6, 8, 1, 8], [3, 6, 1, 3, 2, 3, 6, 6, 6, 3, 2, 1, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 1, 8, 3, 6, 3, 2, 3], [8, 1, 3, 8, 6, 2, 3, 3, 3, 3, 2, 8, 6, 4, 4, 4, 4, 4, 4, 4, 2, 8, 8, 3, 8, 2, 3, 1, 3, 2], [3, 6, 3, 2, 8, 6, 6, 3, 8, 3, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 6, 8, 6, 1, 2, 1, 3, 3, 6], [3, 8, 8, 2, 3, 8, 3, 6, 8, 8, 3, 1, 3, 3, 8, 8, 2, 2, 2, 2, 3, 8, 1, 1, 3, 3, 2, 3, 1, 3], [3, 3, 6, 8, 1, 6, 6, 2, 8, 6, 6, 1, 8, 1, 2, 2, 1, 6, 8, 3, 2, 6, 8, 6, 8, 8, 6, 2, 8, 3], [8, 3, 3, 1, 8, 3, 2, 3, 3, 3, 8, 3, 3, 3, 3, 2, 3, 8, 3, 1, 3, 6, 6, 6, 6, 6, 3, 6, 2, 3], [3, 6, 8, 3, 2, 1, 8, 6, 6, 8, 6, 6, 1, 6, 6, 1, 3, 3, 6, 2, 6, 1, 3, 3, 8, 1, 2, 2, 3, 3], [1, 8, 3, 6, 3, 2, 6, 8, 8, 1, 6, 6, 8, 6, 6, 6, 2, 6, 8, 3, 8, 1, 3, 8, 2, 6, 3, 2, 6, 6], [8, 8, 6, 8, 1, 1, 8, 2, 2, 3, 6, 2, 8, 3, 8, 2, 1, 1, 8, 6, 8, 6, 8, 6, 3, 3, 3, 3, 2, 3], [1, 3, 8, 1, 3, 1, 6, 3, 6, 8, 2, 3, 3, 8, 2, 2, 2, 1, 3, 2, 8, 8, 3, 8, 6, 6, 3, 8, 3, 8], [6, 2, 6, 2, 8, 2, 3, 3, 3, 3, 1, 3, 3, 3, 2, 6, 3, 8, 2, 3, 6, 3, 3, 2, 2, 3, 8, 8, 1, 3]]","[[6, 8, 3, 3, 3, 8, 1, 8, 3, 8, 8, 1, 6, 3, 1, 2, 3, 1, 1, 1, 3, 1, 2, 2, 6, 8, 2, 3, 8, 6], [1, 6, 6, 8, 8, 1, 3, 3, 6, 3, 8, 8, 2, 1, 1, 3, 6, 8, 8, 3, 1, 2, 1, 8, 2, 3, 8, 8, 8, 2], [8, 8, 3, 6, 3, 1, 6, 8, 3, 8, 6, 3, 1, 2, 8, 1, 8, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 8, 3, 6], [1, 3, 1, 2, 8, 1, 8, 2, 2, 2, 1, 3, 1, 8, 3, 6, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 6, 3], [8, 1, 2, 3, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 3, 8, 1, 1, 1, 1, 1, 1, 1, 8, 3, 6, 8], [6, 1, 3, 1, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 3, 1, 6, 1, 1, 1, 1, 1, 6, 2, 8, 3], [3, 3, 3, 3, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 3, 2, 1, 1, 1, 1, 1, 6, 2, 8, 6], [3, 8, 1, 6, 1, 8, 1, 3, 8, 3, 2, 3, 2, 8, 1, 3, 1, 2, 2, 8, 1, 6, 3, 3, 3, 6, 2, 2, 8, 6], [8, 3, 3, 8, 3, 8, 2, 2, 8, 8, 8, 8, 8, 1, 1, 6, 3, 3, 6, 2, 2, 6, 1, 3, 3, 6, 3, 1, 3, 3], [2, 3, 3, 2, 3, 2, 6, 2, 3, 6, 8, 3, 3, 8, 3, 6, 1, 3, 3, 8, 8, 1, 6, 6, 8, 8, 1, 6, 2, 6], [3, 6, 3, 3, 3, 2, 3, 6, 1, 6, 3, 8, 2, 8, 2, 3, 2, 6, 3, 6, 6, 8, 3, 6, 6, 1, 6, 8, 8, 6], [8, 3, 3, 1, 2, 2, 6, 8, 2, 3, 6, 8, 3, 2, 2, 6, 3, 2, 1, 2, 6, 3, 6, 8, 8, 8, 1, 8, 1, 6], [1, 8, 8, 1, 6, 6, 8, 2, 8, 2, 1, 2, 8, 8, 1, 8, 2, 8, 3, 8, 3, 3, 8, 8, 2, 3, 3, 3, 3, 3], [8, 8, 3, 8, 3, 2, 8, 6, 3, 3, 1, 3, 2, 1, 6, 6, 8, 3, 6, 6, 3, 6, 3, 1, 8, 1, 2, 6, 3, 8], [8, 6, 6, 3, 2, 6, 6, 8, 6, 1, 3, 2, 8, 3, 1, 2, 8, 3, 6, 2, 8, 8, 3, 2, 2, 6, 1, 8, 6, 3], [1, 8, 1, 6, 2, 3, 2, 2, 1, 8, 2, 2, 8, 3, 6, 8, 8, 8, 2, 8, 8, 3, 3, 1, 3, 2, 2, 1, 3, 2], [8, 1, 3, 6, 8, 8, 6, 6, 3, 3, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 1, 3, 3, 8, 2, 3, 6, 2, 8, 2], [3, 3, 3, 6, 3, 2, 2, 2, 6, 3, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 8, 3, 3, 2, 3, 2, 2, 2, 2, 3], [3, 2, 1, 2, 2, 8, 6, 3, 8, 8, 8, 3, 1, 4, 4, 4, 4, 4, 4, 4, 6, 1, 8, 3, 8, 3, 6, 8, 1, 8], [3, 6, 1, 3, 2, 3, 6, 6, 6, 3, 2, 1, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 1, 8, 3, 6, 3, 2, 3], [8, 1, 3, 8, 6, 2, 3, 3, 3, 3, 2, 8, 6, 4, 4, 4, 4, 4, 4, 4, 2, 8, 8, 3, 8, 2, 3, 1, 3, 2], [3, 6, 3, 2, 8, 6, 6, 3, 8, 3, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 6, 8, 6, 1, 2, 1, 3, 3, 6], [3, 8, 8, 2, 3, 8, 3, 6, 8, 8, 3, 1, 3, 3, 8, 8, 2, 2, 2, 2, 3, 8, 1, 1, 3, 3, 2, 3, 1, 3], [3, 3, 6, 8, 1, 6, 6, 2, 8, 6, 6, 1, 8, 1, 2, 2, 1, 6, 8, 3, 2, 6, 8, 6, 8, 8, 6, 2, 8, 3], [8, 3, 3, 1, 8, 3, 2, 3, 3, 3, 8, 3, 3, 3, 3, 2, 3, 8, 3, 1, 3, 6, 6, 6, 6, 6, 3, 6, 2, 3], [3, 6, 8, 3, 2, 1, 8, 6, 6, 8, 6, 6, 1, 6, 6, 1, 3, 3, 6, 2, 6, 1, 3, 3, 8, 1, 2, 2, 3, 3], [1, 8, 3, 6, 3, 2, 6, 8, 8, 1, 6, 6, 8, 6, 6, 6, 2, 6, 8, 3, 8, 1, 3, 8, 2, 6, 3, 2, 6, 6], [8, 8, 6, 8, 1, 1, 8, 2, 2, 3, 6, 2, 8, 3, 8, 2, 1, 1, 8, 6, 8, 6, 8, 6, 3, 3, 3, 3, 2, 3], [1, 3, 8, 1, 3, 1, 6, 3, 6, 8, 2, 3, 3, 8, 2, 2, 2, 1, 3, 2, 8, 8, 3, 8, 6, 6, 3, 8, 3, 8], [6, 2, 6, 2, 8, 2, 3, 3, 3, 3, 1, 3, 3, 3, 2, 6, 3, 8, 2, 3, 6, 3, 3, 2, 2, 3, 8, 8, 1, 3]]","[[6, 8, 3, 3, 3, 8, 1, 8, 3, 8, 8, 1, 6, 3, 1, 2, 3, 1, 1, 1, 3, 1, 2, 2, 6, 8, 2, 3, 8, 6], [1, 6, 6, 8, 8, 1, 3, 3, 6, 3, 8, 8, 2, 1, 1, 3, 6, 8, 8, 3, 1, 2, 1, 8, 2, 3, 8, 8, 8, 2], [8, 8, 3, 6, 3, 1, 6, 8, 3, 8, 6, 3, 1, 2, 8, 1, 8, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 8, 3, 6], [1, 3, 1, 2, 8, 1, 8, 2, 2, 2, 1, 3, 1, 8, 3, 6, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 6, 3], [8, 1, 2, 3, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 3, 8, 1, 1, 1, 1, 1, 1, 1, 8, 3, 6, 8], [6, 1, 3, 1, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 3, 1, 6, 1, 1, 1, 1, 1, 6, 2, 8, 3], [3, 3, 3, 3, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 3, 2, 1, 1, 1, 1, 1, 6, 2, 8, 6], [3, 8, 1, 6, 1, 8, 1, 3, 8, 3, 2, 3, 2, 8, 1, 3, 1, 2, 2, 8, 1, 6, 3, 3, 3, 6, 2, 2, 8, 6], [8, 3, 3, 8, 3, 8, 2, 2, 8, 8, 8, 8, 8, 1, 1, 6, 3, 3, 6, 2, 2, 6, 1, 3, 3, 6, 3, 1, 3, 3], [2, 3, 3, 2, 3, 2, 6, 2, 3, 6, 8, 3, 3, 8, 3, 6, 1, 3, 3, 8, 8, 1, 6, 6, 8, 8, 1, 6, 2, 6], [3, 6, 3, 3, 3, 2, 3, 6, 1, 6, 3, 8, 2, 8, 2, 3, 2, 6, 3, 6, 6, 8, 3, 6, 6, 1, 6, 8, 8, 6], [8, 3, 3, 1, 2, 2, 6, 8, 2, 3, 6, 8, 3, 2, 2, 6, 3, 2, 1, 2, 6, 3, 6, 8, 8, 8, 1, 8, 1, 6], [1, 8, 8, 1, 6, 6, 8, 2, 8, 2, 1, 2, 8, 8, 1, 8, 2, 8, 3, 8, 3, 3, 8, 8, 2, 3, 3, 3, 3, 3], [8, 8, 3, 8, 3, 2, 8, 6, 3, 3, 1, 3, 2, 1, 6, 6, 8, 3, 6, 6, 3, 6, 3, 1, 8, 1, 2, 6, 3, 8], [8, 6, 6, 3, 2, 6, 6, 8, 6, 1, 3, 2, 8, 3, 1, 2, 8, 3, 6, 2, 8, 8, 3, 2, 2, 6, 1, 8, 6, 3], [1, 8, 1, 6, 2, 3, 2, 2, 1, 8, 2, 2, 8, 3, 6, 8, 8, 8, 2, 8, 8, 3, 3, 1, 3, 2, 2, 1, 3, 2], [8, 1, 3, 6, 8, 8, 6, 6, 3, 3, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 1, 3, 3, 8, 2, 3, 6, 2, 8, 2], [3, 3, 3, 6, 3, 2, 2, 2, 6, 3, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 8, 3, 3, 2, 3, 2, 2, 2, 2, 3], [3, 2, 1, 2, 2, 8, 6, 3, 8, 8, 8, 3, 1, 4, 4, 4, 4, 4, 4, 4, 6, 1, 8, 3, 8, 3, 6, 8, 1, 8], [3, 6, 1, 3, 2, 3, 6, 6, 6, 3, 2, 1, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 1, 8, 3, 6, 3, 2, 3], [8, 1, 3, 8, 6, 2, 3, 3, 3, 3, 2, 8, 6, 4, 4, 4, 4, 4, 4, 4, 2, 8, 8, 3, 8, 2, 3, 1, 3, 2], [3, 6, 3, 2, 8, 6, 6, 3, 8, 3, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 6, 8, 6, 1, 2, 1, 3, 3, 6], [3, 8, 8, 2, 3, 8, 3, 6, 8, 8, 3, 1, 3, 3, 8, 8, 2, 2, 2, 2, 3, 8, 1, 1, 3, 3, 2, 3, 1, 3], [3, 3, 6, 8, 1, 6, 6, 2, 8, 6, 6, 1, 8, 1, 2, 2, 1, 6, 8, 3, 2, 6, 8, 6, 8, 8, 6, 2, 8, 3], [8, 3, 3, 1, 8, 3, 2, 3, 3, 3, 8, 3, 3, 3, 3, 2, 3, 8, 3, 1, 3, 6, 6, 6, 6, 6, 3, 6, 2, 3], [3, 6, 8, 3, 2, 1, 8, 6, 6, 8, 6, 6, 1, 6, 6, 1, 3, 3, 6, 2, 6, 1, 3, 3, 8, 1, 2, 2, 3, 3], [1, 8, 3, 6, 3, 2, 6, 8, 8, 1, 6, 6, 8, 6, 6, 6, 2, 6, 8, 3, 8, 1, 3, 8, 2, 6, 3, 2, 6, 6], [8, 8, 6, 8, 1, 1, 8, 2, 2, 3, 6, 2, 8, 3, 8, 2, 1, 1, 8, 6, 8, 6, 8, 6, 3, 3, 3, 3, 2, 3], [1, 3, 8, 1, 3, 1, 6, 3, 6, 8, 2, 3, 3, 8, 2, 2, 2, 1, 3, 2, 8, 8, 3, 8, 6, 6, 3, 8, 3, 8], [6, 2, 6, 2, 8, 2, 3, 3, 3, 3, 1, 3, 3, 3, 2, 6, 3, 8, 2, 3, 6, 3, 3, 2, 2, 3, 8, 8, 1, 3]]","[[6, 8, 3, 3, 3, 8, 1, 8, 3, 8, 8, 1, 6, 3, 1, 2, 3, 1, 1, 1, 3, 1, 2, 2, 6, 8, 2, 3, 8, 6], [1, 6, 6, 8, 8, 1, 3, 3, 6, 3, 8, 8, 2, 1, 1, 3, 6, 8, 8, 3, 1, 2, 1, 8, 2, 3, 8, 8, 8, 2], [8, 8, 3, 6, 3, 1, 6, 8, 3, 8, 6, 3, 1, 2, 8, 1, 8, 2, 1, 3, 2, 4, 4, 4, 4, 4, 1, 8, 3, 6], [1, 3, 1, 2, 8, 1, 8, 2, 2, 2, 1, 3, 1, 8, 3, 6, 3, 1, 1, 3, 1, 4, 4, 4, 4, 4, 1, 2, 6, 3], [8, 1, 2, 3, 8, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 3, 8, 1, 1, 4, 4, 4, 4, 4, 8, 3, 6, 8], [6, 1, 3, 1, 8, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 3, 1, 6, 4, 4, 4, 4, 4, 6, 2, 8, 3], [3, 3, 3, 3, 8, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 3, 1, 1, 6, 2, 8, 8, 8, 8, 8, 8, 1, 3], [3, 3, 1, 3, 2, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 1, 1, 3, 2, 6, 3, 2, 1, 8, 8, 8, 2, 8], [1, 8, 3, 2, 8, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 8, 8, 8, 2, 8, 3, 1, 3, 3, 6, 1, 3, 1], [8, 1, 2, 3, 1, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 8, 6, 6, 1, 3, 8, 3, 3, 2, 8, 8, 8, 1], [3, 3, 1, 1, 2, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 8, 1, 8, 1, 8, 6, 2, 8, 1, 1, 1, 6, 3], [6, 1, 1, 2, 1, 6, 8, 3, 2, 2, 8, 1, 6, 3, 8, 2, 6, 3, 2, 1, 3, 3, 6, 1, 2, 8, 6, 2, 2, 2], [1, 3, 2, 8, 1, 2, 8, 8, 1, 3, 2, 2, 2, 2, 3, 3, 3, 8, 3, 2, 1, 1, 6, 6, 3, 8, 3, 3, 1, 6], [8, 1, 2, 6, 3, 1, 3, 2, 8, 1, 3, 3, 8, 1, 8, 3, 6, 6, 8, 3, 1, 8, 1, 3, 3, 2, 3, 3, 6, 3], [8, 8, 1, 3, 2, 8, 1, 1, 2, 1, 2, 1, 8, 1, 1, 3, 3, 3, 8, 8, 8, 3, 3, 3, 1, 8, 6, 1, 1, 3], [6, 8, 3, 2, 8, 1, 3, 1, 1, 3, 1, 1, 8, 3, 8, 8, 3, 3, 3, 6, 3, 3, 3, 1, 3, 6, 3, 2, 8, 6], [3, 8, 1, 1, 8, 2, 3, 3, 2, 8, 1, 6, 1, 6, 6, 8, 6, 3, 1, 8, 3, 8, 8, 8, 1, 1, 6, 3, 3, 1], [8, 8, 1, 2, 3, 6, 3, 3, 1, 8, 8, 3, 3, 6, 8, 1, 8, 1, 2, 2, 3, 8, 3, 8, 8, 2, 6, 8, 6, 1], [3, 1, 8, 2, 3, 3, 6, 3, 3, 6, 3, 1, 1, 3, 1, 1, 8, 1, 3, 1, 8, 2, 8, 1, 1, 2, 1, 3, 3, 8], [8, 8, 8, 1, 2, 8, 8, 3, 1, 1, 3, 3, 3, 3, 6, 4, 4, 4, 4, 4, 4, 1, 3, 8, 2, 8, 8, 1, 2, 8], [6, 8, 3, 8, 1, 2, 8, 3, 8, 3, 1, 8, 3, 3, 1, 4, 4, 4, 4, 4, 4, 8, 2, 8, 8, 8, 3, 3, 1, 1], [8, 1, 6, 3, 1, 2, 8, 8, 1, 1, 3, 8, 2, 3, 8, 4, 4, 4, 4, 4, 4, 3, 8, 3, 8, 3, 3, 1, 3, 1], [2, 1, 2, 2, 1, 8, 6, 3, 1, 3, 8, 8, 8, 2, 2, 4, 4, 4, 4, 4, 4, 8, 8, 1, 3, 1, 1, 3, 2, 6], [1, 1, 3, 6, 6, 3, 2, 2, 8, 2, 6, 3, 8, 6, 2, 4, 4, 4, 4, 4, 4, 3, 1, 1, 3, 3, 8, 3, 3, 3], [1, 3, 6, 1, 8, 3, 2, 1, 3, 3, 1, 3, 8, 3, 8, 4, 4, 4, 4, 4, 4, 3, 8, 3, 8, 3, 3, 8, 1, 2], [8, 8, 3, 8, 8, 2, 2, 2, 2, 8, 8, 6, 8, 3, 3, 4, 4, 4, 4, 4, 4, 2, 2, 1, 6, 1, 8, 6, 8, 6], [3, 3, 1, 1, 1, 8, 8, 3, 3, 3, 2, 8, 2, 3, 3, 3, 3, 3, 6, 8, 8, 2, 2, 8, 1, 1, 2, 1, 8, 8], [6, 6, 3, 3, 3, 6, 3, 3, 8, 8, 8, 8, 1, 3, 6, 8, 3, 3, 8, 1, 1, 1, 6, 1, 2, 6, 2, 6, 3, 8], [1, 2, 8, 3, 2, 1, 3, 3, 3, 3, 1, 3, 8, 6, 6, 1, 8, 1, 6, 2, 1, 6, 3, 3, 3, 8, 3, 8, 1, 8], [8, 6, 2, 6, 3, 8, 2, 8, 8, 3, 1, 1, 6, 1, 1, 2, 1, 8, 1, 2, 1, 3, 1, 8, 3, 6, 3, 3, 3, 8]]",False,,Tedious
2546ccf6,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 6, 0, 0, 0, 4, 6, 4, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 4, 0, 6, 0, 4, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 4, 4, 0, 6, 0, 4, 4, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 4, 0, 6, 0, 4, 0, 0, 6, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 6, 0, 0, 4, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 4, 4, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 4, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 4, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 6, 0, 0, 0, 4, 6, 4, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 4, 0, 6, 0, 4, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 4, 4, 0, 6, 0, 4, 4, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 4, 0, 6, 0, 4, 0, 0, 6, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 6, 0, 0, 4, 0, 6, 0, 4, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 4, 4, 0, 6, 0, 4, 4, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 4, 0, 6, 0, 4, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 4, 6, 4, 0, 0, 0, 6, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [3, 0, 3, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 3, 3, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 3, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 3, 0, 2, 0, 3, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 3, 3, 0, 2, 0, 3, 3, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [3, 0, 3, 3, 2, 3, 3, 0, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 1, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 1, 1, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [3, 0, 3, 3, 2, 3, 3, 0, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 3, 3, 0, 2, 0, 3, 3, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 3, 0, 2, 0, 3, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 3, 0, 2, 0, 3, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 3, 3, 0, 2, 0, 3, 3, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [3, 0, 3, 3, 2, 3, 3, 0, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 1, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 1, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 1, 1, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 1, 1, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]]

The pattern in this problem is that the shapes made by the numbers 2, 1, and 4 are mirrored along the horizontal axis.","[[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 1, 1, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 1, 1, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 1, 1, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]]",False,,Medium
2685904e,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 6, 4, 3, 4, 7, 3, 8, 3, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 3, 0, 3, 0], [0, 0, 0, 3, 0, 0, 3, 0, 3, 0], [0, 0, 0, 3, 0, 0, 3, 0, 3, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 6, 4, 3, 4, 7, 3, 8, 3, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 4, 6, 2, 1, 9, 2, 9, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 4, 6, 2, 1, 9, 2, 9, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 6, 4, 6, 2, 4, 4, 3, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 6, 4, 6, 2, 4, 4, 3, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern in this problem is that the smallest number in the second last row of the input grid is copied to the middle of the row above the row with all 5s in the output grid.","[[8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 6, 4, 6, 2, 4, 4, 3, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 6, 4, 6, 2, 4, 4, 3, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 6, 0, 6, 2, 0, 0, 3, 0], [2, 3, 6, 0, 6, 2, 0, 0, 3, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 6, 4, 6, 2, 4, 4, 3, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Hard
2697da3f,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 0, 4, 0], [0, 0, 0, 4, 4, 4, 0], [0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 4, 4, 4, 0], [0, 4, 4, 4, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0], [4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4], [0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0], [4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4], [0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 0, 0, 0], [0, 4, 0, 4, 4, 0, 0], [0, 0, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 4, 4, 0], [4, 0, 4, 4, 0, 0, 0, 4, 4, 0, 4], [0, 4, 4, 0, 0, 0, 0, 0, 4, 4, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 4, 4, 4, 0, 0, 0], [0, 0, 4, 4, 0, 0, 4, 0, 0, 0], [0, 4, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 4, 4, 0, 0, 4, 0, 0, 0], [0, 0, 4, 0, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0",not_complete,not_complete,"[[0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 0], [0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 0], [4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4], [0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 0], [0, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Medium
2753e76c,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 8, 8], [0, 2, 2], [0, 0, 1]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0, 0, 4, 4, 0, 0, 0, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 2, 2, 0, 0, 0], [8, 8, 8, 8, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [8, 8, 8, 8, 0, 0, 0, 3, 3, 3, 0, 0, 2, 2, 2, 2], [8, 8, 8, 8, 0, 0, 0, 3, 3, 3, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 2, 2, 2, 2], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[2, 2, 2, 2], [0, 3, 3, 3], [0, 0, 8, 8], [0, 0, 0, 4]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 8, 8], [0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 0, 0, 0, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3], [0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 4, 4, 4, 0, 3, 3, 3, 3, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 4, 4, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 4, 4, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be 
[[3, 3, 3], [0, 4, 4, 4], [0, 0, 8, 8]]. 

The pattern in this problem is to find the largest square of each unique number in the grid and arrange them in the output grid in ascending order of their unique number. The size of each square in the output grid is determined by the size of the largest square of that unique number in the input grid.","[[3, 3, 3], [0, 4, 4, 4], [0, 0, 8, 8]]","[[3, 3, 3], [0, 4, 4, 4], [0, 0, 8, 8]]","[[3, 3, 3, 3, 3], [0, 4, 4, 4, 4], [0, 0, 0, 8, 8]]",False,,Tedious
27a77e38,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[2, 2, 3], [5, 5, 5], [0, 0, 0]],
then this grids change to output grids below
[[2, 2, 3], [5, 5, 5], [0, 2, 0]].

Example 2
If input grids are like that
[[3, 6, 4, 2, 4], [8, 4, 3, 3, 4], [5, 5, 5, 5, 5], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]],
then this grids change to output grids below
[[3, 6, 4, 2, 4], [8, 4, 3, 3, 4], [5, 5, 5, 5, 5], [0, 0, 0, 0, 0], [0, 0, 4, 0, 0]].

Quiz
If input grids are like that
[[9, 1, 2, 8, 4, 9, 8, 2, 1], [4, 4, 3, 1, 2, 7, 6, 7, 9], [2, 1, 6, 9, 7, 8, 4, 3, 6], [9, 8, 6, 3, 4, 2, 9, 1, 7], [5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that the last non-zero element in the first column of the grid is copied to the middle of the last row of zeros in the grid. 

So, for the given input:
[[9, 1, 2, 8, 4, 9, 8, 2, 1], [4, 4, 3, 1, 2, 7, 6, 7, 9], [2, 1, 6, 9, 7, 8, 4, 3, 6], [9, 8, 6, 3, 4, 2, 9, 1, 7], [5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],

The last non-zero element in the first column is 5 (from the row [5, 5, 5, 5, 5, 5, 5, 5, 5]). The last row of zeros is the last row of the grid. The middle of this row is the 5th element (index 4 when counting from 0). So, we replace this element with 5.

The output grid is:
[[9, 1, 2, 8, 4, 9, 8, 2, 1], [4, 4, 3, 1, 2, 7, 6, 7, 9], [2, 1, 6, 9, 7, 8, 4, 3, 6], [9, 8, 6, 3, 4, 2, 9, 1, 7], [5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0]].","[[9, 1, 2, 8, 4, 9, 8, 2, 1], [4, 4, 3, 1, 2, 7, 6, 7, 9], [2, 1, 6, 9, 7, 8, 4, 3, 6], [9, 8, 6, 3, 4, 2, 9, 1, 7], [5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],

The last non-zero element in the first column is 5 (from the row [5, 5, 5, 5, 5, 5, 5, 5, 5]). The last row of zeros is the last row of the grid. The middle of this row is the 5th element (index 4 when counting from 0). So, we replace this element with 5.

The output grid is:
[[9, 1, 2, 8, 4, 9, 8, 2, 1], [4, 4, 3, 1, 2, 7, 6, 7, 9], [2, 1, 6, 9, 7, 8, 4, 3, 6], [9, 8, 6, 3, 4, 2, 9, 1, 7], [5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0]]","[[9, 1, 2, 8, 4, 9, 8, 2, 1], [4, 4, 3, 1, 2, 7, 6, 7, 9], [2, 1, 6, 9, 7, 8, 4, 3, 6], [9, 8, 6, 3, 4, 2, 9, 1, 7], [5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0]]","[[9, 1, 2, 8, 4, 9, 8, 2, 1], [4, 4, 3, 1, 2, 7, 6, 7, 9], [2, 1, 6, 9, 7, 8, 4, 3, 6], [9, 8, 6, 3, 4, 2, 9, 1, 7], [5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0]]",False,,Medium
27f8ce4f,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 1], [8, 6, 1], [4, 9, 6]],
then this grids change to output grids below
[[8, 8, 1, 8, 8, 1, 0, 0, 0], [8, 6, 1, 8, 6, 1, 0, 0, 0], [4, 9, 6, 4, 9, 6, 0, 0, 0], [8, 8, 1, 0, 0, 0, 0, 0, 0], [8, 6, 1, 0, 0, 0, 0, 0, 0], [4, 9, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[7, 7, 1], [4, 7, 1], [3, 3, 7]],
then this grids change to output grids below
[[7, 7, 1, 7, 7, 1, 0, 0, 0], [4, 7, 1, 4, 7, 1, 0, 0, 0], [3, 3, 7, 3, 3, 7, 0, 0, 0], [0, 0, 0, 7, 7, 1, 0, 0, 0], [0, 0, 0, 4, 7, 1, 0, 0, 0], [0, 0, 0, 3, 3, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 7, 1], [0, 0, 0, 0, 0, 0, 4, 7, 1], [0, 0, 0, 0, 0, 0, 3, 3, 7]].

Quiz
If input grids are like that
[[9, 6, 7], [8, 7, 7], [2, 8, 7]],
then output grids?

=========","The output grids would be:

[[9, 6, 7, 9, 6, 7, 0, 0, 0], [8, 7, 7, 8, 7, 7, 0, 0, 0], [2, 8, 7, 2, 8, 7, 0, 0, 0], [0, 0, 0, 9, 6, 7, 0, 0, 0], [0, 0, 0, 8, 7, 7, 0, 0, 0], [0, 0, 0, 2, 8, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 9, 6, 7], [0, 0, 0, 0, 0, 0, 8, 7, 7], [0, 0, 0, 0, 0, 0, 2, 8, 7]].

The pattern here is that the original 3x3 grid is repeated twice horizontally, then the original grid is shifted down by 3 rows and repeated twice horizontally again, and finally the original grid is shifted down by 6 rows and repeated twice horizontally. The empty spaces are filled with 0s.","[[9, 6, 7, 9, 6, 7, 0, 0, 0], [8, 7, 7, 8, 7, 7, 0, 0, 0], [2, 8, 7, 2, 8, 7, 0, 0, 0], [0, 0, 0, 9, 6, 7, 0, 0, 0], [0, 0, 0, 8, 7, 7, 0, 0, 0], [0, 0, 0, 2, 8, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 9, 6, 7], [0, 0, 0, 0, 0, 0, 8, 7, 7], [0, 0, 0, 0, 0, 0, 2, 8, 7]]","[[9, 6, 7, 9, 6, 7, 0, 0, 0], [8, 7, 7, 8, 7, 7, 0, 0, 0], [2, 8, 7, 2, 8, 7, 0, 0, 0], [0, 0, 0, 9, 6, 7, 0, 0, 0], [0, 0, 0, 8, 7, 7, 0, 0, 0], [0, 0, 0, 2, 8, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 9, 6, 7], [0, 0, 0, 0, 0, 0, 8, 7, 7], [0, 0, 0, 0, 0, 0, 2, 8, 7]]","[[0, 0, 0, 0, 0, 0, 9, 6, 7], [0, 0, 0, 0, 0, 0, 8, 7, 7], [0, 0, 0, 0, 0, 0, 2, 8, 7], [0, 0, 0, 9, 6, 7, 9, 6, 7], [0, 0, 0, 8, 7, 7, 8, 7, 7], [0, 0, 0, 2, 8, 7, 2, 8, 7], [0, 0, 0, 0, 0, 0, 9, 6, 7], [0, 0, 0, 0, 0, 0, 8, 7, 7], [0, 0, 0, 0, 0, 0, 2, 8, 7]]",False,,Medium
281123b4,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 8, 0, 3, 5, 5, 5, 0, 3, 9, 9, 9, 0, 3, 4, 4, 4, 4], [8, 0, 8, 0, 3, 5, 5, 5, 5, 3, 9, 9, 0, 9, 3, 0, 0, 0, 0], [0, 0, 0, 8, 3, 5, 5, 0, 0, 3, 0, 0, 0, 0, 3, 0, 4, 4, 0], [0, 8, 0, 0, 3, 0, 5, 5, 5, 3, 9, 0, 0, 0, 3, 4, 4, 4, 4]],
then this grids change to output grids below
[[9, 9, 9, 4], [9, 9, 8, 9], [5, 4, 4, 8], [9, 4, 4, 4]].

Example 2
If input grids are like that
[[0, 0, 8, 8, 3, 5, 5, 0, 0, 3, 0, 9, 9, 9, 3, 4, 0, 4, 0], [8, 8, 8, 8, 3, 0, 5, 0, 5, 3, 0, 9, 0, 9, 3, 4, 0, 4, 0], [8, 8, 0, 8, 3, 5, 0, 5, 5, 3, 0, 0, 0, 9, 3, 0, 4, 0, 4], [0, 8, 8, 0, 3, 0, 0, 0, 5, 3, 9, 0, 0, 9, 3, 0, 0, 0, 0]],
then this grids change to output grids below
[[4, 9, 9, 9], [4, 9, 4, 9], [8, 4, 5, 9], [9, 8, 8, 9]].

Quiz
If input grids are like that
[[8, 8, 8, 0, 3, 5, 0, 5, 5, 3, 9, 0, 0, 0, 3, 0, 0, 0, 0], [8, 0, 8, 8, 3, 5, 5, 5, 5, 3, 0, 0, 9, 9, 3, 4, 4, 0, 4], [8, 0, 0, 8, 3, 5, 0, 5, 5, 3, 0, 0, 0, 9, 3, 0, 4, 0, 4], [0, 0, 8, 8, 3, 0, 0, 5, 5, 3, 9, 9, 9, 0, 3, 0, 4, 4, 0]],
then output grids?

=========","The pattern in this problem is that the output grid is a 4x4 grid where each cell represents a unique color in the input grid. The value in each cell of the output grid is the most frequent color in the corresponding section of the input grid.

The input grid is divided into 4 sections, each section is a 4x4 grid. The top left section of the input grid corresponds to the top left cell of the output grid, the top right section of the input grid corresponds to the top right cell of the output grid, and so on.

For example, in the first example, the top left section of the input grid is:

[[8, 8, 8, 0],
 [8, 0, 8, 0],
 [0, 0, 0, 8],
 [0, 8, 0, 0]]

The most frequent color in this section is 8, so the top left cell of the output grid is 8.

Applying this pattern to the quiz input:

[[8, 8, 8, 0, 3, 5, 0, 5, 5, 3, 9, 0, 0, 0, 3, 0, 0, 0, 0],
 [8, 0, 8, 8, 3, 5, 5, 5, 5, 3, 0, 0, 9, 9, 3, 4, 4, 0, 4],
 [8, 0, 0, 8, 3, 5, 0, 5, 5, 3, 0, 0, 0, 9, 3, 0, 4, 0, 4],
 [0, 0, 8, 8, 3, 0, 0, 5, 5, 3, 9, 9, 9, 0, 3, 0, 4, 4, 0]]

The output grid is:

[[8, 5, 0, 9],
 [8, 5, 9, 4],
 [8, 5, 0, 4],
 [8, 5, 9, 4]]","[[8, 8, 8, 0],
 [8, 0, 8, 0],
 [0, 0, 0, 8],
 [0, 8, 0, 0]]

The most frequent color in this section is 8, so the top left cell of the output grid is 8.

Applying this pattern to the quiz input:

[[8, 8, 8, 0, 3, 5, 0, 5, 5, 3, 9, 0, 0, 0, 3, 0, 0, 0, 0],
 [8, 0, 8, 8, 3, 5, 5, 5, 5, 3, 0, 0, 9, 9, 3, 4, 4, 0, 4],
 [8, 0, 0, 8, 3, 5, 0, 5, 5, 3, 0, 0, 0, 9, 3, 0, 4, 0, 4],
 [0, 0, 8, 8, 3, 0, 0, 5, 5, 3, 9, 9, 9, 0, 3, 0, 4, 4, 0]]

The output grid is:

[[8, 5, 0, 9],
 [8, 5, 9, 4],
 [8, 5, 0, 4],
 [8, 5, 9, 4]]","[[8, 5, 0, 9],
 [8, 5, 9, 4],
 [8, 5, 0, 4],
 [8, 5, 9, 4]]","[[9, 8, 8, 5], [4, 4, 9, 9], [8, 4, 5, 9], [9, 9, 9, 8]]",False,,Hard
292dd178,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 8, 1, 8, 8, 8, 8, 8], [8, 1, 8, 8, 1, 8, 8, 8, 8, 8], [8, 1, 8, 8, 1, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 1, 1, 1, 1], [8, 8, 8, 8, 8, 8, 1, 8, 8, 1], [8, 8, 8, 8, 8, 8, 1, 8, 8, 1], [8, 8, 8, 8, 8, 8, 1, 1, 8, 1], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
then this grids change to output grids below
[[8, 8, 8, 2, 8, 8, 8, 8, 8, 8], [8, 8, 8, 2, 8, 8, 8, 8, 8, 8], [8, 1, 1, 2, 1, 8, 8, 8, 8, 8], [8, 1, 2, 2, 1, 8, 8, 8, 8, 8], [8, 1, 2, 2, 1, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 1, 1, 1, 1], [8, 8, 8, 8, 8, 8, 1, 2, 2, 1], [8, 8, 8, 8, 8, 8, 1, 2, 2, 1], [8, 8, 8, 8, 8, 8, 1, 1, 2, 1], [8, 8, 8, 8, 8, 8, 8, 8, 2, 8]].

Example 2
If input grids are like that
[[5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 1, 1, 1, 1, 5, 5, 5], [5, 5, 1, 5, 5, 1, 5, 5, 5], [5, 5, 5, 5, 5, 1, 5, 5, 5], [5, 5, 1, 1, 1, 1, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5]],
then this grids change to output grids below
[[5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 1, 1, 1, 1, 5, 5, 5], [5, 5, 1, 2, 2, 1, 5, 5, 5], [2, 2, 2, 2, 2, 1, 5, 5, 5], [5, 5, 1, 1, 1, 1, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5]].

Quiz
If input grids are like that
[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 4, 1, 1, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4], [4, 1, 4, 4, 1, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4], [4, 1, 4, 4, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 4, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
then output grids?

=========","The pattern in this problem seems to be that the number 2 is placed in the cells that are surrounded by the number 1 on all four sides (up, down, left, right). If the cell is on the edge of the grid, it is considered surrounded if it has the number 1 on all the available sides. 

Applying this pattern to the quiz input, the output grids would be:

[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], 
 [4, 1, 4, 1, 1, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4], 
 [4, 1, 4, 2, 1, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4], 
 [4, 1, 4, 2, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], 
 [4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 1, 2, 1, 1, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]","[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], 
 [4, 1, 4, 1, 1, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4], 
 [4, 1, 4, 2, 1, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4], 
 [4, 1, 4, 2, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], 
 [4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 1, 2, 1, 1, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]","[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], 
 [4, 1, 4, 1, 1, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4], 
 [4, 1, 4, 2, 1, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4], 
 [4, 1, 4, 2, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], 
 [4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 1, 2, 1, 1, 4, 4, 4, 4], 
 [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]","[[4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 2, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 2, 1, 1, 4, 4, 4, 1, 2, 2, 2, 2, 2, 2], [4, 1, 2, 2, 1, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4], [4, 1, 2, 2, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4]]",False,,Easy
29700607,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 6, 5, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 6, 5, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 5, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 5, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 5, 3, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 5, 3, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 3, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 3, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 3, 8, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 3, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [4, 4, 4, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0]].

The pattern here is that each non-zero number expands in its row until it hits another non-zero number or the edge of the grid. The number 4 expands to the left, the number 8 expands downwards, and the number 5 expands to the left.","[[0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [4, 4, 4, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [4, 4, 4, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [4, 4, 4, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0]]",False,,Medium
2a5f8217,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0], [0, 0, 0, 8, 8, 8], [0, 0, 0, 0, 8, 0]],
then this grids change to output grids below
[[0, 8, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0], [0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0], [0, 0, 0, 8, 8, 8], [0, 0, 0, 0, 8, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 9, 9], [0, 0, 1, 1, 0, 0, 0, 0, 9], [0, 0, 0, 1, 0, 7, 0, 0, 0], [6, 6, 6, 0, 0, 7, 7, 0, 0], [6, 0, 6, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 0, 0, 7, 0, 0], [0, 6, 0, 6, 0, 0, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 9, 9], [0, 0, 9, 9, 0, 0, 0, 0, 9], [0, 0, 0, 9, 0, 7, 0, 0, 0], [6, 6, 6, 0, 0, 7, 7, 0, 0], [6, 0, 6, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 8, 8, 8, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 8, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 6, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 6, 6, 6], [8, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 8, 8, 8, 0, 8, 8, 0, 0], [0, 8, 8, 8, 0, 0, 8, 0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 8, 0, 0, 0, 0, 2, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 6, 0], [0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 6, 6, 6], [8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern here is that the color of the cross shape (1's in the input grid) changes to the color of the top left corner of the grid (8 in this case).","[[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 8, 8, 8, 0, 8, 8, 0, 0], [0, 8, 8, 8, 0, 0, 8, 0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 8, 0, 0, 0, 0, 2, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 6, 0], [0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 6, 6, 6], [8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 8, 8, 8, 0, 8, 8, 0, 0], [0, 8, 8, 8, 0, 0, 8, 0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 8, 0, 0, 0, 0, 2, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 6, 0], [0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 6, 6, 6], [8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 8, 8, 0, 8, 8, 0, 0], [0, 2, 2, 2, 0, 0, 8, 0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 6, 6, 6, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 6, 0, 0, 0, 0, 2, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 6, 0], [0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 6, 6, 6], [8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Medium
2b01abd0,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 2, 0, 2, 0, 0, 0], [0, 0, 2, 3, 2, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 3, 0, 3, 0, 0, 0], [0, 0, 3, 2, 3, 3, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 2, 3, 2, 2, 0, 0, 0], [0, 0, 0, 2, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 8, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 4, 0], [0, 0, 0, 0, 0, 0, 1, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 8, 0, 8, 0, 1, 0, 4, 0, 4, 0], [0, 0, 4, 8, 0, 0, 1, 0, 0, 4, 8, 0], [0, 0, 8, 8, 8, 0, 1, 0, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem seems to be that the objects in the grid are mirrored vertically across the line of 1's. Therefore, the output for the quiz would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 1, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 0, 0], [0, 0, 8, 8, 8, 0, 0, 0, 1, 0, 0, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 1, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 0, 0], [0, 0, 8, 8, 8, 0, 0, 0, 1, 0, 0, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 1, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 0, 0], [0, 0, 8, 8, 8, 0, 0, 0, 1, 0, 0, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 8, 0, 1, 0, 2, 0, 0, 2, 0, 0], [0, 0, 0, 2, 2, 2, 2, 0, 1, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 0, 0, 8, 0, 1, 0, 2, 0, 0, 2, 0, 0], [0, 0, 2, 2, 2, 0, 0, 0, 1, 0, 0, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]]",False,,Medium
2c0b0aff,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 3, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 3, 8, 8, 8, 3, 8, 0, 0, 0, 8, 8, 3, 3, 8, 8, 8, 0, 0, 0], [0, 0, 8, 3, 3, 3, 8, 3, 3, 3, 0, 0, 0, 3, 8, 8, 8, 8, 8, 3, 0, 0, 0], [0, 0, 8, 8, 3, 8, 8, 8, 3, 8, 0, 0, 0, 8, 8, 8, 3, 8, 8, 8, 0, 0, 0], [0, 0, 8, 8, 8, 8, 3, 8, 8, 8, 0, 0, 0, 8, 8, 3, 3, 3, 8, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 3, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 8, 8, 8, 8, 8, 0, 0, 0], [0, 8, 3, 8, 8, 8, 8, 8, 3, 8, 0, 0, 0, 8, 8, 8, 8, 3, 8, 8, 0, 0, 0], [0, 8, 8, 3, 8, 8, 8, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 3, 3, 3, 8, 3, 8, 3, 8, 0, 8, 3, 8, 8, 8, 8, 8, 3, 0, 0, 0, 0], [0, 8, 8, 3, 8, 8, 8, 8, 8, 8, 0, 3, 3, 3, 8, 8, 3, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 3, 8, 8, 3, 3, 3, 8, 0, 0, 0, 0], [0, 8, 3, 8, 8, 8, 3, 8, 8, 8, 0, 8, 8, 8, 8, 8, 3, 8, 8, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 3, 3, 8, 8, 0, 8, 3, 8, 8, 8, 8, 3, 8, 0, 0, 0, 0], [0, 8, 3, 8, 8, 8, 3, 8, 3, 8, 0, 3, 3, 3, 8, 8, 3, 3, 3, 0, 0, 0, 0], [0, 3, 8, 8, 8, 8, 8, 8, 8, 3, 0, 8, 3, 8, 8, 8, 8, 3, 8, 0, 0, 0, 0], [0, 8, 8, 3, 8, 8, 8, 3, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 3, 8, 8, 8, 8, 8, 3], [3, 3, 3, 8, 8, 3, 8, 8], [8, 3, 8, 8, 3, 3, 3, 8], [8, 8, 8, 8, 8, 3, 8, 8], [8, 3, 8, 8, 8, 8, 3, 8], [3, 3, 3, 8, 8, 3, 3, 3], [8, 3, 8, 8, 8, 8, 3, 8]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 8, 8, 3, 8, 8, 8, 3, 8, 0, 0, 3, 8, 8, 8, 3, 8, 8, 8, 3, 8, 0, 0], [0, 8, 8, 3, 3, 3, 8, 8, 8, 3, 0, 0, 8, 8, 3, 8, 8, 8, 8, 3, 3, 3, 0, 0], [0, 8, 8, 8, 3, 8, 8, 8, 8, 8, 0, 0, 8, 3, 3, 3, 8, 8, 8, 8, 3, 8, 0, 0], [0, 8, 3, 8, 8, 8, 8, 3, 8, 8, 0, 0, 8, 8, 3, 8, 3, 8, 3, 8, 8, 8, 0, 0], [0, 8, 8, 8, 3, 8, 3, 3, 3, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 0, 0], [0, 3, 8, 8, 8, 8, 8, 3, 8, 8, 0, 0, 8, 3, 8, 3, 8, 8, 3, 8, 8, 8, 0, 0], [0, 8, 8, 3, 8, 8, 8, 8, 3, 8, 0, 0, 8, 8, 8, 8, 8, 3, 3, 3, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 3, 8, 8, 8, 3, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 3, 8, 8, 8, 8, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 3, 3, 3, 8, 8, 3, 3, 3, 0, 8, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0], [0, 8, 8, 3, 8, 8, 8, 8, 3, 8, 0, 8, 8, 8, 3, 8, 8, 8, 8, 3, 3, 8, 0, 0], [0, 3, 8, 8, 8, 3, 8, 8, 8, 8, 0, 8, 8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 0, 0], [0, 8, 3, 8, 8, 8, 8, 3, 8, 3, 0, 8, 8, 8, 3, 8, 8, 8, 3, 8, 8, 3, 0, 0], [0, 3, 3, 3, 8, 8, 3, 3, 3, 8, 0, 3, 8, 8, 8, 8, 8, 3, 3, 3, 8, 8, 0, 0], [0, 8, 3, 8, 8, 8, 8, 3, 8, 8, 0, 8, 8, 3, 8, 3, 8, 8, 3, 8, 8, 8, 0, 0], [0, 8, 8, 8, 8, 3, 8, 8, 8, 8, 0, 8, 3, 3, 3, 8, 8, 8, 8, 8, 3, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 3, 8, 8, 8, 3, 3, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 8, 3, 8, 8, 8, 8, 3, 8], [8, 3, 3, 3, 8, 8, 3, 3, 3], [8, 8, 3, 8, 8, 8, 8, 3, 8], [3, 8, 8, 8, 3, 8, 8, 8, 8], [8, 3, 8, 8, 8, 8, 3, 8, 3], [3, 3, 3, 8, 8, 3, 3, 3, 8], [8, 3, 8, 8, 8, 8, 3, 8, 8], [8, 8, 8, 8, 3, 8, 8, 8, 8]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 3, 8, 8, 8, 3, 8, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 3, 3, 3, 8, 8, 8, 3, 3, 3, 0, 0, 8, 8, 8, 8, 8, 8, 3, 3, 8, 8], [0, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 0, 0, 3, 8, 8, 3, 8, 8, 8, 8, 8, 8], [0, 8, 3, 8, 8, 8, 3, 8, 3, 8, 8, 0, 0, 8, 8, 3, 3, 3, 8, 8, 8, 3, 8], [0, 8, 8, 8, 8, 3, 3, 3, 8, 8, 3, 0, 0, 8, 8, 8, 3, 8, 8, 8, 8, 8, 8], [0, 3, 3, 8, 8, 8, 3, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 0, 0, 8, 8, 8, 3, 8, 8, 3, 8, 8, 8], [0, 3, 8, 8, 3, 8, 8, 8, 3, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 8, 8, 8, 8, 8, 8, 3, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 0, 0, 3, 3, 8, 8, 3, 8, 8, 8, 3, 8, 0], [8, 8, 3, 8, 8, 3, 3, 3, 8, 8, 0, 0, 8, 8, 8, 3, 3, 3, 8, 8, 8, 3, 0], [8, 3, 3, 3, 8, 8, 3, 8, 3, 8, 0, 0, 3, 8, 8, 8, 3, 8, 8, 8, 8, 8, 0], [8, 8, 3, 8, 8, 8, 8, 3, 3, 3, 0, 0, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 0], [8, 8, 8, 8, 3, 8, 8, 8, 3, 8, 0, 0, 3, 3, 3, 8, 8, 8, 3, 3, 3, 8, 0], [8, 3, 8, 3, 3, 3, 8, 8, 8, 8, 0, 0, 8, 3, 8, 3, 8, 8, 8, 3, 8, 8, 0], [3, 3, 3, 8, 3, 8, 8, 8, 8, 3, 0, 0, 8, 8, 3, 3, 3, 8, 8, 8, 8, 8, 0], [8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 0, 0, 8, 8, 8, 3, 8, 8, 8, 3, 8, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[8, 8, 3, 8, 8, 8, 8, 3, 8], [8, 3, 3, 3, 8, 8, 3, 3, 3], [8, 8, 3, 8, 8, 8, 8, 3, 8], [8, 3, 8, 8, 8, 3, 8, 3, 8], [8, 8, 8, 8, 3, 3, 3, 8, 8], [3, 3, 8, 8, 8, 3, 8, 8, 8], [8, 8, 8, 8, 8, 8, 3, 8, 8], [3, 8, 8, 3, 8, 8, 8, 3, 8]]","[[8, 8, 3, 8, 8, 8, 8, 3, 8], [8, 3, 3, 3, 8, 8, 3, 3, 3], [8, 8, 3, 8, 8, 8, 8, 3, 8], [8, 3, 8, 8, 8, 3, 8, 3, 8], [8, 8, 8, 8, 3, 3, 3, 8, 8], [3, 3, 8, 8, 8, 3, 8, 8, 8], [8, 8, 8, 8, 8, 8, 3, 8, 8], [3, 8, 8, 3, 8, 8, 8, 3, 8]]","[[8, 8, 3, 8, 8, 8, 8, 3, 8], [8, 3, 3, 3, 8, 8, 3, 3, 3], [8, 8, 3, 8, 8, 8, 8, 3, 8], [8, 3, 8, 8, 8, 3, 8, 3, 8], [8, 8, 8, 8, 3, 3, 3, 8, 8], [3, 3, 8, 8, 8, 3, 8, 8, 8], [8, 8, 8, 8, 8, 8, 3, 8, 8], [3, 8, 8, 3, 8, 8, 8, 3, 8]]","[[3, 8, 8, 8, 8, 8, 3, 8, 8, 8], [8, 8, 3, 8, 8, 3, 3, 3, 8, 8], [8, 3, 3, 3, 8, 8, 3, 8, 3, 8], [8, 8, 3, 8, 8, 8, 8, 3, 3, 3], [8, 8, 8, 8, 3, 8, 8, 8, 3, 8], [8, 3, 8, 3, 3, 3, 8, 8, 8, 8], [3, 3, 3, 8, 3, 8, 8, 8, 8, 3], [8, 3, 8, 8, 8, 8, 8, 3, 8, 8]]",False,,Easy
2c737e39,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 1, 3, 1, 0, 0, 0, 0, 0], [0, 4, 4, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 1, 3, 1, 0, 0, 0, 0, 0], [0, 4, 4, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 1, 3, 1, 0, 0], [0, 0, 0, 0, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 2, 2, 3, 3, 0, 0, 0, 0, 0], [0, 1, 0, 3, 3, 8, 8, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 3, 3, 0, 0, 0], [0, 0, 1, 0, 3, 3, 8, 8, 0, 0]]

The pattern in this problem is that the objects in the grid are moved to the right by 2 spaces.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 3, 3, 0, 0, 0], [0, 0, 1, 0, 3, 3, 8, 8, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 3, 3, 0, 0, 0], [0, 0, 1, 0, 3, 3, 8, 8, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 3, 3, 0, 0], [0, 0, 0, 0, 1, 0, 3, 3, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 2, 2, 3, 3, 0, 0, 0, 0, 0], [0, 1, 0, 3, 3, 8, 8, 0, 0, 0]]",False,,Medium
2f0c5170,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 3, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 4, 0, 0, 0, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 4, 4, 4, 0, 0, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 3, 4, 0, 0, 0, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 4, 4, 4, 0, 0, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 3, 4, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 2, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 4, 4, 2, 4, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
then this grids change to output grids below
[[0, 0, 4, 4, 0], [0, 4, 4, 2, 4], [0, 0, 4, 4, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 4, 4, 0, 4, 4, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 4, 2, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 4, 4, 4, 4, 4, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
then output grids?

=========","The output grids would be:

[[0, 4, 4, 0, 4, 4, 0], 
 [0, 0, 4, 2, 4, 0, 0], 
 [0, 4, 4, 4, 4, 4, 0], 
 [0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 2, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0]]

The pattern in this problem is to find the smallest rectangle that contains all the non-zero and non-eight elements, and then crop the input grid to that rectangle.","[[0, 4, 4, 0, 4, 4, 0], 
 [0, 0, 4, 2, 4, 0, 0], 
 [0, 4, 4, 4, 4, 4, 0], 
 [0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 2, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0]]","[[0, 4, 4, 0, 4, 4, 0], 
 [0, 0, 4, 2, 4, 0, 0], 
 [0, 4, 4, 4, 4, 4, 0], 
 [0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0], 
 [0, 0, 0, 2, 0, 0, 0], 
 [0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 4, 4, 0, 0, 0], [0, 0, 4, 2, 4, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 0, 0, 0]]",False,,Medium
310f3251,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0], [0, 7]],
then this grids change to output grids below
[[2, 0, 2, 0, 2, 0], [0, 7, 0, 7, 0, 7], [2, 0, 2, 0, 2, 0], [0, 7, 0, 7, 0, 7], [2, 0, 2, 0, 2, 0], [0, 7, 0, 7, 0, 7]].

Example 2
If input grids are like that
[[0, 0, 0], [0, 0, 6], [6, 0, 0]],
then this grids change to output grids below
[[0, 2, 0, 0, 2, 0, 0, 2, 0], [0, 0, 6, 0, 0, 6, 0, 0, 6], [6, 0, 0, 6, 0, 0, 6, 0, 0], [0, 2, 0, 0, 2, 0, 0, 2, 0], [0, 0, 6, 0, 0, 6, 0, 0, 6], [6, 0, 0, 6, 0, 0, 6, 0, 0], [0, 2, 0, 0, 2, 0, 0, 2, 0], [0, 0, 6, 0, 0, 6, 0, 0, 6], [6, 0, 0, 6, 0, 0, 6, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 4, 0], [0, 0, 0, 0], [0, 0, 0, 0], [4, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that each cell in the input grid is replaced by a 3x3 grid in the output. The center cell of the 3x3 grid is the same as the original cell, and the other cells are filled with 2 if the original cell was 0, and filled with 0 if the original cell was not 0.

So, if the input grids are
[[0, 0, 4, 0], [0, 0, 0, 0], [0, 0, 0, 0], [4, 0, 0, 0]],
then the output grids would be
[[2, 0, 2, 2, 0, 2, 0, 2, 0, 2], [0, 2, 0, 0, 2, 0, 4, 0, 4, 0], [2, 0, 2, 2, 0, 2, 0, 2, 0, 2], [2, 0, 2, 2, 0, 2, 2, 0, 2, 2], [0, 2, 0, 0, 2, 0, 0, 2, 0, 0], [2, 0, 2, 2, 0, 2, 2, 0, 2, 2], [2, 0, 2, 2, 0, 2, 2, 0, 2, 2], [0, 2, 0, 0, 2, 0, 0, 2, 0, 0], [2, 0, 2, 2, 0, 2, 2, 0, 2, 2], [0, 2, 0, 4, 0, 4, 2, 0, 2, 2], [4, 0, 4, 0, 2, 0, 2, 0, 2, 2], [0, 2, 0, 2, 0, 2, 2, 0, 2, 2]].","[[0, 0, 4, 0], [0, 0, 0, 0], [0, 0, 0, 0], [4, 0, 0, 0]],
then the output grids would be
[[2, 0, 2, 2, 0, 2, 0, 2, 0, 2], [0, 2, 0, 0, 2, 0, 4, 0, 4, 0], [2, 0, 2, 2, 0, 2, 0, 2, 0, 2], [2, 0, 2, 2, 0, 2, 2, 0, 2, 2], [0, 2, 0, 0, 2, 0, 0, 2, 0, 0], [2, 0, 2, 2, 0, 2, 2, 0, 2, 2], [2, 0, 2, 2, 0, 2, 2, 0, 2, 2], [0, 2, 0, 0, 2, 0, 0, 2, 0, 0], [2, 0, 2, 2, 0, 2, 2, 0, 2, 2], [0, 2, 0, 4, 0, 4, 2, 0, 2, 2], [4, 0, 4, 0, 2, 0, 2, 0, 2, 2], [0, 2, 0, 2, 0, 2, 2, 0, 2, 2]]","[[2, 0, 2, 2, 0, 2, 0, 2, 0, 2], [0, 2, 0, 0, 2, 0, 4, 0, 4, 0], [2, 0, 2, 2, 0, 2, 0, 2, 0, 2], [2, 0, 2, 2, 0, 2, 2, 0, 2, 2], [0, 2, 0, 0, 2, 0, 0, 2, 0, 0], [2, 0, 2, 2, 0, 2, 2, 0, 2, 2], [2, 0, 2, 2, 0, 2, 2, 0, 2, 2], [0, 2, 0, 0, 2, 0, 0, 2, 0, 0], [2, 0, 2, 2, 0, 2, 2, 0, 2, 2], [0, 2, 0, 4, 0, 4, 2, 0, 2, 2], [4, 0, 4, 0, 2, 0, 2, 0, 2, 2], [0, 2, 0, 2, 0, 2, 2, 0, 2, 2]]","[[0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [4, 2, 0, 0, 4, 2, 0, 0, 4, 2, 0, 0], [0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [4, 2, 0, 0, 4, 2, 0, 0, 4, 2, 0, 0], [0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0]]",False,,Easy
3194b014,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[6, 6, 6, 7, 7, 7, 0, 0, 6, 0, 0, 6, 0, 0, 6, 6, 0, 0, 6, 6], [0, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 7, 0, 0, 6, 7, 6, 0, 7, 0], [6, 0, 0, 7, 6, 0, 0, 0, 0, 7, 0, 0, 6, 6, 0, 0, 0, 6, 7, 6], [7, 0, 7, 2, 2, 2, 2, 0, 7, 0, 7, 7, 0, 7, 0, 0, 6, 7, 0, 6], [0, 7, 0, 2, 2, 2, 2, 7, 6, 7, 0, 0, 6, 7, 6, 0, 7, 0, 6, 0], [7, 0, 0, 2, 2, 2, 2, 7, 0, 0, 0, 0, 6, 7, 0, 0, 0, 0, 0, 0], [6, 6, 6, 2, 2, 2, 2, 0, 7, 0, 0, 9, 9, 9, 7, 7, 0, 7, 7, 0], [7, 0, 0, 0, 7, 0, 0, 7, 6, 0, 6, 9, 9, 9, 7, 0, 6, 0, 0, 0], [7, 6, 0, 6, 6, 7, 0, 6, 0, 6, 7, 9, 9, 9, 6, 0, 0, 0, 0, 0], [0, 0, 7, 7, 6, 0, 7, 6, 6, 7, 6, 9, 9, 9, 0, 0, 0, 0, 0, 0], [0, 7, 7, 6, 0, 0, 0, 0, 7, 0, 6, 0, 6, 0, 0, 7, 0, 7, 0, 0], [0, 6, 7, 7, 0, 7, 7, 7, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 6, 6], [6, 7, 7, 0, 7, 6, 0, 6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 7], [7, 6, 6, 0, 6, 7, 0, 6, 0, 6, 7, 6, 0, 0, 6, 7, 0, 0, 7, 6], [6, 0, 0, 6, 0, 7, 4, 4, 4, 4, 4, 0, 0, 7, 6, 0, 6, 0, 0, 0], [7, 0, 7, 0, 0, 0, 4, 4, 4, 4, 4, 7, 0, 7, 6, 0, 0, 0, 0, 7], [6, 6, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 6, 0, 0], [6, 7, 6, 6, 6, 0, 4, 4, 4, 4, 4, 6, 7, 7, 6, 7, 0, 0, 0, 6], [7, 0, 0, 0, 6, 6, 4, 4, 4, 4, 4, 6, 0, 6, 0, 0, 0, 0, 6, 7], [0, 0, 7, 7, 6, 0, 0, 6, 7, 6, 6, 0, 6, 0, 6, 0, 7, 7, 0, 0]],
then this grids change to output grids below
[[4, 4, 4], [4, 4, 4], [4, 4, 4]].

Example 2
If input grids are like that
[[8, 8, 8, 8, 8, 0, 1, 0, 1, 1, 8, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 8, 1, 1, 0, 0, 0, 8, 0, 5, 5, 5, 5, 5, 8, 1], [0, 0, 0, 0, 0, 8, 1, 0, 0, 8, 1, 1, 1, 5, 5, 5, 5, 5, 8, 0], [1, 8, 0, 1, 8, 0, 0, 8, 8, 8, 8, 1, 8, 5, 5, 5, 5, 5, 1, 0], [0, 8, 0, 9, 9, 9, 9, 8, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 8, 0], [8, 1, 8, 9, 9, 9, 9, 8, 1, 1, 0, 1, 1, 0, 8, 0, 8, 8, 0, 8], [0, 0, 0, 9, 9, 9, 9, 0, 1, 1, 8, 8, 3, 3, 8, 1, 1, 0, 0, 1], [8, 1, 1, 8, 1, 8, 0, 1, 0, 0, 0, 3, 3, 3, 1, 0, 8, 1, 8, 8], [0, 1, 8, 8, 1, 1, 0, 8, 8, 3, 3, 3, 3, 3, 8, 0, 0, 8, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 8, 3, 3, 3, 3, 3, 1, 1, 8, 8, 1, 0], [8, 0, 8, 0, 8, 0, 0, 0, 0, 3, 3, 3, 3, 3, 1, 1, 1, 0, 8, 8], [0, 0, 0, 0, 8, 1, 1, 1, 1, 3, 3, 3, 3, 3, 1, 1, 0, 1, 8, 1], [0, 8, 8, 0, 8, 8, 1, 8, 0, 3, 3, 3, 8, 1, 1, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 8, 0, 1, 0, 0, 1, 0, 0, 0, 8, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 8, 8, 1, 0, 0, 8, 0, 1, 0, 1, 1, 0, 0], [0, 4, 4, 4, 4, 4, 8, 4, 0, 0, 0, 1, 0, 8, 0, 8, 0, 1, 8, 0], [1, 4, 4, 4, 4, 4, 4, 4, 0, 1, 1, 0, 8, 0, 0, 0, 0, 8, 1, 8], [1, 4, 4, 4, 4, 4, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 8], [0, 1, 0, 0, 0, 1, 8, 1, 0, 8, 0, 1, 0, 0, 8, 0, 0, 8, 1, 0], [8, 0, 1, 0, 0, 1, 0, 8, 0, 1, 1, 0, 1, 8, 0, 8, 0, 0, 1, 0]],
then this grids change to output grids below
[[3, 3, 3], [3, 3, 3], [3, 3, 3]].

Quiz
If input grids are like that
[[0, 9, 9, 7, 0, 0, 9, 7, 7, 7, 0, 7, 0, 0, 7, 0, 9, 0, 0, 0], [0, 0, 7, 3, 3, 3, 3, 0, 7, 7, 0, 0, 0, 0, 6, 6, 6, 6, 0, 9], [0, 7, 9, 3, 3, 3, 3, 3, 3, 0, 9, 9, 7, 0, 6, 6, 6, 6, 0, 7], [0, 9, 0, 3, 3, 3, 3, 3, 3, 3, 7, 0, 7, 6, 6, 6, 6, 6, 0, 0], [9, 0, 0, 7, 0, 9, 7, 7, 0, 7, 7, 0, 0, 0, 9, 6, 6, 6, 7, 7], [0, 0, 9, 7, 0, 9, 9, 0, 0, 7, 0, 0, 9, 0, 0, 6, 6, 6, 0, 7], [0, 9, 0, 9, 0, 0, 7, 0, 0, 9, 0, 0, 0, 0, 0, 9, 9, 0, 0, 0], [0, 9, 0, 0, 9, 7, 0, 0, 0, 9, 7, 0, 9, 9, 0, 7, 0, 0, 0, 0], [0, 7, 8, 8, 8, 8, 9, 9, 0, 7, 0, 0, 9, 7, 7, 0, 0, 9, 7, 7], [9, 0, 9, 8, 8, 8, 7, 7, 0, 7, 0, 0, 9, 0, 0, 9, 0, 7, 0, 0], [0, 0, 9, 8, 8, 8, 0, 9, 0, 9, 0, 0, 7, 5, 5, 0, 0, 9, 0, 9], [0, 0, 9, 8, 8, 8, 9, 0, 0, 0, 0, 9, 5, 5, 5, 7, 0, 0, 0, 9], [9, 0, 0, 8, 8, 8, 0, 7, 9, 9, 7, 0, 5, 5, 5, 5, 0, 0, 0, 7], [9, 9, 9, 7, 9, 8, 8, 0, 9, 7, 0, 5, 5, 5, 5, 5, 9, 0, 7, 0], [0, 0, 7, 7, 0, 7, 8, 0, 0, 0, 7, 5, 5, 5, 5, 5, 5, 9, 0, 9], [9, 7, 7, 0, 9, 0, 7, 9, 7, 0, 9, 5, 5, 5, 5, 5, 5, 0, 0, 9], [0, 7, 7, 0, 0, 7, 9, 0, 7, 0, 9, 7, 5, 5, 5, 5, 5, 9, 7, 9], [0, 0, 7, 7, 7, 0, 0, 9, 0, 9, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 7, 9, 0, 0, 0, 9, 9, 5, 5, 5, 0, 9, 0, 9, 0], [0, 0, 9, 0, 7, 0, 0, 9, 7, 0, 0, 7, 0, 0, 7, 9, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be
[[5, 5, 5], [5, 5, 5], [5, 5, 5]].","[[5, 5, 5], [5, 5, 5], [5, 5, 5]]","[[5, 5, 5], [5, 5, 5], [5, 5, 5]]","[[5, 5, 5], [5, 5, 5], [5, 5, 5]]",True,,Easy
319f2597,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[7, 8, 4, 8, 8, 3, 5, 6, 2, 3, 7, 5, 6, 9, 7, 7, 9, 6, 3, 1], [5, 5, 8, 4, 5, 8, 3, 1, 7, 9, 2, 2, 9, 5, 9, 3, 9, 6, 4, 9], [1, 6, 6, 6, 5, 7, 2, 4, 4, 5, 1, 1, 5, 3, 5, 5, 9, 7, 6, 6], [6, 3, 8, 6, 5, 8, 4, 4, 5, 4, 3, 5, 8, 2, 1, 5, 6, 2, 1, 7], [3, 5, 4, 1, 5, 9, 3, 4, 6, 5, 5, 2, 4, 8, 2, 3, 9, 7, 1, 3], [2, 8, 9, 4, 7, 9, 8, 8, 1, 8, 1, 3, 7, 4, 7, 1, 2, 6, 5, 6], [3, 3, 6, 5, 2, 7, 4, 8, 0, 0, 2, 6, 5, 4, 5, 1, 8, 7, 9, 8], [2, 6, 3, 3, 5, 5, 7, 8, 0, 0, 5, 9, 9, 5, 4, 9, 9, 4, 6, 1], [2, 3, 4, 5, 9, 1, 1, 7, 3, 8, 7, 3, 3, 9, 6, 8, 7, 4, 3, 3], [9, 4, 2, 7, 2, 9, 5, 7, 8, 8, 3, 1, 2, 4, 8, 6, 8, 3, 9, 6], [1, 1, 9, 7, 3, 6, 4, 3, 3, 2, 5, 3, 9, 5, 1, 1, 9, 7, 5, 3], [7, 8, 8, 3, 6, 9, 7, 6, 9, 9, 3, 4, 1, 7, 6, 3, 6, 2, 1, 4], [3, 5, 7, 4, 3, 3, 4, 5, 7, 2, 9, 2, 5, 3, 4, 5, 6, 9, 9, 6], [4, 2, 5, 5, 7, 1, 4, 7, 9, 9, 9, 5, 2, 3, 2, 8, 5, 9, 7, 7], [8, 5, 7, 5, 8, 1, 2, 4, 4, 3, 1, 9, 9, 9, 9, 8, 1, 5, 1, 7], [5, 4, 5, 1, 8, 2, 6, 4, 4, 5, 2, 5, 8, 8, 8, 2, 4, 6, 5, 7], [4, 5, 7, 7, 9, 5, 5, 7, 2, 2, 2, 4, 3, 4, 7, 3, 8, 2, 8, 1], [9, 5, 9, 6, 8, 1, 6, 2, 1, 9, 4, 8, 8, 7, 5, 1, 3, 1, 6, 4], [7, 7, 1, 6, 6, 7, 3, 4, 7, 5, 8, 4, 8, 4, 4, 3, 5, 6, 4, 2], [4, 3, 7, 8, 3, 4, 5, 5, 8, 4, 7, 9, 4, 9, 4, 9, 3, 9, 8, 7]],
then this grids change to output grids below
[[7, 8, 4, 8, 8, 3, 5, 6, 2, 0, 7, 5, 6, 9, 7, 7, 9, 6, 3, 1], [5, 5, 8, 4, 5, 8, 3, 1, 0, 0, 2, 2, 9, 5, 9, 3, 9, 6, 4, 9], [1, 6, 6, 6, 5, 7, 2, 4, 0, 0, 1, 1, 5, 3, 5, 5, 9, 7, 6, 6], [6, 3, 8, 6, 5, 8, 4, 4, 0, 0, 3, 5, 8, 2, 1, 5, 6, 2, 1, 7], [3, 5, 4, 1, 5, 9, 3, 4, 0, 0, 5, 2, 4, 8, 2, 3, 9, 7, 1, 3], [2, 8, 9, 4, 7, 9, 8, 8, 0, 0, 1, 3, 7, 4, 7, 1, 2, 6, 5, 6], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 4, 5, 9, 1, 1, 7, 0, 0, 7, 3, 3, 9, 6, 8, 7, 4, 3, 3], [9, 4, 2, 7, 2, 9, 5, 7, 0, 0, 3, 1, 2, 4, 8, 6, 8, 3, 9, 6], [1, 1, 9, 7, 3, 6, 4, 3, 0, 2, 5, 3, 9, 5, 1, 1, 9, 7, 5, 3], [7, 8, 8, 3, 6, 9, 7, 6, 0, 0, 3, 4, 1, 7, 6, 3, 6, 2, 1, 4], [3, 5, 7, 4, 3, 3, 4, 5, 0, 2, 9, 2, 5, 3, 4, 5, 6, 9, 9, 6], [4, 2, 5, 5, 7, 1, 4, 7, 0, 0, 9, 5, 2, 3, 2, 8, 5, 9, 7, 7], [8, 5, 7, 5, 8, 1, 2, 4, 0, 0, 1, 9, 9, 9, 9, 8, 1, 5, 1, 7], [5, 4, 5, 1, 8, 2, 6, 4, 0, 0, 2, 5, 8, 8, 8, 2, 4, 6, 5, 7], [4, 5, 7, 7, 9, 5, 5, 7, 2, 2, 2, 4, 3, 4, 7, 3, 8, 2, 8, 1], [9, 5, 9, 6, 8, 1, 6, 2, 0, 0, 4, 8, 8, 7, 5, 1, 3, 1, 6, 4], [7, 7, 1, 6, 6, 7, 3, 4, 0, 0, 8, 4, 8, 4, 4, 3, 5, 6, 4, 2], [4, 3, 7, 8, 3, 4, 5, 5, 0, 0, 7, 9, 4, 9, 4, 9, 3, 9, 8, 7]].

Example 2
If input grids are like that
[[5, 2, 5, 2, 5, 4, 3, 8, 2, 7, 3, 7, 5, 6, 2, 1, 9, 3, 2, 1], [1, 2, 3, 6, 5, 2, 2, 5, 8, 9, 8, 5, 8, 7, 9, 2, 6, 5, 5, 5], [3, 1, 9, 7, 9, 8, 8, 7, 1, 9, 7, 3, 9, 7, 5, 9, 8, 4, 9, 8], [5, 7, 7, 8, 3, 4, 4, 4, 4, 6, 2, 9, 4, 3, 6, 8, 4, 6, 7, 1], [6, 3, 8, 3, 5, 9, 7, 5, 4, 6, 1, 9, 3, 9, 7, 7, 6, 7, 8, 1], [6, 2, 4, 9, 8, 3, 9, 1, 4, 8, 9, 9, 6, 5, 9, 1, 9, 7, 5, 7], [6, 2, 8, 3, 4, 6, 4, 8, 9, 3, 9, 3, 6, 9, 2, 2, 9, 1, 9, 3], [2, 4, 7, 7, 8, 1, 4, 7, 6, 2, 8, 9, 8, 8, 7, 4, 8, 4, 9, 1], [2, 1, 5, 9, 2, 6, 8, 3, 6, 4, 5, 8, 6, 3, 1, 4, 5, 1, 5, 1], [9, 4, 9, 5, 1, 2, 8, 2, 1, 4, 2, 9, 9, 6, 1, 9, 9, 7, 2, 1], [6, 6, 2, 3, 7, 3, 7, 5, 4, 3, 2, 4, 4, 7, 7, 7, 6, 7, 6, 7], [2, 4, 3, 1, 4, 8, 0, 0, 9, 6, 3, 2, 4, 4, 8, 7, 2, 9, 4, 2], [3, 5, 7, 8, 2, 4, 0, 0, 1, 6, 4, 7, 4, 7, 2, 3, 9, 4, 5, 2], [8, 1, 4, 3, 9, 6, 9, 9, 8, 5, 4, 3, 5, 2, 6, 8, 9, 9, 4, 8], [1, 2, 6, 9, 8, 9, 1, 4, 3, 3, 6, 2, 3, 7, 3, 1, 8, 1, 4, 5], [3, 8, 4, 4, 4, 9, 6, 1, 6, 7, 9, 4, 2, 6, 2, 9, 3, 1, 5, 1], [2, 7, 5, 8, 8, 8, 6, 3, 4, 6, 3, 7, 9, 2, 1, 1, 7, 2, 5, 9], [2, 1, 7, 2, 1, 3, 5, 5, 3, 6, 2, 8, 3, 6, 9, 5, 5, 9, 8, 4], [3, 3, 3, 6, 6, 3, 6, 5, 9, 4, 7, 2, 4, 4, 7, 7, 6, 1, 2, 9], [2, 5, 8, 9, 7, 9, 7, 2, 3, 2, 2, 6, 6, 7, 9, 8, 9, 1, 1, 6]],
then this grids change to output grids below
[[5, 2, 5, 2, 5, 4, 0, 0, 2, 7, 3, 7, 5, 6, 2, 1, 9, 3, 2, 1], [1, 2, 3, 6, 5, 2, 2, 0, 8, 9, 8, 5, 8, 7, 9, 2, 6, 5, 5, 5], [3, 1, 9, 7, 9, 8, 0, 0, 1, 9, 7, 3, 9, 7, 5, 9, 8, 4, 9, 8], [5, 7, 7, 8, 3, 4, 0, 0, 4, 6, 2, 9, 4, 3, 6, 8, 4, 6, 7, 1], [6, 3, 8, 3, 5, 9, 0, 0, 4, 6, 1, 9, 3, 9, 7, 7, 6, 7, 8, 1], [6, 2, 4, 9, 8, 3, 0, 0, 4, 8, 9, 9, 6, 5, 9, 1, 9, 7, 5, 7], [6, 2, 8, 3, 4, 6, 0, 0, 9, 3, 9, 3, 6, 9, 2, 2, 9, 1, 9, 3], [2, 4, 7, 7, 8, 1, 0, 0, 6, 2, 8, 9, 8, 8, 7, 4, 8, 4, 9, 1], [2, 1, 5, 9, 2, 6, 0, 0, 6, 4, 5, 8, 6, 3, 1, 4, 5, 1, 5, 1], [9, 4, 9, 5, 1, 2, 0, 2, 1, 4, 2, 9, 9, 6, 1, 9, 9, 7, 2, 1], [6, 6, 2, 3, 7, 3, 0, 0, 4, 3, 2, 4, 4, 7, 7, 7, 6, 7, 6, 7], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [8, 1, 4, 3, 9, 6, 0, 0, 8, 5, 4, 3, 5, 2, 6, 8, 9, 9, 4, 8], [1, 2, 6, 9, 8, 9, 0, 0, 3, 3, 6, 2, 3, 7, 3, 1, 8, 1, 4, 5], [3, 8, 4, 4, 4, 9, 0, 0, 6, 7, 9, 4, 2, 6, 2, 9, 3, 1, 5, 1], [2, 7, 5, 8, 8, 8, 0, 0, 4, 6, 3, 7, 9, 2, 1, 1, 7, 2, 5, 9], [2, 1, 7, 2, 1, 3, 0, 0, 3, 6, 2, 8, 3, 6, 9, 5, 5, 9, 8, 4], [3, 3, 3, 6, 6, 3, 0, 0, 9, 4, 7, 2, 4, 4, 7, 7, 6, 1, 2, 9], [2, 5, 8, 9, 7, 9, 0, 2, 3, 2, 2, 6, 6, 7, 9, 8, 9, 1, 1, 6]].

Quiz
If input grids are like that
[[4, 5, 7, 5, 9, 2, 3, 1, 7, 8, 6, 9, 4, 2, 4, 2, 5, 1, 2, 7], [9, 1, 7, 5, 5, 1, 2, 7, 1, 9, 1, 7, 4, 8, 4, 7, 2, 9, 5, 8], [9, 1, 8, 6, 9, 4, 7, 6, 9, 5, 5, 5, 8, 1, 4, 8, 4, 7, 8, 5], [4, 2, 9, 5, 5, 2, 8, 2, 7, 7, 9, 6, 1, 4, 9, 8, 3, 3, 9, 2], [1, 9, 2, 3, 8, 4, 3, 1, 1, 3, 4, 6, 3, 5, 1, 1, 2, 6, 4, 6], [1, 4, 3, 5, 6, 1, 1, 1, 1, 6, 7, 3, 9, 5, 8, 3, 5, 6, 2, 9], [7, 7, 1, 9, 2, 4, 6, 9, 1, 5, 5, 8, 5, 2, 2, 2, 4, 2, 1, 2], [2, 9, 6, 1, 2, 9, 4, 8, 2, 7, 8, 2, 5, 7, 3, 2, 2, 4, 7, 7], [4, 2, 6, 6, 8, 9, 2, 1, 3, 2, 4, 5, 8, 3, 7, 4, 8, 5, 2, 1], [3, 2, 4, 8, 9, 8, 9, 5, 2, 1, 6, 8, 1, 2, 5, 7, 9, 1, 8, 5], [1, 3, 7, 2, 7, 3, 5, 2, 3, 9, 3, 2, 7, 2, 1, 7, 9, 8, 5, 7], [1, 6, 4, 6, 6, 5, 5, 9, 2, 3, 2, 4, 6, 7, 3, 9, 9, 9, 6, 6], [8, 6, 5, 2, 2, 3, 2, 1, 4, 9, 6, 9, 4, 9, 7, 7, 1, 5, 9, 3], [3, 7, 7, 5, 9, 8, 7, 4, 2, 2, 9, 5, 0, 0, 8, 6, 7, 6, 6, 7], [6, 9, 5, 6, 3, 7, 5, 7, 9, 8, 9, 5, 0, 0, 4, 2, 3, 3, 2, 6], [2, 8, 5, 3, 5, 6, 7, 1, 4, 7, 4, 4, 9, 5, 1, 3, 4, 4, 4, 7], [7, 8, 4, 7, 9, 5, 7, 8, 7, 4, 6, 8, 5, 3, 3, 1, 4, 1, 9, 7], [4, 5, 9, 9, 4, 5, 5, 7, 9, 8, 5, 8, 8, 6, 2, 8, 3, 7, 2, 4], [1, 6, 1, 4, 3, 6, 5, 4, 1, 7, 4, 7, 8, 6, 5, 9, 5, 4, 9, 9], [2, 9, 2, 6, 7, 8, 9, 9, 6, 4, 5, 8, 7, 5, 4, 3, 6, 3, 9, 5]],
then output grids?

=========","The output grids would be:

[[4, 5, 7, 5, 9, 2, 0, 0, 7, 8, 6, 9, 4, 2, 4, 2, 5, 1, 2, 7], [9, 1, 7, 5, 5, 1, 0, 0, 1, 9, 1, 7, 4, 8, 4, 7, 2, 9, 5, 8], [9, 1, 8, 6, 9, 4, 0, 0, 9, 5, 5, 5, 8, 1, 4, 8, 4, 7, 8, 5], [4, 2, 9, 5, 5, 2, 0, 0, 7, 7, 9, 6, 1, 4, 9, 8, 3, 3, 9, 2], [1, 9, 2, 3, 8, 4, 0, 0, 1, 3, 4, 6, 3, 5, 1, 1, 2, 6, 4, 6], [1, 4, 3, 5, 6, 1, 0, 0, 1, 6, 7, 3, 9, 5, 8, 3, 5, 6, 2, 9], [7, 7, 1, 9, 2, 4, 0, 0, 1, 5, 5, 8, 5, 2, 2, 2, 4, 2, 1, 2], [2, 9, 6, 1, 2, 9, 0, 0, 2, 7, 8, 2, 5, 7, 3, 2, 2, 4, 7, 7], [4, 2, 6, 6, 8, 9, 0, 0, 3, 2, 4, 5, 8, 3, 7, 4, 8, 5, 2, 1], [3, 2, 4, 8, 9, 8, 0, 0, 2, 1, 6, 8, 1, 2, 5, 7, 9, 1, 8, 5], [1, 3, 7, 2, 7, 3, 0, 0, 3, 9, 3, 2, 7, 2, 1, 7, 9, 8, 5, 7], [1, 6, 4, 6, 6, 5, 0, 0, 2, 3, 2, 4, 6, 7, 3, 9, 9, 9, 6, 6], [8, 6, 5, 2, 2, 3, 0, 0, 4, 9, 6, 9, 4, 9, 7, 7, 1, 5, 9, 3], [3, 7, 7, 5, 9, 8, 0, 0, 2, 2, 9, 5, 8, 6, 7, 6, 6, 7, 6, 7], [6, 9, 5, 6, 3, 7, 0, 0, 9, 8, 9, 5, 4, 2, 3, 1, 4, 1, 9, 7], [2, 8, 5, 3, 5, 6, 0, 0, 4, 7, 4, 4, 9, 5, 1, 3, 4, 4, 4, 7], [7, 8, 4, 7, 9, 5, 0, 0, 7, 4, 6, 8, 5, 3, 3, 1, 4, 1, 9, 7], [4, 5, 9, 9, 4, 5, 0, 0, 9, 8, 5, 8, 8, 6, 2, 8, 3, 7, 2, 4], [1, 6, 1, 4, 3, 6, 0, 0, 1, 7, 4, 7, 8, 6, 5, 9, 5, 4, 9, 9], [2, 9, 2, 6, 7, 8, 0, 0, 6, 4, 5, 8, 7, 5, 4, 3, 6, 3, 9, 5]].

The pattern here is that the 7th and 8th columns of the input grid are replaced with 0s in the output grid.","[[4, 5, 7, 5, 9, 2, 0, 0, 7, 8, 6, 9, 4, 2, 4, 2, 5, 1, 2, 7], [9, 1, 7, 5, 5, 1, 0, 0, 1, 9, 1, 7, 4, 8, 4, 7, 2, 9, 5, 8], [9, 1, 8, 6, 9, 4, 0, 0, 9, 5, 5, 5, 8, 1, 4, 8, 4, 7, 8, 5], [4, 2, 9, 5, 5, 2, 0, 0, 7, 7, 9, 6, 1, 4, 9, 8, 3, 3, 9, 2], [1, 9, 2, 3, 8, 4, 0, 0, 1, 3, 4, 6, 3, 5, 1, 1, 2, 6, 4, 6], [1, 4, 3, 5, 6, 1, 0, 0, 1, 6, 7, 3, 9, 5, 8, 3, 5, 6, 2, 9], [7, 7, 1, 9, 2, 4, 0, 0, 1, 5, 5, 8, 5, 2, 2, 2, 4, 2, 1, 2], [2, 9, 6, 1, 2, 9, 0, 0, 2, 7, 8, 2, 5, 7, 3, 2, 2, 4, 7, 7], [4, 2, 6, 6, 8, 9, 0, 0, 3, 2, 4, 5, 8, 3, 7, 4, 8, 5, 2, 1], [3, 2, 4, 8, 9, 8, 0, 0, 2, 1, 6, 8, 1, 2, 5, 7, 9, 1, 8, 5], [1, 3, 7, 2, 7, 3, 0, 0, 3, 9, 3, 2, 7, 2, 1, 7, 9, 8, 5, 7], [1, 6, 4, 6, 6, 5, 0, 0, 2, 3, 2, 4, 6, 7, 3, 9, 9, 9, 6, 6], [8, 6, 5, 2, 2, 3, 0, 0, 4, 9, 6, 9, 4, 9, 7, 7, 1, 5, 9, 3], [3, 7, 7, 5, 9, 8, 0, 0, 2, 2, 9, 5, 8, 6, 7, 6, 6, 7, 6, 7], [6, 9, 5, 6, 3, 7, 0, 0, 9, 8, 9, 5, 4, 2, 3, 1, 4, 1, 9, 7], [2, 8, 5, 3, 5, 6, 0, 0, 4, 7, 4, 4, 9, 5, 1, 3, 4, 4, 4, 7], [7, 8, 4, 7, 9, 5, 0, 0, 7, 4, 6, 8, 5, 3, 3, 1, 4, 1, 9, 7], [4, 5, 9, 9, 4, 5, 0, 0, 9, 8, 5, 8, 8, 6, 2, 8, 3, 7, 2, 4], [1, 6, 1, 4, 3, 6, 0, 0, 1, 7, 4, 7, 8, 6, 5, 9, 5, 4, 9, 9], [2, 9, 2, 6, 7, 8, 0, 0, 6, 4, 5, 8, 7, 5, 4, 3, 6, 3, 9, 5]]","[[4, 5, 7, 5, 9, 2, 0, 0, 7, 8, 6, 9, 4, 2, 4, 2, 5, 1, 2, 7], [9, 1, 7, 5, 5, 1, 0, 0, 1, 9, 1, 7, 4, 8, 4, 7, 2, 9, 5, 8], [9, 1, 8, 6, 9, 4, 0, 0, 9, 5, 5, 5, 8, 1, 4, 8, 4, 7, 8, 5], [4, 2, 9, 5, 5, 2, 0, 0, 7, 7, 9, 6, 1, 4, 9, 8, 3, 3, 9, 2], [1, 9, 2, 3, 8, 4, 0, 0, 1, 3, 4, 6, 3, 5, 1, 1, 2, 6, 4, 6], [1, 4, 3, 5, 6, 1, 0, 0, 1, 6, 7, 3, 9, 5, 8, 3, 5, 6, 2, 9], [7, 7, 1, 9, 2, 4, 0, 0, 1, 5, 5, 8, 5, 2, 2, 2, 4, 2, 1, 2], [2, 9, 6, 1, 2, 9, 0, 0, 2, 7, 8, 2, 5, 7, 3, 2, 2, 4, 7, 7], [4, 2, 6, 6, 8, 9, 0, 0, 3, 2, 4, 5, 8, 3, 7, 4, 8, 5, 2, 1], [3, 2, 4, 8, 9, 8, 0, 0, 2, 1, 6, 8, 1, 2, 5, 7, 9, 1, 8, 5], [1, 3, 7, 2, 7, 3, 0, 0, 3, 9, 3, 2, 7, 2, 1, 7, 9, 8, 5, 7], [1, 6, 4, 6, 6, 5, 0, 0, 2, 3, 2, 4, 6, 7, 3, 9, 9, 9, 6, 6], [8, 6, 5, 2, 2, 3, 0, 0, 4, 9, 6, 9, 4, 9, 7, 7, 1, 5, 9, 3], [3, 7, 7, 5, 9, 8, 0, 0, 2, 2, 9, 5, 8, 6, 7, 6, 6, 7, 6, 7], [6, 9, 5, 6, 3, 7, 0, 0, 9, 8, 9, 5, 4, 2, 3, 1, 4, 1, 9, 7], [2, 8, 5, 3, 5, 6, 0, 0, 4, 7, 4, 4, 9, 5, 1, 3, 4, 4, 4, 7], [7, 8, 4, 7, 9, 5, 0, 0, 7, 4, 6, 8, 5, 3, 3, 1, 4, 1, 9, 7], [4, 5, 9, 9, 4, 5, 0, 0, 9, 8, 5, 8, 8, 6, 2, 8, 3, 7, 2, 4], [1, 6, 1, 4, 3, 6, 0, 0, 1, 7, 4, 7, 8, 6, 5, 9, 5, 4, 9, 9], [2, 9, 2, 6, 7, 8, 0, 0, 6, 4, 5, 8, 7, 5, 4, 3, 6, 3, 9, 5]]","[[4, 5, 7, 5, 9, 2, 3, 1, 7, 8, 6, 9, 0, 2, 4, 2, 5, 1, 2, 7], [9, 1, 7, 5, 5, 1, 2, 7, 1, 9, 1, 7, 0, 0, 4, 7, 2, 9, 5, 8], [9, 1, 8, 6, 9, 4, 7, 6, 9, 5, 5, 5, 0, 0, 4, 8, 4, 7, 8, 5], [4, 2, 9, 5, 5, 2, 8, 2, 7, 7, 9, 6, 0, 0, 9, 8, 3, 3, 9, 2], [1, 9, 2, 3, 8, 4, 3, 1, 1, 3, 4, 6, 0, 0, 1, 1, 2, 6, 4, 6], [1, 4, 3, 5, 6, 1, 1, 1, 1, 6, 7, 3, 0, 0, 8, 3, 5, 6, 2, 9], [7, 7, 1, 9, 2, 4, 6, 9, 1, 5, 5, 8, 0, 2, 2, 2, 4, 2, 1, 2], [2, 9, 6, 1, 2, 9, 4, 8, 2, 7, 8, 2, 0, 0, 3, 2, 2, 4, 7, 7], [4, 2, 6, 6, 8, 9, 2, 1, 3, 2, 4, 5, 0, 0, 7, 4, 8, 5, 2, 1], [3, 2, 4, 8, 9, 8, 9, 5, 2, 1, 6, 8, 0, 2, 5, 7, 9, 1, 8, 5], [1, 3, 7, 2, 7, 3, 5, 2, 3, 9, 3, 2, 0, 2, 1, 7, 9, 8, 5, 7], [1, 6, 4, 6, 6, 5, 5, 9, 2, 3, 2, 4, 0, 0, 3, 9, 9, 9, 6, 6], [8, 6, 5, 2, 2, 3, 2, 1, 4, 9, 6, 9, 0, 0, 7, 7, 1, 5, 9, 3], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0], [2, 8, 5, 3, 5, 6, 7, 1, 4, 7, 4, 4, 0, 0, 1, 3, 4, 4, 4, 7], [7, 8, 4, 7, 9, 5, 7, 8, 7, 4, 6, 8, 0, 0, 3, 1, 4, 1, 9, 7], [4, 5, 9, 9, 4, 5, 5, 7, 9, 8, 5, 8, 0, 0, 2, 8, 3, 7, 2, 4], [1, 6, 1, 4, 3, 6, 5, 4, 1, 7, 4, 7, 0, 0, 5, 9, 5, 4, 9, 9], [2, 9, 2, 6, 7, 8, 9, 9, 6, 4, 5, 8, 0, 0, 4, 3, 6, 3, 9, 5]]",False,,Tedious
31adaf00,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[5, 5, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 5, 5, 0, 0, 0, 0, 5, 5], [5, 5, 0, 5, 0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 5, 5, 5, 5, 0, 5], [0, 5, 0, 5, 0, 5, 5, 0, 5, 0], [5, 0, 0, 0, 0, 5, 0, 0, 5, 5], [5, 5, 5, 0, 5, 0, 0, 0, 0, 5], [0, 5, 0, 0, 0, 0, 5, 5, 5, 0], [5, 0, 0, 0, 0, 5, 0, 0, 5, 5], [5, 0, 0, 0, 0, 0, 5, 5, 0, 0]],
then this grids change to output grids below
[[5, 5, 0, 0, 1, 1, 1, 5, 0, 0], [0, 0, 5, 5, 1, 1, 1, 0, 5, 5], [5, 5, 0, 5, 1, 1, 1, 0, 5, 0], [0, 0, 0, 0, 5, 5, 5, 5, 0, 5], [0, 5, 0, 5, 0, 5, 5, 0, 5, 0], [5, 0, 0, 0, 0, 5, 1, 1, 5, 5], [5, 5, 5, 0, 5, 0, 1, 1, 0, 5], [0, 5, 1, 1, 1, 0, 5, 5, 5, 0], [5, 0, 1, 1, 1, 5, 0, 0, 5, 5], [5, 0, 1, 1, 1, 0, 5, 5, 0, 0]].

Example 2
If input grids are like that
[[0, 5, 0, 0, 5, 0, 0, 0, 0, 0], [5, 5, 0, 0, 0, 5, 5, 0, 5, 0], [0, 0, 0, 5, 5, 0, 0, 5, 5, 5], [0, 0, 5, 0, 5, 5, 0, 0, 5, 0], [0, 5, 0, 0, 0, 0, 0, 0, 5, 0], [5, 0, 5, 0, 0, 5, 5, 5, 0, 5], [0, 0, 0, 5, 0, 5, 5, 0, 5, 0], [0, 0, 5, 0, 5, 5, 5, 0, 0, 0], [5, 0, 5, 5, 0, 5, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0]],
then this grids change to output grids below
[[0, 5, 1, 1, 5, 0, 0, 0, 0, 0], [5, 5, 1, 1, 0, 5, 5, 0, 5, 0], [1, 1, 0, 5, 5, 0, 0, 5, 5, 5], [1, 1, 5, 0, 5, 5, 1, 1, 5, 0], [0, 5, 0, 1, 1, 0, 1, 1, 5, 0], [5, 0, 5, 1, 1, 5, 5, 5, 0, 5], [1, 1, 0, 5, 0, 5, 5, 0, 5, 0], [1, 1, 5, 0, 5, 5, 5, 0, 0, 0], [5, 0, 5, 5, 0, 5, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0]].

Quiz
If input grids are like that
[[5, 0, 0, 0, 5, 0, 5, 0, 5, 0], [5, 0, 0, 5, 0, 5, 5, 0, 0, 0], [5, 5, 0, 5, 5, 0, 0, 5, 5, 0], [5, 0, 0, 0, 0, 0, 0, 5, 0, 0], [5, 0, 0, 0, 5, 5, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 5, 5, 0, 0], [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], [5, 0, 5, 0, 5, 0, 5, 0, 0, 5], [0, 5, 5, 0, 5, 0, 0, 5, 5, 5], [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that a 1 is placed in the center of each 5x5 sub-grid in the input grid. If the sub-grid is not entirely filled with 5s, then the 1 is placed in the center of the largest square of 5s. 

Applying this pattern to the quiz input, the output grid would be:

[[5, 0, 0, 0, 5, 0, 5, 0, 5, 0], 
 [5, 0, 0, 5, 0, 5, 5, 0, 0, 0], 
 [5, 5, 0, 5, 5, 0, 0, 5, 5, 0], 
 [5, 0, 0, 0, 0, 0, 0, 5, 0, 0], 
 [5, 0, 0, 0, 5, 5, 0, 0, 0, 5], 
 [0, 0, 0, 0, 0, 0, 5, 5, 0, 0], 
 [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], 
 [5, 0, 5, 0, 5, 0, 5, 0, 0, 5], 
 [0, 5, 5, 0, 5, 0, 0, 5, 5, 5], 
 [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]]

changes to

[[5, 0, 0, 0, 5, 0, 5, 0, 5, 0], 
 [5, 0, 1, 5, 0, 5, 5, 0, 0, 0], 
 [5, 5, 0, 5, 5, 0, 0, 5, 5, 0], 
 [5, 0, 0, 0, 0, 0, 0, 5, 0, 0], 
 [5, 0, 0, 0, 5, 5, 0, 0, 0, 5], 
 [0, 0, 0, 0, 0, 0, 5, 5, 0, 0], 
 [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], 
 [5, 0, 5, 0, 5, 0, 5, 0, 0, 5], 
 [0, 5, 5, 0, 5, 0, 0, 5, 5, 5], 
 [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]]","[[5, 0, 0, 0, 5, 0, 5, 0, 5, 0], 
 [5, 0, 0, 5, 0, 5, 5, 0, 0, 0], 
 [5, 5, 0, 5, 5, 0, 0, 5, 5, 0], 
 [5, 0, 0, 0, 0, 0, 0, 5, 0, 0], 
 [5, 0, 0, 0, 5, 5, 0, 0, 0, 5], 
 [0, 0, 0, 0, 0, 0, 5, 5, 0, 0], 
 [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], 
 [5, 0, 5, 0, 5, 0, 5, 0, 0, 5], 
 [0, 5, 5, 0, 5, 0, 0, 5, 5, 5], 
 [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]]

changes to

[[5, 0, 0, 0, 5, 0, 5, 0, 5, 0], 
 [5, 0, 1, 5, 0, 5, 5, 0, 0, 0], 
 [5, 5, 0, 5, 5, 0, 0, 5, 5, 0], 
 [5, 0, 0, 0, 0, 0, 0, 5, 0, 0], 
 [5, 0, 0, 0, 5, 5, 0, 0, 0, 5], 
 [0, 0, 0, 0, 0, 0, 5, 5, 0, 0], 
 [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], 
 [5, 0, 5, 0, 5, 0, 5, 0, 0, 5], 
 [0, 5, 5, 0, 5, 0, 0, 5, 5, 5], 
 [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]]","[[5, 0, 0, 0, 5, 0, 5, 0, 5, 0], 
 [5, 0, 1, 5, 0, 5, 5, 0, 0, 0], 
 [5, 5, 0, 5, 5, 0, 0, 5, 5, 0], 
 [5, 0, 0, 0, 0, 0, 0, 5, 0, 0], 
 [5, 0, 0, 0, 5, 5, 0, 0, 0, 5], 
 [0, 0, 0, 0, 0, 0, 5, 5, 0, 0], 
 [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], 
 [5, 0, 5, 0, 5, 0, 5, 0, 0, 5], 
 [0, 5, 5, 0, 5, 0, 0, 5, 5, 5], 
 [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]]","[[5, 1, 1, 0, 5, 0, 5, 0, 5, 0], [5, 1, 1, 5, 0, 5, 5, 0, 0, 0], [5, 5, 0, 5, 5, 1, 1, 5, 5, 0], [5, 1, 1, 1, 0, 1, 1, 5, 0, 0], [5, 1, 1, 1, 5, 5, 0, 0, 0, 5], [0, 1, 1, 1, 1, 1, 5, 5, 1, 1], [0, 0, 5, 5, 1, 1, 5, 5, 1, 1], [5, 0, 5, 0, 5, 0, 5, 0, 0, 5], [0, 5, 5, 0, 5, 0, 0, 5, 5, 5], [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]]",False,,Easy
31d5ba1a,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[9, 9, 0, 9, 0], [9, 0, 0, 9, 0], [0, 9, 9, 9, 9], [4, 0, 0, 4, 0], [4, 4, 0, 4, 4], [4, 4, 4, 0, 4]],
then this grids change to output grids below
[[0, 6, 0, 0, 0], [0, 6, 0, 0, 6], [6, 0, 0, 6, 0]].

Example 2
If input grids are like that
[[9, 0, 0, 9, 9], [0, 0, 0, 0, 0], [0, 0, 9, 0, 9], [0, 0, 4, 4, 0], [4, 4, 4, 0, 0], [4, 0, 4, 0, 4]],
then this grids change to output grids below
[[6, 0, 6, 0, 6], [6, 6, 6, 0, 0], [6, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[9, 9, 0, 9, 0], [0, 0, 9, 0, 9], [0, 0, 0, 9, 9], [4, 4, 4, 0, 4], [4, 0, 4, 4, 4], [4, 4, 0, 0, 0]],
then output grids?

=========","The pattern in this problem seems to be that the number 9 in the input grid is replaced by the number 6 in the output grid, and the number 4 in the input grid is removed. The output grid is also smaller, with only the rows containing the number 6 remaining.

Applying this pattern to the quiz input grid:

[[9, 9, 0, 9, 0], [0, 0, 9, 0, 9], [0, 0, 0, 9, 9], [4, 4, 4, 0, 4], [4, 0, 4, 4, 4], [4, 4, 0, 0, 0]]

We replace the number 9 with the number 6 and remove the rows containing the number 4:

[[6, 6, 0, 6, 0], [0, 0, 6, 0, 6], [0, 0, 0, 6, 6]]

So, the output grid should be:

[[6, 6, 0, 6, 0], [0, 0, 6, 0, 6], [0, 0, 0, 6, 6]]","[[9, 9, 0, 9, 0], [0, 0, 9, 0, 9], [0, 0, 0, 9, 9], [4, 4, 4, 0, 4], [4, 0, 4, 4, 4], [4, 4, 0, 0, 0]]

We replace the number 9 with the number 6 and remove the rows containing the number 4:

[[6, 6, 0, 6, 0], [0, 0, 6, 0, 6], [0, 0, 0, 6, 6]]

So, the output grid should be:

[[6, 6, 0, 6, 0], [0, 0, 6, 0, 6], [0, 0, 0, 6, 6]]","[[6, 6, 0, 6, 0], [0, 0, 6, 0, 6], [0, 0, 0, 6, 6]]","[[0, 0, 6, 6, 6], [6, 0, 0, 6, 0], [6, 6, 0, 6, 6]]",False,,Multiple solutions
32e9702f,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[4, 4, 4], [0, 0, 0], [0, 0, 0]],
then this grids change to output grids below
[[4, 4, 5], [5, 5, 5], [5, 5, 5]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[5, 5, 5, 5, 5, 5, 5, 5], [5, 3, 3, 3, 3, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [3, 3, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5]].

Quiz
If input grids are like that
[[0, 0, 6, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem seems to be that all the cells that are not part of a block of the same color are changed to a new color (5 in the examples). The blocks of the same color remain the same. 

Applying this pattern to the quiz input, we get the following output:

[[5, 5, 6, 6, 6, 6, 6, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 6, 6, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 6, 6, 6, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]].","[[5, 5, 6, 6, 6, 6, 6, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 6, 6, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 6, 6, 6, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]","[[5, 5, 6, 6, 6, 6, 6, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 6, 6, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 6, 6, 6, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]","[[5, 6, 6, 6, 6, 6, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 6, 6, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [6, 6, 6, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 6, 6, 6, 6, 6, 6, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]",False,,Easy
332efdb3,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]],
then this grids change to output grids below
[[1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that every other row and column is filled with 1s, while the remaining cells are filled with 0s. The pattern starts with a row of 1s and alternates between rows of 1s and rows of 0s and 1s. The same pattern is applied to the columns. 

So, if the input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then the output grids would be
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]].","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then the output grids would be
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]","[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]","[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]",True,False,Easy
3391f8c0,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 8, 0, 0], [0, 8, 8, 8, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0], [0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 0], [0, 3, 3, 0, 3, 3, 0, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 3, 3, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 5, 0, 0, 5, 0, 5, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 0, 0, 5, 0, 5, 0, 0, 0, 0], [0, 0, 6, 0, 6, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 5, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern here is that the shapes made by the numbers 5 and 6 in the input grid are swapped in the output grid.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 5, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 5, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 6, 0, 6, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 5, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Medium
3490cc26,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 7, 7, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 7, 7, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 0, 0], [0, 0, 0, 0, 2, 2, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8,",not_complete,not_complete,"[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 2, 2, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Hard
34b99a2b,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 0, 0, 4, 0, 5, 5, 0], [8, 8, 0, 8, 4, 0, 0, 5, 5], [0, 0, 0, 0, 4, 0, 0, 5, 0], [8, 8, 0, 0, 4, 0, 5, 5, 5], [8, 0, 0, 8, 4, 0, 0, 0, 5]],
then this grids change to output grids below
[[2, 0, 2, 0], [2, 2, 2, 0], [0, 0, 2, 0], [2, 0, 2, 2], [2, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 8, 0, 0, 4, 5, 0, 5, 0], [0, 8, 0, 8, 4, 5, 0, 5, 5], [0, 8, 0, 8, 4, 0, 0, 0, 5], [0, 8, 0, 8, 4, 0, 5, 0, 5], [0, 0, 0, 8, 4, 0, 0, 5, 0]],
then this grids change to output grids below
[[2, 2, 2, 0], [2, 2, 2, 0], [0, 2, 0, 0], [0, 0, 0, 0], [0, 0, 2, 2]].

Quiz
If input grids are like that
[[0, 8, 0, 0, 4, 5, 0, 0, 0], [0, 8, 0, 8, 4, 5, 5, 0, 5], [8, 8, 0, 8, 4, 0, 0, 5, 5], [8, 8, 8, 8, 4, 5, 0, 5, 5], [0, 0, 8, 8, 4, 5, 0, 5, 0]],
then output grids?

=========","The pattern in this problem is that the output grid is a 5x4 grid where each cell represents the count of non-zero cells in a 2x2 sub-grid of the input. The sub-grids are taken from the input by moving from left to right and top to bottom, skipping one column and one row each time. 

For the quiz, the output grid would be:

[[2, 2, 2, 0], 
 [2, 2, 2, 2], 
 [2, 2, 2, 2], 
 [2, 2, 2, 2], 
 [0, 2, 2, 2]]","[[2, 2, 2, 0], 
 [2, 2, 2, 2], 
 [2, 2, 2, 2], 
 [2, 2, 2, 2], 
 [0, 2, 2, 2]]","[[2, 2, 2, 0], 
 [2, 2, 2, 2], 
 [2, 2, 2, 2], 
 [2, 2, 2, 2], 
 [0, 2, 2, 2]]","[[2, 2, 0, 0], [2, 0, 0, 0], [2, 2, 2, 0], [0, 2, 0, 0], [2, 0, 0, 2]]",False,,Medium
351d6448,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 3, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0], [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 3, 3, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0], [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 3, 3, 3, 0, 2, 2, 2, 0, 2, 2, 2, 0], [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 3, 3, 3, 0, 2, 2, 2, 0, 2, 2, 2, 0], [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

The pattern in this problem is that the grid is divided into sections by rows of 5s. Each section is then condensed into a single row, with the number of 2s and 3s in each section determining the number of 2s and 3s in the corresponding row of the output. The number of 2s and 3s in each row of the output is equal to the maximum number of 2s and 3s in any single row of the corresponding section of the input.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 3, 3, 3, 0, 3, 2, 2, 0, 2, 2, 2, 0], [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2]]",False,,Easy
358ba94e,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 7, 7, 7, 0, 7, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 7, 0, 7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 7, 7, 7, 7, 7, 0, 0, 7, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 0, 7, 0, 0, 0, 0, 7, 0, 7, 7, 7, 0], [0, 0, 0, 7, 0, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 0, 7, 0], [0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 0, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[7, 7, 7, 7, 7], [7, 0, 7, 7, 7], [7, 7, 7, 0, 7], [7, 0, 7, 7, 7], [7, 7, 7, 7, 7]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 8, 8], [0, 8, 0, 8, 0, 8, 0, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 0, 8], [0, 8, 8, 8, 8, 8, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 8, 8], [0, 8, 0, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8], [0, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 8, 8, 8, 0, 8, 0, 0], [0, 0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 8, 0, 8, 8, 8, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 8, 8, 8, 0, 8, 0, 0], [0, 0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 8, 8, 8, 8], [8, 0, 8, 0, 8], [8, 8, 8, 8, 8], [8, 0, 8, 0, 8], [8, 8, 8, 8, 8]].

Quiz
If input grids are like that
[[0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1]].

The pattern in this problem is that the 5x5 grid in the center of the input grid is extracted and becomes the output grid.","[[1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1]]","[[1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1]]","[[1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1]]",True,False,Easy
37d3e8b2,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 8, 8, 8, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 0, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8, 8, 0], [0, 0, 8, 0, 0, 8, 0, 8, 0, 0, 0, 8, 0, 8, 8, 8, 0], [0, 0, 8, 0, 0, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 8, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 8, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 8, 8, 0, 8, 0, 0, 0, 8, 0, 8, 8, 8, 0, 8, 0], [0, 8, 0, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 8, 0, 8, 0], [0, 8, 8, 8, 8, 8, 0, 0, 0, 8, 0, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 0], [0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 3, 0, 3, 3, 3, 0], [0, 0, 2, 0, 0, 2, 2, 2, 0, 0, 0, 3, 3, 3, 0, 3, 0], [0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 2, 2, 2, 0, 2, 0, 0, 0, 7, 0, 7, 7, 7, 0, 7, 0], [0, 2, 0, 2, 2, 2, 0, 0, 0, 7, 7, 7, 0, 7, 0, 7, 0], [0, 2, 2, 2, 2, 2, 0, 0, 0, 7, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0]].

Quiz
If input grids are like that
[[0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 8, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 8, 0, 8, 8, 8, 0, 8, 0, 8, 8, 0, 0, 8, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 8, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 0, 8, 8, 8, 8, 8, 0], [0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 8, 8, 8, 8, 8, 0], [0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 0, 0, 8, 8, 0], [0, 8, 8, 8, 8, 0, 8, 8, 0, 0, 8, 8, 8, 0, 0, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 3, 0, 0, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0], [0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 3, 0, 3, 3, 3, 3, 3, 0], [0, 4, 0, 0, 4, 4, 4, 4, 0, 0, 3, 0, 3, 3, 3, 3, 3, 0], [0, 4, 0, 0, 4, 4, 4, 4, 0, 0, 3, 3, 3, 0, 0, 3, 3, 0], [0, 4, 4, 4, 4, 0, 4, 4, 0, 0, 3, 3, 3, 0, 0, 3, 3, 0], [0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

The pattern here ","[[0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 3, 0, 0, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0], [0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 3, 0, 3, 3, 3, 3, 3, 0], [0, 4, 0, 0, 4, 4, 4, 4, 0, 0, 3, 0, 3, 3, 3, 3, 3, 0], [0, 4, 0, 0, 4, 4, 4, 4, 0, 0, 3, 3, 3, 0, 0, 3, 3, 0], [0, 4, 4, 4, 4, 0, 4, 4, 0, 0, 3, 3, 3, 0, 0, 3, 3, 0], [0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 3, 0, 0, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0], [0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 3, 0, 3, 3, 3, 3, 3, 0], [0, 4, 0, 0, 4, 4, 4, 4, 0, 0, 3, 0, 3, 3, 3, 3, 3, 0], [0, 4, 0, 0, 4, 4, 4, 4, 0, 0, 3, 3, 3, 0, 0, 3, 3, 0], [0, 4, 4, 4, 4, 0, 4, 4, 0, 0, 3, 3, 3, 0, 0, 3, 3, 0], [0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [0, 0, 2, 0, 2, 2, 2, 0, 3, 0, 3, 3, 0, 0, 3, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 7, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 7, 0, 7, 7, 7, 7, 7, 0], [0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 7, 0, 7, 7, 7, 7, 7, 0], [0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 7, 7, 7, 0, 0, 7, 7, 0], [0, 2, 2, 2, 2, 0, 2, 2, 0, 0, 7, 7, 7, 0, 0, 7, 7, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Medium
3979b1a8,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[9, 8, 8, 8, 9], [8, 8, 2, 8, 8], [8, 2, 2, 2, 8], [8, 8, 2, 8, 8], [9, 8, 8, 8, 9]],
then this grids change to output grids below
[[9, 8, 8, 8, 9, 9, 2, 8, 9, 2], [8, 8, 2, 8, 8, 9, 2, 8, 9, 2], [8, 2, 2, 2, 8, 9, 2, 8, 9, 2], [8, 8, 2, 8, 8, 9, 2, 8, 9, 2], [9, 8, 8, 8, 9, 9, 2, 8, 9, 2], [9, 9, 9, 9, 9, 2, 2, 8, 9, 2], [2, 2, 2, 2, 2, 2, 8, 8, 9, 2], [8, 8, 8, 8, 8, 8, 8, 9, 9, 2], [9, 9, 9, 9, 9, 9, 9, 9, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 8]].

Example 2
If input grids are like that
[[2, 3, 3, 3, 2], [3, 3, 5, 3, 3], [3, 5, 5, 5, 3], [3, 3, 5, 3, 3], [2, 3, 3, 3, 2]],
then this grids change to output grids below
[[2, 3, 3, 3, 2, 2, 5, 3, 2, 5], [3, 3, 5, 3, 3, 2, 5, 3, 2, 5], [3, 5, 5, 5, 3, 2, 5, 3, 2, 5], [3, 3, 5, 3, 3, 2, 5, 3, 2, 5], [2, 3, 3, 3, 2, 2, 5, 3, 2, 5], [2, 2, 2, 2, 2, 5, 5, 3, 2, 5], [5, 5, 5, 5, 5, 5, 3, 3, 2, 5], [3, 3, 3, 3, 3, 3, 3, 2, 2, 5], [2, 2, 2, 2, 2, 2, 2, 2, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 3]].

Quiz
If input grids are like that
[[5, 1, 1, 1, 5], [1, 1, 9, 1, 1], [1, 9, 9, 9, 1], [1, 1, 9, 1, 1], [5, 1, 1, 1, 5]],
then output grids?

=========","The pattern in this problem is that the input grid is mirrored both horizontally and vertically, and then the mirrored parts are attached to the original grid. The values in the mirrored parts are replaced with the value in the center of the original grid.

So, if the input grid is
[[5, 1, 1, 1, 5], [1, 1, 9, 1, 1], [1, 9, 9, 9, 1], [1, 1, 9, 1, 1], [5, 1, 1, 1, 5]],
then the output grid will be
[[5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [1, 9, 9, 9, 1, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [5, 5, 5, 5, 5, 9, 9, 1, 5, 9], [9, 9, 9, 9, 9, 9, 1, 1, 5, 9], [1, 1, 1, 1, 1, 1, 1, 5, 5, 9], [5, 5, 5, 5, 5, 5, 5, 5, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 1]].","[[5, 1, 1, 1, 5], [1, 1, 9, 1, 1], [1, 9, 9, 9, 1], [1, 1, 9, 1, 1], [5, 1, 1, 1, 5]],
then the output grid will be
[[5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [1, 9, 9, 9, 1, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [5, 5, 5, 5, 5, 9, 9, 1, 5, 9], [9, 9, 9, 9, 9, 9, 1, 1, 5, 9], [1, 1, 1, 1, 1, 1, 1, 5, 5, 9], [5, 5, 5, 5, 5, 5, 5, 5, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 1]]","[[5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [1, 9, 9, 9, 1, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [5, 5, 5, 5, 5, 9, 9, 1, 5, 9], [9, 9, 9, 9, 9, 9, 1, 1, 5, 9], [1, 1, 1, 1, 1, 1, 1, 5, 5, 9], [5, 5, 5, 5, 5, 5, 5, 5, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 1]]","[[5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [1, 9, 9, 9, 1, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [5, 5, 5, 5, 5, 9, 9, 1, 5, 9], [9, 9, 9, 9, 9, 9, 1, 1, 5, 9], [1, 1, 1, 1, 1, 1, 1, 5, 5, 9], [5, 5, 5, 5, 5, 5, 5, 5, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 1]]",True,False,Easy
3a301edc,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 5, 5, 5, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 5, 5, 5, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 5, 5, 5, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 5, 5, 5, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 1, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 1, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0], [0, 0, 1, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0], [0, 0, 1, 3, 3, 1, 3, 3, 1, 0, 0, 0, 0, 0], [0, 0, 1, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0], [0, 0, 1, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ",not_complete,not_complete,"[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 8, 8, 8, 8, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 8, 8, 8, 8, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 8, 8, 8, 8, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 8, 8, 8, 8, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Medium
3b4c2228,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[2, 2, 0, 3, 0, 0, 3], [2, 2, 0, 2, 2, 0, 0], [0, 0, 0, 2, 2, 0, 0], [2, 3, 3, 0, 0, 2, 2], [0, 3, 3, 0, 0, 2, 2], [0, 0, 0, 0, 3, 3, 0], [3, 0, 2, 0, 3, 3, 0]],
then this grids change to output grids below
[[1, 0, 0], [0, 1, 0], [0, 0, 0]].

Example 2
If input grids are like that
[[0, 3, 3, 0, 0], [0, 3, 3, 0, 0], [0, 0, 0, 0, 0], [2, 2, 0, 0, 2], [2, 2, 0, 0, 0], [0, 0, 0, 2, 2], [0, 0, 0, 2, 2]],
then this grids change to output grids below
[[1, 0, 0], [0, 0, 0], [0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0], [0, 3, 3, 0, 0], [0, 3, 3, 0, 0], [2, 0, 0, 0, 0], [0, 0, 0, 0, 3], [3, 3, 0, 0, 0], [3, 3, 0, 2, 2], [0, 0, 0, 2, 2]],
then output grids?

=========","The output grids would be [[1, 0, 0], [0, 1, 0], [0, 0, 0]].

The pattern in this problem is that the output grid is a 3x3 grid where the top left cell represents the count of 2x2 blocks of the number 3 in the input grid, the middle cell represents the count of 2x2 blocks of the number 2, and the rest of the cells are 0. 

In the quiz input, there are 1 block of 2x2 cells with the number 3 and 1 block of 2x2 cells with the number 2. Therefore, the output grid is [[1, 0, 0], [0, 1, 0], [0, 0, 0]].","[[1, 0, 0], [0, 1, 0], [0, 0, 0]].

The pattern in this problem is that the output grid is a 3x3 grid where the top left cell represents the count of 2x2 blocks of the number 3 in the input grid, the middle cell represents the count of 2x2 blocks of the number 2, and the rest of the cells are 0. 

In the quiz input, there are 1 block of 2x2 cells with the number 3 and 1 block of 2x2 cells with the number 2. Therefore, the output grid is [[1, 0, 0], [0, 1, 0], [0, 0, 0]]","[[1, 0, 0], [0, 1, 0], [0, 0, 0]]","[[1, 0, 0], [0, 1, 0], [0, 0, 0]]",True,False,Multiple solutions
3d31c5b3,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 5, 5, 5, 5, 0], [5, 5, 0, 5, 5, 5], [5, 5, 0, 5, 0, 0], [0, 0, 4, 0, 0, 0], [4, 0, 4, 4, 4, 0], [4, 0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 2], [2, 0, 0, 0, 0, 2], [0, 0, 0, 2, 0, 0], [0, 8, 0, 8, 0, 0], [0, 8, 0, 0, 0, 0], [0, 8, 0, 8, 0, 0]],
then this grids change to output grids below
[[2, 5, 5, 5, 5, 2], [5, 5, 4, 5, 5, 5], [5, 5, 0, 5, 0, 0]].

Example 2
If input grids are like that
[[5, 5, 0, 5, 5, 5], [0, 5, 0, 5, 0, 5], [0, 0, 0, 5, 5, 0], [0, 4, 4, 0, 4, 0], [0, 0, 0, 0, 0, 4], [0, 4, 0, 4, 0, 4], [2, 2, 2, 0, 0, 0], [0, 2, 2, 0, 2, 0], [2, 2, 2, 0, 2, 0], [8, 0, 8, 8, 8, 8], [0, 0, 8, 8, 8, 8], [0, 0, 0, 8, 0, 0]],
then this grids change to output grids below
[[5, 5, 4, 5, 5, 5], [0, 5, 8, 5, 8, 5], [2, 4, 2, 5, 5, 4]].

Quiz
If input grids are like that
[[5, 0, 5, 0, 0, 5], [0, 5, 0, 0, 0, 5], [5, 5, 5, 0, 0, 0], [0, 0, 0, 4, 0, 4], [0, 0, 0, 0, 0, 0], [4, 0, 0, 4, 0, 0], [2, 0, 2, 0, 2, 2], [2, 2, 0, 2, 2, 2], [2, 2, 2, 2, 2, 2], [0, 0, 8, 8, 0, 0], [0, 8, 0, 0, 8, 8], [0, 0, 0, 8, 0, 0]],
then output grids?

=========","The output grids would be:

[[5, 4, 5, 2, 2, 5], [2, 5, 2, 0, 8, 5], [5, 5, 5, 2, 2, 2]]. 

The pattern in this problem is that the first non-zero element in each column of the input grid is replaced by the first non-zero element in the same column of the next grid, and so on. The grids are then reduced to the size of the smallest grid.","[[5, 4, 5, 2, 2, 5], [2, 5, 2, 0, 8, 5], [5, 5, 5, 2, 2, 2]]","[[5, 4, 5, 2, 2, 5], [2, 5, 2, 0, 8, 5], [5, 5, 5, 2, 2, 2]]","[[5, 0, 5, 4, 2, 5], [2, 5, 0, 2, 8, 5], [5, 5, 5, 4, 2, 2]]",False,,Hard
3ed85e70,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 8, 8, 1, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 8, 8, 1, 3, 3, 3, 3, 3, 2, 4, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0]],
then this grids change to output grids below
[[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 8, 8, 1, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 8, 8, 1, 3, 3, 3, 3, 3, 2, 4, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 2, 4, 2, 0, 0, 0, 0, 0], [0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 2, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 4, 2, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0]].

Example 2
If input grids are like that
[[3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 2, 1, 2, 3, 3, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 4, 4, 4, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [8, 4, 4, 4, 8, 3, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [8, 4, 4, 4, 8, 3, 0, 0, 8, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [8, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 1, 3, 3, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 2, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [3, 1, 1, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 2, 2, 2, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 2, 2, 2, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0, 8, 4, 4, 4, 8, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 2, 1, 2, 3, 3, 0, 0, 0, 0, 0, 8, 4, 4, 4, 8, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 0], [3, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0, 8, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 4, 4, 4, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [8, 4, 4, 4, 8, 3, 0, 0, 8, 8, 0, 0, 1, 1, 1, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 1, 2, 1, 0, 0], [8, 4, 4, 4, 8, 3, 0, 0, 8, 8, 0, 0, 1, 2, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [8, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 8, 8, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 8, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 8, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 1, 3, 3, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 1, 1, 1, 0, 0, 0, 0], [3, 1, 2, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0], [3, 1, 1, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 2, 2, 2, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 1, 1, 1, 0, 3, 3, 3, 0, 0, 0, 2, 1, 2, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 8, 2, 2, 3, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 2, 2, 8, 3, 3, 3, 3, 3, 1, 6, 1, 3, 3, 3, 3, 3, 3, 3, 1, 4, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 4, 1, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",not_complete,not_complete,"[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6, 1, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 8, 2, 2, 3, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 2, 2, 8, 3, 3, 3, 3, 3, 1, 6, 1, 3, 3, 3, 3, 3, 3, 3, 1, 4, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 8, 8, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 4, 1, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]",False,,Tedious
414297c0,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 7, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 2, 4, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 2, 8, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 8, 1, 1, 1, 1, 7, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1], [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1], [1, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1], [1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1], [1, 2, 8, 2, 1, 1, 2, 7, 2, 1, 1], [1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 1, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 4, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[8, 8, 8, 8, 8, 8], [8, 2, 8, 8, 8, 8], [2, 1, 2, 8, 8, 8], [2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8], [8, 8, 2, 8, 2, 8], [8, 8, 8, 4, 2, 8], [8, 8, 2, 2, 2, 8]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 7, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 2, 2, 0, 0, 0], [0, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 0, 0, 0, 0, 8, 2, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 2, 2, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 7, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]

The pattern here is that the 4x4 square in the middle of the grid is preserved, while the rest of the grid is removed. The 2x2 square at the bottom of the grid is also preserved and moved up to join the 4x4 square.","[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 7, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]","[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 7, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]","[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 2, 1, 2, 4, 4, 4, 4, 4, 4, 2, 7, 2, 4], [4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 2, 2, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 2, 6, 4, 4, 4, 4, 4], [4, 2, 2, 4, 4, 4, 4, 4, 4, 4, 2, 4, 2, 2, 4], [2, 3, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 2], [2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2]]",False,,Medium
423a55dc,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 7, 7, 7, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

The pattern here is that the shape is rotated 90 degrees counterclockwise.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 7, 7, 7, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 7, 7, 7, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 7, 7, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Unfixed
42918530,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0], [0, 3, 0, 0, 0, 3, 0, 8, 0, 0, 0, 8, 0, 4, 0, 4, 0, 4, 0], [0, 3, 0, 0, 0, 3, 0, 8, 0, 0, 0, 8, 0, 4, 4, 4, 4, 4, 0], [0, 3, 0, 0, 0, 3, 0, 8, 0, 0, 0, 8, 0, 4, 0, 4, 0, 4, 0], [0, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 0, 7, 7, 7, 7, 7, 0], [0, 4, 0, 0, 0, 4, 0, 2, 0, 0, 0, 2, 0, 7, 0, 0, 0, 7, 0], [0, 4, 0, 0, 0, 4, 0, 2, 0, 0, 0, 2, 0, 7, 0, 0, 0, 7, 0], [0, 4, 0, 0, 0, 4, 0, 2, 0, 0, 0, 2, 0, 7, 0, 0, 0, 7, 0], [0, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0], [0, 3, 0, 0, 0, 3, 0, 8, 0, 0, 0, 8, 0, 4, 0, 4, 0, 4, 0], [0, 3, 0, 0, 0, 3, 0, 8, 0, 0, 0, 8, 0, 4, 4, 4, 4, 4, 0], [0, 3, 0, 0, 0, 3, 0, 8, 0, 0, 0, 8, 0, 4, 0, 4, 0, 4, 0], [0, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 0, 7, 7, 7, 7, 7, 0], [0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 2, 0, 7, 0, 0, 0, 7, 0], [0, 4, 4, 4, 4, 4, 0, 2, 0, 0, 0, 2, 0, 7, 0, 0, 0, 7, 0], [0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 2, 0, 7, 0, 0, 0, 7, 0], [0, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 0, 8, 8, 8, 8, 8, 0], [0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 4, 0, 8, 0, 0, 0, 8, 0], [0, 2, 2, 2, 0, 2, 0, 4, 0, 0, 0, 4, 0, 8, 0, 8, 0, 8, 0], [0, 2, 0, 0, 0, 2, 0, 4, 0, 0, 0, 4, 0, 8, 0, 0, 0, 8, 0], [0, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 0, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 1, 0], [0, 8, 0, 0, 0, 8, 0, 3, 0, 0, 0, 3, 0, 1, 0, 0, 0, 1, 0], [0, 8, 0, 0, 0, 8, 0, 3, 0, 3, 3, 3, 0, 1, 0, 0, 0, 1, 0], [0, 8, 0, 0, 0, 8, 0, 3, 0, 3, 0, 3, 0, 1, 0, 0, 0, 1, 0], [0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 0, 8, 8, 8, 8, 8, 0], [0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 4, 0, 8, 0, 0, 0, 8, 0], [0, 2, 2, 2, 0, 2, 0, 4, 0, 0, 0, 4, 0, 8, 0, 8, 0, 8, 0], [0, 2, 0, 0, 0, 2, 0, 4, 0, 0, 0, 4, 0, 8, 0, 0, 0, 8, 0], [0, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 0, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 1, 0], [0, 8, 0, 0, 0, 8, 0, 3, 0, 0, 0, 3, 0, 1, 0, 0, 0, 1, 0], [0, 8, 0, 8, 0, 8, 0, 3, 0, 3, 3, 3, 0, 1, 0, 0, 0, 1, 0], [0, 8, 0, 0, 0, 8, 0, 3, 0, 3, 0, 3, 0, 1, 0, 0, 0, 1, 0], [0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 0, 2, 0], [0, 2, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 2, 2, 0, 2, 0], [0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 0, 0, 8, 0, 3, 0, 0, 3, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 8, 8, 0, 8, 0, 3, 0, 3, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 8, 0, 8, 0, 3, 3, 0, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 6, 0, 6, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 6, 6, 6, 0, 2, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 0, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 0, 0, 8, 0, 3, 0, 0, 3, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 1, 0, 1, 0, 8, 8, 8, 0, 8, 0, 3, 0, 3, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 8, 0, 8, 0, 3, 3, 0, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 6, 0, 6, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 6, 6, 6, 0, 2, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 0, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 0, 0, 8, 0, 3, 0, 0, 3, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 1, 0, 1, 0, 8, 8, 8, 0, 8, 0, 3, 0, 3, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 8, 0, 8, 0, 3, 3, 0, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 6, 0, 6, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 6, 6, 6, 0, 2, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 0, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 0, 0, 8, 0, 3, 0, 0, 3, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 1, 0, 1, 0, 8, 8, 8, 0, 8, 0, 3, 0, 3, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 8, 0, 8, 0, 3, 3, 0, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 6, 0, 6, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 6, 6, 6, 0, 2, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 0, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 0, 0, 8, 0, 3, 0, 0, 3, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 8, 8, 0, 8, 0, 3, 0, 3, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 8, 0, 8, 0, 3, 3, 0, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 6, 0, 6, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 0, 2, 0], [0, 6, 0, 6, 6, 6, 0, 2, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 2, 2, 0, 2, 0], [0, 6, 0, 0, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 0, 2, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 3, 3, 0, 2, 0, 2, 0, 2, 0], [0, 8, 8, 8, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 3, 0, 3, 0, 2, 2, 2, 0, 2, 0], [0, 8, 0, 8, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 3, 0, 0, 3, 0, 2, 0, 2, 0, 2, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 2, 0, 2, 0, 6, 0, 6, 0, 6, 0], [0, 2, 2, 2, 0, 2, 0, 8, 8, 8, 0, 8, 0, 2, 2, 2, 0, 2, 0, 6, 0, 6, 6, 6, 0], [0, 2, 0, 2, 0, 2, 0, 8, 0, 8, 0, 8, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Medium
42a15761,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]],
then this grids change to output grids below
[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]].

Example 2
If input grids are like that
[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]],
then this grids change to output grids below
[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]].

Quiz
If input grids are like that
[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]],
then output grids?

=========","The output grids would be:

[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]]

The pattern here is that every second row starting from the second row, the 2's are shifted one position to the right, with the rightmost 2 wrapping around to the leftmost position.","[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]]","[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]]","[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]]",False,,Medium
4364c1c4,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8], [8, 8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8], [8, 8, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8], [8, 8, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8], [8, 8, 3, 3, 3, 8, 8, 3, 3, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
then this grids change to output grids below
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8], [8, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8], [8, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8], [8, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8], [8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8], [8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8], [8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8], [8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8], [8, 8, 8, 3, 3, 3, 8, 8, 3, 3, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]].

Example 2
If input grids are like that
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 1, 1, 1, 4, 4, 4, 1, 1, 1], [1, 1, 4, 1, 1, 1, 4, 4, 4, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1], [1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
then this grids change to output grids below
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 1, 1, 1, 4, 4, 4, 1, 1, 1, 1], [1, 4, 1, 1, 1, 4, 4, 4, 1, 1, 1, 1], [1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1], [1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1], [1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]].

Quiz
If input grids are like that
[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8], [8, 8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8], [8, 8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8], [8, 8, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 4, 4, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 4, 8, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
then output grids?

=========","The output grids would be:

[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 4, 4, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 4, 8, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]

The pattern here is that the objects are shifted to the left by one cell.","[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 4, 4, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 4, 8, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]","[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 4, 4, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 4, 8, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]","[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 4, 8, 4, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]",False,,Medium
456873bc,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 8, 2, 2, 0, 0, 2, 8, 2, 0, 0, 2, 2, 8], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [8, 2, 2, 0, 0, 2, 8, 2, 0, 0, 2, 2, 8, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 2, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[2, 2, 0, 0, 2, 2, 0, 0, 3, 3, 3], [2, 0, 2, 0, 2, 0, 2, 0, 3, 3, 3], [0, 2, 0, 0, 0, 2, 0, 0, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3], [2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3], [2, 0, 2, 0, 0, 0, 0, 0, 3, 3, 3], [0, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3], [0, 0, 0, 0, 2, 2, 0, 0, 3, 3, 3], [0, 0, 0, 0, 2, 0, 2, 0, 3, 3, 3], [0, 0, 0, 0, 0, 2, 0, 0, 3, 3, 3]],
then this grids change to output grids below
[[8, 2, 0, 0, 2, 8, 0, 0, 0, 0, 0], [2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0], [0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0], [8, 0, 2, 0, 0, 0, 0, 0, 2, 0, 8], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2], [2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2], [2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2], [2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2]],
then output grids?

=========","The output grids would be:

[[8, 2, 2, 2, 0, 2, 2, 2, 8, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2], [2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2], [2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2], [2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2]]

The pattern here is that the color 2 is replaced by color 8 in the first and last column of the first and last row of each 5x5 square.","[[8, 2, 2, 2, 0, 2, 2, 2, 8, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2], [2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2], [2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2], [2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2]]","[[8, 2, 2, 2, 0, 2, 2, 2, 8, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2], [2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2], [2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2], [2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2]]","[[8, 2, 2, 2, 0, 2, 8, 2, 2, 0, 2, 2, 8, 2, 0, 2, 2, 2, 8], [2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2], [2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [8, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 8], [2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2], [8, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 8, 2, 0, 2, 0, 2, 8]]",False,,Hard
45737921,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 4, 0, 0, 0, 0, 0, 0], [0, 4, 8, 4, 0, 0, 0, 0, 0, 0], [0, 8, 8, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 2, 2, 0], [0, 0, 0, 0, 0, 0, 3, 3, 2, 0], [0, 0, 0, 0, 0, 0, 3, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 6, 3, 0, 0, 0, 0, 0], [0, 0, 3, 6, 3, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 8, 0, 0, 0, 0, 0, 0], [0, 8, 4, 8, 0, 0, 0, 0, 0, 0], [0, 4, 4, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 3, 3, 0], [0, 0, 0, 0, 0, 0, 2, 2, 3, 0], [0, 0, 0, 0, 0, 0, 2, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 3, 6, 0, 0, 0, 0, 0], [0, 0, 6, 3, 6, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0], [0, 5, 8, 5, 0, 0, 0], [0, 5, 8, 5, 0, 0, 0], [0, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0], [0, 8, 5, 8, 0, 0, 0], [0, 8, 5, 8, 0, 0, 0], [0, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 2, 2, 0, 0, 0, 0, 0], [0, 3, 3, 2, 0, 0, 0, 0, 0], [0, 3, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that the colors of the objects in the grid are swapped. The color in the center remains the same, while the colors on the sides are swapped. 

So, if the input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 2, 2, 0, 0, 0, 0, 0], [0, 3, 3, 2, 0, 0, 0, 0, 0], [0, 3, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],

then the output grids would be
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 2, 0, 0, 0, 0, 0], [0, 2, 2, 3, 0, 0, 0, 0, 0], [0, 2, 3, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 1, 6, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 6, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]].","[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 2, 2, 0, 0, 0, 0, 0], [0, 3, 3, 2, 0, 0, 0, 0, 0], [0, 3, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],

then the output grids would be
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 2, 0, 0, 0, 0, 0], [0, 2, 2, 3, 0, 0, 0, 0, 0], [0, 2, 3, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 1, 6, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 6, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 2, 0, 0, 0, 0, 0], [0, 2, 2, 3, 0, 0, 0, 0, 0], [0, 2, 3, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 1, 6, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 6, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 3, 0, 0, 0, 0, 0], [0, 2, 2, 3, 0, 0, 0, 0, 0], [0, 2, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 6, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Easy
45bbe264,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 2, 8, 8, 8, 8], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0]]

The pattern is that the row with the highest number (8, 4, 1) is filled with that number, except for the intersection with the other numbers, which is filled with 2. The rest of the grid is filled with the original numbers.","[[0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 2, 8, 8, 8, 8], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0]]","[[0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 2, 8, 8, 8, 8], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], 
 [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0]]","[[0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 2, 8, 8, 8, 8], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [4, 4, 4, 2, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0]]",False,,Medium
477d2879,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3, 3], [3, 3, 3, 3, 2, 8, 8, 2, 3, 3, 3, 3, 3], [3, 3, 2, 2, 2, 8, 8, 2, 2, 3, 3, 3, 3], [3, 3, 2, 8, 8, 8, 8, 8, 2, 3, 3, 3, 3], [3, 3, 2, 8, 2, 2, 2, 8, 2, 3, 3, 3, 3], [3, 3, 2, 8, 2, 3, 2, 8, 2, 3, 3, 3, 3], [3, 3, 2, 8, 2, 3, 2, 8, 2, 2, 3, 3, 3], [3, 2, 2, 8, 2, 3, 2, 8, 8, 2, 3, 3, 3], [3, 2, 8, 8, 2, 3, 2, 8, 2, 2, 3, 3, 3], [3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 3, 1, 1, 0, 0, 1, 8, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 6, 1, 1, 0], [0, 7, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4], [2, 2, 2, 3, 3, 3, 4, 4, 8, 8, 8, 4, 4], [2, 2, 2, 3, 4, 4, 4, 4, 8, 6, 8, 4, 4], [3, 3, 3, 3, 4, 4, 4, 4, 8, 6, 8, 8, 4], [7, 7, 3, 4, 4, 4, 4, 4, 8, 6, 6, 8, 4], [7, 7, 3, 4, 4, 4, 4, 8, 8, 6, 8, 8, 4], [7, 7, 3, 3, 3, 3, 4, 8, 6, 6, 8, 4, 4], [7, 7, 7, 7, 7, 3, 4, 8, 6, 6, 8, 8, 4], [7, 7, 7, 3, 3, 3, 4, 8, 6, 6, 6, 8, 4], [7, 7, 7, 3, 4, 4, 4, 8, 6, 6, 8, 8, 4], [7, 7, 3, 3, 4, 4, 4, 8, 8, 8, 8, 4, 4], [7, 7, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [7, 7, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]].

Quiz
If input grids are like that
[[0, 5, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 7, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[5, 5, 5, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4], [5, 5, 5, 3, 4, 4, 2, 2, 2, 2, 2, 4, 4], [5, 5, 2, 2, 4, 4, 2, 6, 6, 6, 2, 4, 4], [2, 2, 2, 4, 4, 4, 2, 2, 6, 6, 2, 2, 4], [5, 5, 7, 4, 4, 4, 4, 2, 6, 6, 6, 2, 4], [5, 5, 5, 5, 5, 5, 5, 2, 6, 8, 6, 2, 4], [5, 5, 5, 5, 5, 5, 5, 2, 6, 6, 6, 2, 4], [5, 5, 5, 5, 5, 2, 2, 2, 6, 6, 6, 6, 4], [5, 5, 5, 5, 5, 2, 6, 6, 6, 6, 6, 2, 4], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4], [5, 5, 5, 5, 5, 5, 5, 5, 2, 6, 6, 6, 4], [5, 5, 5, 5, 5, 5, 5, 2, 2, 6, 6, 6, 4], [5, 5, 5, 5, 5, 5, 5, 2, 6, 6, 6, 6, 4]].

The pattern here is that the grid is divided into regions, each region is filled with the highest number in that region. The regions are defined by the 1s in the input grid.","[[5, 5, 5, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4], [5, 5, 5, 3, 4, 4, 2, 2, 2, 2, 2, 4, 4], [5, 5, 2, 2, 4, 4, 2, 6, 6, 6, 2, 4, 4], [2, 2, 2, 4, 4, 4, 2, 2, 6, 6, 2, 2, 4], [5, 5, 7, 4, 4, 4, 4, 2, 6, 6, 6, 2, 4], [5, 5, 5, 5, 5, 5, 5, 2, 6, 8, 6, 2, 4], [5, 5, 5, 5, 5, 5, 5, 2, 6, 6, 6, 2, 4], [5, 5, 5, 5, 5, 2, 2, 2, 6, 6, 6, 6, 4], [5, 5, 5, 5, 5, 2, 6, 6, 6, 6, 6, 2, 4], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4], [5, 5, 5, 5, 5, 5, 5, 5, 2, 6, 6, 6, 4], [5, 5, 5, 5, 5, 5, 5, 2, 2, 6, 6, 6, 4], [5, 5, 5, 5, 5, 5, 5, 2, 6, 6, 6, 6, 4]]","[[5, 5, 5, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4], [5, 5, 5, 3, 4, 4, 2, 2, 2, 2, 2, 4, 4], [5, 5, 2, 2, 4, 4, 2, 6, 6, 6, 2, 4, 4], [2, 2, 2, 4, 4, 4, 2, 2, 6, 6, 2, 2, 4], [5, 5, 7, 4, 4, 4, 4, 2, 6, 6, 6, 2, 4], [5, 5, 5, 5, 5, 5, 5, 2, 6, 8, 6, 2, 4], [5, 5, 5, 5, 5, 5, 5, 2, 6, 6, 6, 2, 4], [5, 5, 5, 5, 5, 2, 2, 2, 6, 6, 6, 6, 4], [5, 5, 5, 5, 5, 2, 6, 6, 6, 6, 6, 2, 4], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4], [5, 5, 5, 5, 5, 5, 5, 5, 2, 6, 6, 6, 4], [5, 5, 5, 5, 5, 5, 5, 2, 2, 6, 6, 6, 4], [5, 5, 5, 5, 5, 5, 5, 2, 6, 6, 6, 6, 4]]","[[5, 5, 5, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7], [5, 5, 5, 3, 7, 7, 6, 6, 6, 6, 6, 7, 7], [5, 5, 3, 3, 7, 7, 6, 8, 8, 8, 6, 7, 7], [3, 3, 3, 7, 7, 7, 6, 6, 8, 8, 6, 6, 7], [7, 7, 7, 7, 7, 7, 7, 6, 8, 8, 8, 6, 7], [7, 7, 7, 7, 7, 7, 7, 6, 8, 8, 8, 6, 7], [7, 7, 7, 7, 7, 7, 7, 6, 8, 8, 8, 6, 7], [7, 7, 7, 7, 7, 6, 6, 6, 8, 8, 8, 6, 7], [7, 7, 7, 7, 7, 6, 8, 8, 8, 8, 8, 6, 7], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7], [4, 4, 4, 4, 4, 4, 4, 4, 6, 7, 7, 7, 7], [4, 4, 4, 4, 4, 4, 4, 6, 6, 7, 7, 7, 7], [4, 4, 4, 4, 4, 4, 4, 6, 7, 7, 7, 7, 7]]",False,,Medium
47996f11,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[8, 9, 5, 5, 9, 4, 8, 8, 4, 5, 7, 7, 3, 6, 6, 6, 7, 7, 1, 3, 7, 7, 5, 4, 8, 8, 4, 9, 5, 5], [9, 8, 5, 8, 4, 9, 8, 8, 5, 4, 7, 7, 1, 6, 6, 6, 9, 7, 7, 1, 7, 7, 4, 5, 8, 8, 9, 4, 8, 5], [5, 5, 2, 2, 8, 8, 1, 7, 7, 7, 7, 7, 7, 6, 6, 6, 9, 9, 7, 7, 7, 7, 7, 7, 7, 1, 8, 8, 2, 2], [5, 8, 2, 9, 8, 8, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9, 2], [9, 4, 8, 8, 8, 2, 4, 4, 3, 1, 7, 7, 9, 3, 2, 5, 5, 2, 3, 9, 7, 7, 1, 3, 4, 4, 2, 8, 8, 8], [4, 9, 8, 8, 2, 8, 4, 1, 1, 7, 7, 9, 3, 8, 5, 2, 2, 5, 8, 3, 9, 7, 7, 1, 1, 4, 8, 2, 8, 8], [8, 8, 1, 7, 4, 4, 8, 7, 7, 7, 9, 9, 2, 5, 5, 4, 4, 5, 5, 2, 9, 9, 7, 7, 7, 8, 4, 4, 7, 1], [8, 8, 7, 7, 4, 1, 7, 8, 7, 9, 9, 9, 5, 2, 4, 5, 5, 4, 2, 5, 9, 9, 9, 7, 8, 7, 1, 4, 7, 7], [4, 5, 7, 7, 3, 1, 7, 7, 7, 7, 4, 4, 9, 1, 2, 2, 2, 2, 1, 9, 4, 4, 7, 7, 7, 7, 1, 3, 7, 7], [5, 4, 7, 7, 1, 7, 7, 9, 7, 7, 4, 9, 1, 7, 2, 2, 2, 2, 7, 1, 9, 4, 7, 7, 9, 7, 7, 1, 7, 7], [7, 7, 7, 7, 7, 7, 9, 9, 4, 4, 4, 5, 2, 2, 8, 3, 3, 8, 2, 2, 5, 4, 4, 4, 9, 9, 7, 7, 7, 7], [7, 7, 7, 7, 7, 9, 9, 9, 4, 9, 5, 5, 2, 2, 3, 8, 8, 3, 2, 2, 5, 5, 9, 4, 9, 9, 9, 7, 7, 7], [3, 1, 7, 7, 9, 3, 2, 5, 9, 1, 2, 2, 5, 5, 1, 1, 1, 1, 5, 5, 2, 2, 1, 9, 5, 2, 3, 9, 7, 7], [1, 7, 7, 9, 3, 8, 5, 2, 1, 7, 2, 2, 5, 2, 1, 7, 7, 1, 2, 5, 2, 2, 7, 1, 2, 5, 8, 3, 6, 6], [7, 7, 9, 9, 2, 5, 5, 4, 2, 2, 8, 3, 1, 1, 8, 2, 2, 8, 1, 1, 3, 8, 2, 2, 4, 5, 5, 2, 6, 6], [7, 9, 9, 9, 5, 2, 4, 5, 2, 2, 3, 8, 1, 7, 2, 3, 3, 2, 7, 1, 8, 3, 2, 2, 5, 4, 2, 5, 6, 6], [7, 9, 9, 9, 5, 2, 4, 5, 2, 2, 3, 8, 1, 7, 2, 3, 3, 2, 7, 1, 8, 3, 2, 2, 5, 4, 2, 5, 6, 6], [7, 7, 9, 9, 2, 5, 5, 4, 2, 2, 8, 3, 1, 1, 8, 2, 2, 8, 1, 1, 3, 8, 2, 2, 4, 5, 5, 2, 6, 6], [1, 7, 7, 9, 3, 8, 5, 2, 1, 7, 2, 2, 5, 2, 1, 7, 7, 1, 2, 5, 2, 2, 7, 1, 2, 5, 8, 3, 6, 6], [3, 1, 7, 7, 9, 3, 2, 5, 9, 1, 2, 2, 5, 5, 1, 1, 1, 1, 5, 5, 2, 2, 1, 9, 5, 2, 3, 9, 7, 7], [7, 7, 7, 7, 7, 9, 9, 9, 4, 9, 5, 5, 2, 2, 3, 8, 8, 3, 2, 2, 5, 5, 9, 4, 9, 9, 9, 7, 7, 6], [7, 7, 7, 7, 7, 7, 9, 9, 4, 4, 4, 5, 2, 2, 8, 3, 3, 8, 2, 2, 5, 4, 4, 4, 9, 9, 7, 7, 7, 6], [5, 4, 7, 7, 1, 7, 7, 9, 7, 7, 4, 9, 1, 7, 2, 2, 2, 2, 7, 1, 9, 4, 7, 7, 9, 7, 7, 1, 7, 6], [4, 5, 7, 7, 3, 1, 7, 7, 7, 7, 4, 4, 9, 1, 2, 2, 2, 2, 1, 9, 4, 4, 7, 7, 7, 7, 1, 3, 7, 6], [8, 8, 7, 7, 4, 1, 7, 8, 7, 9, 9, 9, 5, 2, 4, 5, 5, 4, 2, 5, 9, 9, 9, 6, 6, 7, 1, 4, 7, 6], [8, 8, 1, 7, 4, 4, 8, 7, 7, 7, 9, 9, 2, 5, 5, 4, 4, 5, 5, 2, 9, 9, 7, 6, 6, 8, 4, 4, 7, 6], [4, 9, 8, 8, 2, 8, 4, 1, 1, 7, 7, 9, 3, 8, 5, 2, 2, 5, 8, 3, 9, 7, 7, 6, 6, 4, 8, 2, 8, 8], [9, 4, 8, 8, 8, 2, 4, 4, 3, 1, 7, 7, 9, 3, 2, 5, 5, 2, 3, 9, 7, 7, 1, 6, 6, 4, 2, 8, 8, 8], [5, 8, 2, 9, 8, 8, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 6, 6, 7, 8, 8, 9, 2], [5, 5, 2, 2, 8, 8, 1, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 1, 8, 8, 2, 2]],
then this grids change to output grids below
[[8, 9, 5, 5, 9, 4, 8, 8, 4, 5, 7, 7, 3, 1, 7, 7, 7, 7, 1, 3, 7, 7, 5, 4, 8, 8, 4, 9, 5, 5], [9, 8, 5, 8, 4, 9, 8, 8, 5, 4, 7, 7, 1, 7, 7, 9, 9, 7, 7, 1, 7, 7, 4, 5, 8, 8, 9, 4, 8, 5], [5, 5, 2, 2, 8, 8, 1, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 1, 8, 8, 2, 2], [5, 8, 2, 9, 8, 8, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9, 2], [9, 4, 8, 8, 8, 2, 4, 4, 3, 1, 7, 7, 9, 3, 2, 5, 5, 2, 3, 9, 7, 7, 1, 3, 4, 4, 2, 8, 8, 8], [4, 9, 8, 8, 2, 8, 4, 1, 1, 7, 7, 9, 3, 8, 5, 2, 2, 5, 8, 3, 9, 7, 7, 1, 1, 4, 8, 2, 8, 8], [8, 8, 1, 7, 4, 4, 8, 7, 7, 7, 9, 9, 2, 5, 5, 4, 4, 5, 5, 2, 9, 9, 7, 7, 7, 8, 4, 4, 7, 1], [8, 8, 7, 7, 4, 1, 7, 8, 7, 9, 9, 9, 5, 2, 4, 5, 5, 4, 2, 5, 9, 9, 9, 7, 8, 7, 1, 4, 7, 7], [4, 5, 7, 7, 3, 1, 7, 7, 7, 7, 4, 4, 9, 1, 2, 2, 2, 2, 1, 9, 4, 4, 7, 7, 7, 7, 1, 3, 7, 7], [5, 4, 7, 7, 1, 7, 7, 9, 7, 7, 4, 9, 1, 7, 2, 2, 2, 2, 7, 1, 9, 4, 7, 7, 9, 7, 7, 1, 7, 7], [7, 7, 7, 7, 7, 7, 9, 9, 4, 4, 4, 5, 2, 2, 8, 3, 3, 8, 2, 2, 5, 4, 4, 4, 9, 9, 7, 7, 7, 7], [7, 7, 7, 7, 7, 9, 9, 9, 4, 9, 5, 5, 2, 2, 3, 8, 8, 3, 2, 2, 5, 5, 9, 4, 9, 9, 9, 7, 7, 7], [3, 1, 7, 7, 9, 3, 2, 5, 9, 1, 2, 2, 5, 5, 1, 1, 1, 1, 5, 5, 2, 2, 1, 9, 5, 2, 3, 9, 7, 7], [1, 7, 7, 9, 3, 8, 5, 2, 1, 7, 2, 2, 5, 2, 1, 7, 7, 1, 2, 5, 2, 2, 7, 1, 2, 5, 8, 3, 9, 7], [7, 7, 9, 9, 2, 5, 5, 4, 2, 2, 8, 3, 1, 1, 8, 2, 2, 8, 1, 1, 3, 8, 2, 2, 4, 5, 5, 2, 9, 9], [7, 9, 9, 9, 5, 2, 4, 5, 2, 2, 3, 8, 1, 7, 2, 3, 3, 2, 7, 1, 8, 3, 2, 2, 5, 4, 2, 5, 9, 9], [7, 9, 9, 9, 5, 2, 4, 5, 2, 2, 3, 8, 1, 7, 2, 3, 3, 2, 7, 1, 8, 3, 2, 2, 5, 4, 2, 5, 9, 9], [7, 7, 9, 9, 2, 5, 5, 4, 2, 2, 8, 3, 1, 1, 8, 2, 2, 8, 1, 1, 3, 8, 2, 2, 4, 5, 5, 2, 9, 9], [1, 7, 7, 9, 3, 8, 5, 2, 1, 7, 2, 2, 5, 2, 1, 7, 7, 1, 2, 5, 2, 2, 7, 1, 2, 5, 8, 3, 9, 7], [3, 1, 7, 7, 9, 3, 2, 5, 9, 1, 2, 2, 5, 5, 1, 1, 1, 1, 5, 5, 2, 2, 1, 9, 5, 2, 3, 9, 7, 7], [7, 7, 7, 7, 7, 9, 9, 9, 4, 9, 5, 5, 2, 2, 3, 8, 8, 3, 2, 2, 5, 5, 9, 4, 9, 9, 9, 7, 7, 7], [7, 7, 7, 7, 7, 7, 9, 9, 4, 4, 4, 5, 2, 2, 8, 3, 3, 8, 2, 2, 5, 4, 4, 4, 9, 9, 7, 7, 7, 7], [5, 4, 7, 7, 1, 7, 7, 9, 7, 7, 4, 9, 1, 7, 2, 2, 2, 2, 7, 1, 9, 4, 7, 7, 9, 7, 7, 1, 7, 7], [4, 5, 7, 7, 3, 1, 7, 7, 7, 7, 4, 4, 9, 1, 2, 2, 2, 2, 1, 9, 4, 4, 7, 7, 7, 7, 1, 3, 7, 7], [8, 8, 7, 7, 4, 1, 7, 8, 7, 9, 9, 9, 5, 2, 4, 5, 5, 4, 2, 5, 9, 9, 9, 7, 8, 7, 1, 4, 7, 7], [8, 8, 1, 7, 4, 4, 8, 7, 7, 7, 9, 9, 2, 5, 5, 4, 4, 5, 5, 2, 9, 9, 7, 7, 7, 8, 4, 4, 7, 1], [4, 9, 8, 8, 2, 8, 4, 1, 1, 7, 7, 9, 3, 8, 5, 2, 2, 5, 8, 3, 9, 7, 7, 1, 1, 4, 8, 2, 8, 8], [9, 4, 8, 8, 8, 2, 4, 4, 3, 1, 7, 7, 9, 3, 2, 5, 5, 2, 3, 9, 7, 7, 1, 3, 4, 4, 2, 8, 8, 8], [5, 8, 2, 9, 8, 8, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9, 2], [5, 5, 2, 2, 8, 8, 1, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 1, 8, 8, 2, 2]].

Example 2
If input grids are like that
[[9, 3, 7, 7, 3, 3, 9, 4, 3, 3, 5, 5, 7, 1, 2, 3, 3, 2, 1, 7, 5, 6, 6, 6, 6, 6, 6, 3, 7, 7], [3, 9, 7, 9, 3, 9, 4, 9, 3, 3, 5, 5, 1, 1, 3, 3, 3, 3, 1, 1, 5, 6, 6, 6, 6, 6, 6, 3, 9, 7], [7, 7, 5, 3, 9, 4, 8, 5, 5, 5, 3, 3, 2, 3, 1, 1, 1, 1, 3, 2, 3, 3, 5, 5, 5, 8, 4, 9, 3, 5], [7, 9, 3, 3, 4, 9, 5, 8, 5, 5, 3, 3, 3, 3, 1, 7, 7, 1, 3, 3, 3, 3, 5, 5, 8, 5, 9, 4, 3, 3], [3, 3, 9, 4, 3, 5, 7, 2, 7, 1, 2, 3, 7, 6, 6, 6, 4, 7, 3, 7, 3, 2, 1, 7, 2, 7, 5, 3, 4, 9], [3, 9, 4, 9, 5, 5, 2, 1, 1, 1, 3, 3, 3, 6, 6, 6, 7, 4, 7, 3, 3, 3, 1, 1, 1, 2, 5, 5, 9, 4], [9, 4, 8, 5, 7, 2, 4, 4, 2, 3, 1, 1, 7, 6, 6, 6, 9, 5, 4, 7, 1, 1, 3, 2, 4, 4, 2, 7, 5, 8], [4, 9, 5, 8, 2, 1, 4, 2, 3, 3, 1, 7, 4, 6, 6, 6, 1, 9, 7, 4, 7, 1, 3, 3, 2, 4, 1, 2, 8, 5], [3, 3, 5, 5, 7, 1, 2, 3, 3, 3, 1, 4, 8, 5, 8, 3, 3, 8, 5, 8, 4, 1, 3, 3, 3, 2, 1, 7, 5, 5], [3, 3, 5, 5, 1, 1, 3, 3, 3, 3, 4, 1, 5, 8, 3, 2, 2, 3, 8, 5, 1, 4, 3, 3, 3, 3, 1, 1, 5, 5], [5, 5, 3, 3, 2, 3, 1, 1, 1, 4, 9, 7, 8, 3, 7, 7, 7, 7, 3, 8, 7, 9, 4, 1, 1, 1, 3, 2, 3, 3], [5, 5, 3, 3, 3, 3, 1, 7, 4, 1, 7, 9, 3, 2, 7, 5, 5, 7, 2, 3, 9, 7, 1, 4, 7, 1, 3, 3, 3, 3], [7, 1, 2, 3, 7, 3, 7, 4, 8, 5, 8, 3, 8, 1, 4, 8, 8, 4, 1, 8, 3, 8, 5, 8, 4, 7, 3, 7, 3, 2], [1, 1, 3, 3, 3, 7, 4, 7, 5, 8, 3, 2, 1, 1, 8, 4, 4, 8, 1, 6, 6, 6, 6, 6, 6, 4, 7, 3, 3, 3], [2, 3, 1, 1, 7, 4, 5, 9, 8, 3, 7, 7, 4, 8, 7, 7, 7, 7, 8, 6, 6, 6, 6, 6, 6, 5, 4, 7, 1, 1], [3, 3, 1, 7, 4, 7, 9, 1, 3, 2, 7, 5, 8, 4, 7, 1, 1, 7, 4, 8, 5, 7, 2, 3, 1, 9, 7, 4, 7, 1], [3, 3, 1, 7, 4, 7, 9, 1, 3, 2, 7, 5, 8, 4, 7, 1, 1, 7, 4, 8, 5, 7, 2, 3, 1, 9, 7, 4, 7, 1], [2, 3, 1, 1, 7, 4, 5, 9, 8, 3, 7, 7, 4, 8, 7, 7, 7, 7, 8, 4, 7, 7, 3, 8, 9, 5, 4, 7, 1, 1], [1, 1, 3, 3, 3, 7, 4, 7, 5, 8, 3, 2, 1, 1, 8, 4, 4, 8, 1, 1, 2, 3, 8, 5, 7, 4, 7, 3, 3, 3], [7, 1, 2, 3, 7, 3, 7, 4, 8, 5, 8, 3, 8, 1, 4, 8, 8, 4, 1, 8, 3, 8, 5, 8, 4, 7, 3, 7, 3, 2], [5, 5, 3, 3, 3, 3, 1, 7, 4, 1, 7, 9, 3, 2, 7, 5, 5, 7, 2, 3, 9, 7, 1, 4, 7, 1, 3, 3, 3, 3], [5, 5, 3, 3, 2, 3, 1, 1, 1, 4, 9, 7, 8, 3, 7, 7, 7, 7, 3, 8, 7, 9, 4, 1, 1, 1, 3, 2, 3, 3], [3, 3, 5, 5, 1, 1, 3, 3, 3, 3, 4, 1, 5, 8, 3, 2, 2, 3, 8, 5, 1, 4, 3, 3, 3, 3, 1, 1, 5, 5], [3, 3, 5, 5, 7, 1, 2, 3, 3, 3, 1, 4, 8, 5, 8, 3, 3, 8, 5, 8, 4, 1, 3, 3, 3, 2, 1, 7, 5, 5], [4, 9, 5, 8, 2, 1, 4, 2, 3, 3, 1, 7, 4, 7, 9, 1, 1, 9, 7, 4, 7, 1, 3, 3, 2, 4, 1, 2, 8, 5], [9, 4, 8, 5, 7, 2, 4, 4, 2, 3, 1, 1, 7, 4, 5, 9, 9, 5, 4, 7, 1, 1, 3, 2, 4, 4, 2, 7, 5, 8], [3, 9, 4, 9, 5, 5, 2, 1, 1, 1, 3, 3, 3, 7, 4, 7, 7, 4, 7, 3, 3, 3, 1, 1, 1, 2, 5, 5, 9, 4], [3, 3, 9, 4, 3, 6, 6, 6, 7, 1, 2, 3, 7, 3, 7, 4, 4, 7, 3, 7, 3, 2, 1, 7, 2, 7, 5, 3, 4, 9], [7, 9, 3, 3, 4, 6, 6, 6, 5, 5, 3, 3, 3, 3, 1, 7, 7, 1, 3, 3, 3, 3, 5, 5, 8, 5, 9, 4, 3, 3], [7, 7, 5, 3, 9, 6, 6, 6, 5, 5, 3, 3, 2, 3, 1, 1, 1, 1, 3, 2, 3, 3, 5, 5, 5, 8, 4, 9, 3, 5]],
then this grids change to output grids below
[[9, 3, 7, 7, 3, 3, 9, 4, 3, 3, 5, 5, 7, 1, 2, 3, 3, 2, 1, 7, 5, 5, 3, 3, 4, 9, 3, 3, 7, 7], [3, 9, 7, 9, 3, 9, 4, 9, 3, 3, 5, 5, 1, 1, 3, 3, 3, 3, 1, 1, 5, 5, 3, 3, 9, 4, 9, 3, 9, 7], [7, 7, 5, 3, 9, 4, 8, 5, 5, 5, 3, 3, 2, 3, 1, 1, 1, 1, 3, 2, 3, 3, 5, 5, 5, 8, 4, 9, 3, 5], [7, 9, 3, 3, 4, 9, 5, 8, 5, 5, 3, 3, 3, 3, 1, 7, 7, 1, 3, 3, 3, 3, 5, 5, 8, 5, 9, 4, 3, 3], [3, 3, 9, 4, 3, 5, 7, 2, 7, 1, 2, 3, 7, 3, 7, 4, 4, 7, 3, 7, 3, 2, 1, 7, 2, 7, 5, 3, 4, 9], [3, 9, 4, 9, 5, 5, 2, 1, 1, 1, 3, 3, 3, 7, 4, 7, 7, 4, 7, 3, 3, 3, 1, 1, 1, 2, 5, 5, 9, 4], [9, 4, 8, 5, 7, 2, 4, 4, 2, 3, 1, 1, 7, 4, 5, 9, 9, 5, 4, 7, 1, 1, 3, 2, 4, 4, 2, 7, 5, 8], [4, 9, 5, 8, 2, 1, 4, 2, 3, 3, 1, 7, 4, 7, 9, 1, 1, 9, 7, 4, 7, 1, 3, 3, 2, 4, 1, 2, 8, 5], [3, 3, 5, 5, 7, 1, 2, 3, 3, 3, 1, 4, 8, 5, 8, 3, 3, 8, 5, 8, 4, 1, 3, 3, 3, 2, 1, 7, 5, 5], [3, 3, 5, 5, 1, 1, 3, 3, 3, 3, 4, 1, 5, 8, 3, 2, 2, 3, 8, 5, 1, 4, 3, 3, 3, 3, 1, 1, 5, 5], [5, 5, 3, 3, 2, 3, 1, 1, 1, 4, 9, 7, 8, 3, 7, 7, 7, 7, 3, 8, 7, 9, 4, 1, 1, 1, 3, 2, 3, 3], [5, 5, 3, 3, 3, 3, 1, 7, 4, 1, 7, 9, 3, 2, 7, 5, 5, 7, 2, 3, 9, 7, 1, 4, 7, 1, 3, 3, 3, 3], [7, 1, 2, 3, 7, 3, 7, 4, 8, 5, 8, 3, 8, 1, 4, 8, 8, 4, 1, 8, 3, 8, 5, 8, 4, 7, 3, 7, 3, 2], [1, 1, 3, 3, 3, 7, 4, 7, 5, 8, 3, 2, 1, 1, 8, 4, 4, 8, 1, 1, 2, 3, 8, 5, 7, 4, 7, 3, 3, 3], [2, 3, 1, 1, 7, 4, 5, 9, 8, 3, 7, 7, 4, 8, 7, 7, 7, 7, 8, 4, 7, 7, 3, 8, 9, 5, 4, 7, 1, 1], [3, 3, 1, 7, 4, 7, 9, 1, 3, 2, 7, 5, 8, 4, 7, 1, 1, 7, 4, 8, 5, 7, 2, 3, 1, 9, 7, 4, 7, 1], [3, 3, 1, 7, 4, 7, 9, 1, 3, 2, 7, 5, 8, 4, 7, 1, 1, 7, 4, 8, 5, 7, 2, 3, 1, 9, 7, 4, 7, 1], [2, 3, 1, 1, 7, 4, 5, 9, 8, 3, 7, 7, 4, 8, 7, 7, 7, 7, 8, 4, 7, 7, 3, 8, 9, 5, 4, 7, 1, 1], [1, 1, 3, 3, 3, 7, 4, 7, 5, 8, 3, 2, 1, 1, 8, 4, 4, 8, 1, 1, 2, 3, 8, 5, 7, 4, 7, 3, 3, 3], [7, 1, 2, 3, 7, 3, 7, 4, 8, 5, 8, 3, 8, 1, 4, 8, 8, 4, 1, 8, 3, 8, 5, 8, 4, 7, 3, 7, 3, 2], [5, 5, 3, 3, 3, 3, 1, 7, 4, 1, 7, 9, 3, 2, 7, 5, 5, 7, 2, 3, 9, 7, 1, 4, 7, 1, 3, 3, 3, 3], [5, 5, 3, 3, 2, 3, 1, 1, 1, 4, 9, 7, 8, 3, 7, 7, 7, 7, 3, 8, 7, 9, 4, 1, 1, 1, 3, 2, 3, 3], [3, 3, 5, 5, 1, 1, 3, 3, 3, 3, 4, 1, 5, 8, 3, 2, 2, 3, 8, 5, 1, 4, 3, 3, 3, 3, 1, 1, 5, 5], [3, 3, 5, 5, 7, 1, 2, 3, 3, 3, 1, 4, 8, 5, 8, 3, 3, 8, 5, 8, 4, 1, 3, 3, 3, 2, 1, 7, 5, 5], [4, 9, 5, 8, 2, 1, 4, 2, 3, 3, 1, 7, 4, 7, 9, 1, 1, 9, 7, 4, 7, 1, 3, 3, 2, 4, 1, 2, 8, 5], [9, 4, 8, 5, 7, 2, 4, 4, 2, 3, 1, 1, 7, 4, 5, 9, 9, 5, 4, 7, 1, 1, 3, 2, 4, 4, 2, 7, 5, 8], [3, 9, 4, 9, 5, 5, 2, 1, 1, 1, 3, 3, 3, 7, 4, 7, 7, 4, 7, 3, 3, 3, 1, 1, 1, 2, 5, 5, 9, 4], [3, 3, 9, 4, 3, 5, 7, 2, 7, 1, 2, 3, 7, 3, 7, 4, 4, 7, 3, 7, 3, 2, 1, 7, 2, 7, 5, 3, 4, 9], [7, 9, 3, 3, 4, 9, 5, 8, 5, 5, 3, 3, 3, 3, 1, 7, 7, 1, 3, 3, 3, 3, 5, 5, 8, 5, 9, 4, 3, 3], [7, 7, 5, 3, 9, 4, 8, 5, 5, 5, 3, 3, 2, 3, 1, 1, 1, 1, 3, 2, 3, 3, 5, 5, 5, 8, 4, 9, 3, 5]].

Quiz
If input grids are like that
[[5, 4, 4, 8, 1, 1, 5, 5, 8, 6, 6, 6, 6, 6, 6, 6, 6, 8, 3, 8, 3, 1, 5, 8, 5, 5, 1, 1, 8, 4], [4, 8, 8, 8, 1, 1, 5, 8, 5, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 3, 7, 3, 1, 5, 8, 5, 1, 1, 8, 8], [4, 8, 5, 2, 5, 5, 2, 2, 1, 6, 6, 6, 6, 6, 6, 6, 6, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [1, 1, 5, 5, 1, 2, 4, 3, 8, 6, 6, 6, 6, 6, 6, 6, 6, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [1, 1, 5, 8, 2, 2, 3, 4, 3, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 6, 6, 6, 6, 6, 3, 2], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 6, 6, 6, 6, 6, 3, 1], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 6, 6, 6, 6, 6, 7, 3], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 5, 5, 5, 5, 2, 2, 9, 9, 7, 6, 6, 6, 6, 6, 1, 2], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 2, 4, 9, 1, 6, 6, 6, 6, 6, 8, 1], [8, 3, 8, 8, 7, 2, 9, 5, 4, 5, 2, 2, 4, 3, 5, 7, 7, 5, 3, 4, 2, 2, 5, 6, 6, 6, 6, 6, 8, 8], [3, 8, 8, 2, 2, 7, 5, 9, 5, 5, 2, 9, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 6, 6, 6, 6, 6, 2, 8], [8, 8, 3, 8, 9, 5, 4, 3, 2, 2, 5, 5, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 6, 6, 6, 6, 9, 8, 3], [8, 2, 8, 8, 5, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 6, 6, 6, 6, 5, 8, 8], [8, 2, 8, 8, 5, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 6, 6, 6, 6, 5, 8, 8], [8, 8, 3, 8, 9, 6, 6, 6, 6, 6, 6, 6, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 6, 6, 6, 6, 9, 8, 3], [3, 8, 8, 2, 2, 6, 6, 6, 6, 6, 6, 6, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 5, 9, 5, 7, 2, 2, 8], [8, 3, 8, 8, 7, 6, 6, 6, 6, 6, 6, 6, 4, 3, 5, 7, 7, 5, 3, 6, 6, 6, 6, 4, 5, 9, 2, 7, 8, 8], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 6, 6, 6, 6, 7, 8, 8, 2, 8, 8, 1], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 5, 5, 5, 5, 2, 2, 9, 9, 7, 5, 8, 3, 8, 8, 1, 2], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 1, 2, 8, 8, 3, 7, 3], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 2, 8, 8, 3, 8, 3, 1], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [1, 1, 5, 8, 2, 2, 3, 4, 3, 8, 8, 2, 2, 7, 5, 9, 9, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [1, 1, 5, 5, 1, 2, 4, 3, 8, 3, 8, 8, 7, 2, 9, 5, 5, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 7, 1, 8, 8, 2, 8, 8, 8, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [4, 8, 5, 2, 5, 5, 2, 2, 1, 3, 2, 1, 8, 8, 3, 8, 8, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5]],
then output grids?

=========","The output grids would be:

[[5, 4, 4, 8, 1, 1, 5, 5, 8, 6, 6, 6, 6, 6, 6, 6, 6, 8, 3, 8, 3, 1, 5, 8, 5, 5, 1, 1, 8, 4], [4, 8, 8, 8, 1, 1, 5, 8, 5, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 3, 7, 3, 1, 5, 8, 5, 1, 1, 8, 8], [4, 8, 5, 2, 5, 5, 2, 2, 1, 6, 6, 6, 6, 6, 6, 6, 6, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [1, 1, 5, 5, 1, 2, 4, 3, 8, 6, 6, 6, 6, 6, 6, 6, 6, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [1, 1, 5, 8, 2, 2, 3, 4, 3, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [5, 5, 2, 2, 4, 3, 7, 7, 8, 6, 6, 6, 6, 6, 6, 6, 6, 9, 2, 7, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [5, 8, 2, 3, 3, 4, 7, 7, 8, 6, 6, 6, 6, 6, 6, 6, 6, 2, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2, 8, 2], [8, 5, 1, 3, 8, 3, 8, 8, 2, 6, 6, 6, 6, 6, 6, 6, 6, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5], [5, 1, 3, 7, 3, 8, 8, 2, 1, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7], [1, 3, 2, 1, 8, 8, 3, 8, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 9, 9, 2, 2, 4, 3, 5, 7, 7, 5, 3, 2], [3, 7, 1, 8, 8, 2, 8, 8, 7, 6, 6, 6, 6, 6, 6, 6, 6, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 2, 4, 1], [8, 3, 8, 8, 7, 2, 9, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 5, 2, 2, 4, 3, 5, 7, 7, 5, 3, 4, 2, 2], [3, 8, 8, 2, 2, 7, 5, 9, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 2, 7], [8, 8, 3, 8, 9, 5, 4, 3, 2, 6, 6, 6, 6, 6, 6, 6, 6, 1, 7, 1, 1, 7, 4, 8, 5, 7, 2, 3, 1, 9], [8, 2, 8, 8, 5, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 6, 6, 6, 6, 5, 8, 8], [8, 2, 8, 8, 5, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 6, 6, 6, 6, 5, 8, 8], [8, 8, 3, 8, 9, 6, 6, 6, 6, 6, 6, 6, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 6, 6, 6, 6, 9, 8, 3], [3, 8, 8, 2, 2, 6, 6, 6, 6, 6, 6, 6, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 5, 9, 5, 7, 2, 2, 8], [8, 3, 8, 8, 7, 6, 6, 6, 6, 6, 6, 6, 4, 3, 5, 7, 7, 5, 3, 6, 6, 6, 6, 4, 5, 9, 2, 7, 8, 8], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 6, 6, 6, 6, 7, 8, 8, 2, 8, 8, 1], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 4, 3, 5, 7, 7, 5, 3, 8, 8, 1, 2, 8, 8, 3, 7, 2], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 1, 2, 8, 8, 3, 7, 3], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 2, 8, 8, 3, 8, 3, 1], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [1, 1, 5, 8, 2, 2, 3, 4, 3, 8, 8, 2, 2, 7, 5, 9, 9, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [1, 1, 5, 5, 1, 2, 4, 3, 8, 3, 8, 8, 7, 2, 9, 5, 5, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 7, 1, 8, 8, 2, 8, 8, 8, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [4, 8, 5, 2, 5, 5, 2, 2, 1, 3, 2, 1, 8, 8, 3, 8, 8, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5]]","[[5, 4, 4, 8, 1, 1, 5, 5, 8, 6, 6, 6, 6, 6, 6, 6, 6, 8, 3, 8, 3, 1, 5, 8, 5, 5, 1, 1, 8, 4], [4, 8, 8, 8, 1, 1, 5, 8, 5, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 3, 7, 3, 1, 5, 8, 5, 1, 1, 8, 8], [4, 8, 5, 2, 5, 5, 2, 2, 1, 6, 6, 6, 6, 6, 6, 6, 6, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [1, 1, 5, 5, 1, 2, 4, 3, 8, 6, 6, 6, 6, 6, 6, 6, 6, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [1, 1, 5, 8, 2, 2, 3, 4, 3, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [5, 5, 2, 2, 4, 3, 7, 7, 8, 6, 6, 6, 6, 6, 6, 6, 6, 9, 2, 7, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [5, 8, 2, 3, 3, 4, 7, 7, 8, 6, 6, 6, 6, 6, 6, 6, 6, 2, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2, 8, 2], [8, 5, 1, 3, 8, 3, 8, 8, 2, 6, 6, 6, 6, 6, 6, 6, 6, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5], [5, 1, 3, 7, 3, 8, 8, 2, 1, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7], [1, 3, 2, 1, 8, 8, 3, 8, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 9, 9, 2, 2, 4, 3, 5, 7, 7, 5, 3, 2], [3, 7, 1, 8, 8, 2, 8, 8, 7, 6, 6, 6, 6, 6, 6, 6, 6, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 2, 4, 1], [8, 3, 8, 8, 7, 2, 9, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 5, 2, 2, 4, 3, 5, 7, 7, 5, 3, 4, 2, 2], [3, 8, 8, 2, 2, 7, 5, 9, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 2, 7], [8, 8, 3, 8, 9, 5, 4, 3, 2, 6, 6, 6, 6, 6, 6, 6, 6, 1, 7, 1, 1, 7, 4, 8, 5, 7, 2, 3, 1, 9], [8, 2, 8, 8, 5, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 6, 6, 6, 6, 5, 8, 8], [8, 2, 8, 8, 5, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 6, 6, 6, 6, 5, 8, 8], [8, 8, 3, 8, 9, 6, 6, 6, 6, 6, 6, 6, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 6, 6, 6, 6, 9, 8, 3], [3, 8, 8, 2, 2, 6, 6, 6, 6, 6, 6, 6, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 5, 9, 5, 7, 2, 2, 8], [8, 3, 8, 8, 7, 6, 6, 6, 6, 6, 6, 6, 4, 3, 5, 7, 7, 5, 3, 6, 6, 6, 6, 4, 5, 9, 2, 7, 8, 8], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 6, 6, 6, 6, 7, 8, 8, 2, 8, 8, 1], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 4, 3, 5, 7, 7, 5, 3, 8, 8, 1, 2, 8, 8, 3, 7, 2], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 1, 2, 8, 8, 3, 7, 3], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 2, 8, 8, 3, 8, 3, 1], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [1, 1, 5, 8, 2, 2, 3, 4, 3, 8, 8, 2, 2, 7, 5, 9, 9, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [1, 1, 5, 5, 1, 2, 4, 3, 8, 3, 8, 8, 7, 2, 9, 5, 5, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 7, 1, 8, 8, 2, 8, 8, 8, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [4, 8, 5, 2, 5, 5, 2, 2, 1, 3, 2, 1, 8, 8, 3, 8, 8, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5]]","[[5, 4, 4, 8, 1, 1, 5, 5, 8, 6, 6, 6, 6, 6, 6, 6, 6, 8, 3, 8, 3, 1, 5, 8, 5, 5, 1, 1, 8, 4], [4, 8, 8, 8, 1, 1, 5, 8, 5, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 3, 7, 3, 1, 5, 8, 5, 1, 1, 8, 8], [4, 8, 5, 2, 5, 5, 2, 2, 1, 6, 6, 6, 6, 6, 6, 6, 6, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [1, 1, 5, 5, 1, 2, 4, 3, 8, 6, 6, 6, 6, 6, 6, 6, 6, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [1, 1, 5, 8, 2, 2, 3, 4, 3, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [5, 5, 2, 2, 4, 3, 7, 7, 8, 6, 6, 6, 6, 6, 6, 6, 6, 9, 2, 7, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [5, 8, 2, 3, 3, 4, 7, 7, 8, 6, 6, 6, 6, 6, 6, 6, 6, 2, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2, 8, 2], [8, 5, 1, 3, 8, 3, 8, 8, 2, 6, 6, 6, 6, 6, 6, 6, 6, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5], [5, 1, 3, 7, 3, 8, 8, 2, 1, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7], [1, 3, 2, 1, 8, 8, 3, 8, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 9, 9, 2, 2, 4, 3, 5, 7, 7, 5, 3, 2], [3, 7, 1, 8, 8, 2, 8, 8, 7, 6, 6, 6, 6, 6, 6, 6, 6, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 2, 4, 1], [8, 3, 8, 8, 7, 2, 9, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 5, 2, 2, 4, 3, 5, 7, 7, 5, 3, 4, 2, 2], [3, 8, 8, 2, 2, 7, 5, 9, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 2, 7], [8, 8, 3, 8, 9, 5, 4, 3, 2, 6, 6, 6, 6, 6, 6, 6, 6, 1, 7, 1, 1, 7, 4, 8, 5, 7, 2, 3, 1, 9], [8, 2, 8, 8, 5, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 6, 6, 6, 6, 5, 8, 8], [8, 2, 8, 8, 5, 6, 6, 6, 6, 6, 6, 6, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 6, 6, 6, 6, 5, 8, 8], [8, 8, 3, 8, 9, 6, 6, 6, 6, 6, 6, 6, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 6, 6, 6, 6, 9, 8, 3], [3, 8, 8, 2, 2, 6, 6, 6, 6, 6, 6, 6, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 5, 9, 5, 7, 2, 2, 8], [8, 3, 8, 8, 7, 6, 6, 6, 6, 6, 6, 6, 4, 3, 5, 7, 7, 5, 3, 6, 6, 6, 6, 4, 5, 9, 2, 7, 8, 8], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 6, 6, 6, 6, 7, 8, 8, 2, 8, 8, 1], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 4, 3, 5, 7, 7, 5, 3, 8, 8, 1, 2, 8, 8, 3, 7, 2], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 1, 2, 8, 8, 3, 7, 3], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 2, 8, 8, 3, 8, 3, 1], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [1, 1, 5, 8, 2, 2, 3, 4, 3, 8, 8, 2, 2, 7, 5, 9, 9, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [1, 1, 5, 5, 1, 2, 4, 3, 8, 3, 8, 8, 7, 2, 9, 5, 5, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 7, 1, 8, 8, 2, 8, 8, 8, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [4, 8, 5, 2, 5, 5, 2, 2, 1, 3, 2, 1, 8, 8, 3, 8, 8, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5]]","[[5, 4, 4, 8, 1, 1, 5, 5, 8, 5, 1, 3, 8, 3, 8, 8, 8, 8, 3, 8, 3, 1, 5, 8, 5, 5, 1, 1, 8, 4], [4, 8, 8, 8, 1, 1, 5, 8, 5, 1, 3, 7, 3, 8, 8, 2, 2, 8, 8, 3, 7, 3, 1, 5, 8, 5, 1, 1, 8, 8], [4, 8, 5, 2, 5, 5, 2, 2, 1, 3, 2, 1, 8, 8, 3, 8, 8, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 7, 1, 8, 8, 2, 8, 8, 8, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [1, 1, 5, 5, 1, 2, 4, 3, 8, 3, 8, 8, 7, 2, 9, 5, 5, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [1, 1, 5, 8, 2, 2, 3, 4, 3, 8, 8, 2, 2, 7, 5, 9, 9, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 2, 8, 8, 3, 8, 3, 1], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 1, 2, 8, 8, 3, 7, 3], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 5, 5, 5, 5, 2, 2, 9, 9, 7, 5, 8, 3, 8, 8, 1, 2], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 2, 4, 9, 1, 7, 8, 8, 2, 8, 8, 1], [8, 3, 8, 8, 7, 2, 9, 5, 4, 5, 2, 2, 4, 3, 5, 7, 7, 5, 3, 4, 2, 2, 5, 4, 5, 9, 2, 7, 8, 8], [3, 8, 8, 2, 2, 7, 5, 9, 5, 5, 2, 9, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 5, 9, 5, 7, 2, 2, 8], [8, 8, 3, 8, 9, 5, 4, 3, 2, 2, 5, 5, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 2, 3, 4, 5, 9, 8, 3], [8, 2, 8, 8, 5, 9, 3, 3, 2, 9, 5, 5, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 2, 3, 3, 9, 5, 8, 8], [8, 2, 8, 8, 5, 9, 3, 3, 2, 9, 5, 5, 7, 3, 7, 1, 1, 7, 3, 7, 5, 5, 9, 2, 3, 3, 9, 5, 8, 8], [8, 8, 3, 8, 9, 5, 4, 3, 2, 2, 5, 5, 5, 7, 1, 7, 7, 1, 7, 5, 5, 5, 2, 2, 3, 4, 5, 9, 8, 3], [3, 8, 8, 2, 2, 7, 5, 9, 5, 5, 2, 9, 3, 1, 7, 3, 3, 7, 1, 3, 9, 2, 5, 5, 9, 5, 7, 2, 2, 8], [8, 3, 8, 8, 7, 2, 9, 5, 4, 5, 2, 2, 4, 3, 5, 7, 7, 5, 3, 4, 2, 2, 5, 4, 5, 9, 2, 7, 8, 8], [3, 7, 1, 8, 8, 2, 8, 8, 7, 1, 9, 4, 2, 9, 5, 5, 5, 5, 9, 2, 4, 9, 1, 7, 8, 8, 2, 8, 8, 1], [1, 3, 2, 1, 8, 8, 3, 8, 5, 7, 9, 9, 2, 2, 5, 5, 5, 5, 2, 2, 9, 9, 7, 5, 8, 3, 8, 8, 1, 2], [5, 1, 3, 7, 3, 8, 8, 2, 1, 5, 7, 1, 5, 5, 2, 9, 9, 2, 5, 5, 1, 7, 5, 1, 2, 8, 8, 3, 7, 3], [8, 5, 1, 3, 8, 3, 8, 8, 2, 1, 5, 7, 4, 5, 2, 2, 2, 2, 5, 4, 7, 5, 1, 2, 8, 8, 3, 8, 3, 1], [5, 8, 2, 3, 3, 4, 7, 7, 8, 2, 8, 8, 5, 9, 3, 3, 3, 3, 9, 5, 8, 8, 2, 8, 7, 7, 4, 3, 3, 2], [5, 5, 2, 2, 4, 3, 7, 7, 8, 8, 3, 8, 9, 5, 4, 3, 3, 4, 5, 9, 8, 3, 8, 8, 7, 7, 3, 4, 2, 2], [1, 1, 5, 8, 2, 2, 3, 4, 3, 8, 8, 2, 2, 7, 5, 9, 9, 5, 7, 2, 2, 8, 8, 3, 4, 3, 2, 2, 8, 5], [1, 1, 5, 5, 1, 2, 4, 3, 8, 3, 8, 8, 7, 2, 9, 5, 5, 9, 2, 7, 8, 8, 3, 8, 3, 4, 2, 1, 5, 5], [8, 8, 2, 5, 5, 8, 2, 3, 3, 7, 1, 8, 8, 2, 8, 8, 8, 8, 2, 8, 8, 1, 7, 3, 3, 2, 8, 5, 5, 2], [4, 8, 5, 2, 5, 5, 2, 2, 1, 3, 2, 1, 8, 8, 3, 8, 8, 3, 8, 8, 1, 2, 3, 1, 2, 2, 5, 5, 2, 5]]",False,,Tedious
48131b3c,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 8, 0], [8, 0, 8], [0, 0, 0]],
then this grids change to output grids below
[[8, 0, 8, 8, 0, 8], [0, 8, 0, 0, 8, 0], [8, 8, 8, 8, 8, 8], [8, 0, 8, 8, 0, 8], [0, 8, 0, 0, 8, 0], [8, 8, 8, 8, 8, 8]].

Example 2
If input grids are like that
[[7, 0], [0, 7]],
then this grids change to output grids below
[[0, 7, 0, 7], [7, 0, 7, 0], [0, 7, 0, 7], [7, 0, 7, 0]].

Quiz
If input grids are like that
[[0, 1, 0, 1], [1, 0, 0, 1], [0, 0, 1, 0], [1, 0, 0, 0]],
then output grids?

=========","The pattern in this problem is that the input grid is duplicated both horizontally and vertically. 

So, if the input grid is 
[[0, 1, 0, 1], [1, 0, 0, 1], [0, 0, 1, 0], [1, 0, 0, 0]],

then the output grid would be 
[[0, 1, 0, 1, 0, 1, 0, 1], 
 [1, 0, 0, 1, 1, 0, 0, 1], 
 [0, 0, 1, 0, 0, 0, 1, 0], 
 [1, 0, 0, 0, 1, 0, 0, 0], 
 [0, 1, 0, 1, 0, 1, 0, 1], 
 [1, 0, 0, 1, 1, 0, 0, 1], 
 [0, 0, 1, 0, 0, 0, 1, 0], 
 [1, 0, 0, 0, 1, 0, 0, 0]].","[[0, 1, 0, 1], [1, 0, 0, 1], [0, 0, 1, 0], [1, 0, 0, 0]],

then the output grid would be 
[[0, 1, 0, 1, 0, 1, 0, 1], 
 [1, 0, 0, 1, 1, 0, 0, 1], 
 [0, 0, 1, 0, 0, 0, 1, 0], 
 [1, 0, 0, 0, 1, 0, 0, 0], 
 [0, 1, 0, 1, 0, 1, 0, 1], 
 [1, 0, 0, 1, 1, 0, 0, 1], 
 [0, 0, 1, 0, 0, 0, 1, 0], 
 [1, 0, 0, 0, 1, 0, 0, 0]]","[[0, 1, 0, 1, 0, 1, 0, 1], 
 [1, 0, 0, 1, 1, 0, 0, 1], 
 [0, 0, 1, 0, 0, 0, 1, 0], 
 [1, 0, 0, 0, 1, 0, 0, 0], 
 [0, 1, 0, 1, 0, 1, 0, 1], 
 [1, 0, 0, 1, 1, 0, 0, 1], 
 [0, 0, 1, 0, 0, 0, 1, 0], 
 [1, 0, 0, 0, 1, 0, 0, 0]]","[[1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1, 0], [1, 1, 0, 1, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1, 0], [1, 1, 0, 1, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1]]",False,,Medium
4852f2fa,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 0, 4, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 8, 8, 0, 8, 8], [8, 8, 8, 8, 8, 8], [0, 8, 0, 8, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 8, 0], [8, 8, 0], [0, 8, 8]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 8, 0, 8, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[8, 8, 0], [8, 0, 8], [8, 8, 0]]

The pattern in this problem is that the grid is being reduced to only the rows that contain the number 8, and then further reduced to only the columns that contain the number 8. The number 4 is ignored in this pattern.","[[8, 8, 0], [8, 0, 8], [8, 8, 0]]","[[8, 8, 0], [8, 0, 8], [8, 8, 0]]","[[8, 8, 0, 8, 8, 0], [8, 0, 8, 8, 0, 8], [8, 8, 0, 8, 8, 0]]",False,,Multiple solutions
48f8583b,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[9, 9, 6], [3, 8, 8], [8, 3, 3]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 9, 9, 6], [0, 0, 0, 0, 0, 0, 3, 8, 8], [0, 0, 0, 0, 0, 0, 8, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[8, 5, 5], [8, 8, 8], [5, 9, 9]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 5, 5, 8, 5, 5], [0, 0, 0, 8, 8, 8, 8, 8, 8], [0, 0, 0, 5, 9, 9, 5, 9, 9]].

Quiz
If input grids are like that
[[9, 7, 9], [9, 9, 7], [7, 9, 7]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 9, 7, 9, 9, 7, 9], [0, 0, 0, 9, 9, 7, 9, 9, 7], [0, 0, 0, 7, 9, 7, 7, 9, 7]].

The pattern in this problem is that the original 3x3 grid is moved to the bottom right corner of a new 9x9 grid, and the rest of the cells in the new grid are filled with 0s.","[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 9, 7, 9, 9, 7, 9], [0, 0, 0, 9, 9, 7, 9, 9, 7], [0, 0, 0, 7, 9, 7, 7, 9, 7]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 9, 7, 9, 9, 7, 9], [0, 0, 0, 9, 9, 7, 9, 9, 7], [0, 0, 0, 7, 9, 7, 7, 9, 7]]","[[0, 0, 0, 9, 7, 9, 0, 0, 0], [0, 0, 0, 9, 9, 7, 0, 0, 0], [0, 0, 0, 7, 9, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 9, 7, 9], [0, 0, 0, 0, 0, 0, 9, 9, 7], [0, 0, 0, 0, 0, 0, 7, 9, 7], [9, 7, 9, 0, 0, 0, 9, 7, 9], [9, 9, 7, 0, 0, 0, 9, 9, 7], [7, 9, 7, 0, 0, 0, 7, 9, 7]]",False,,Medium
4aab4007,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5], [1, 1, 4, 2, 3, 5, 7, 2, 4, 6, 0, 0, 0, 0, 0, 0, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7], [1, 1, 4, 1, 5, 7, 2, 4, 6, 1, 0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2], [1, 1, 4, 5, 7, 2, 4, 6, 1, 3, 0, 0, 0, 0, 0, 0, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4], [1, 1, 4, 7, 2, 4, 6, 1, 3, 5, 0, 0, 0, 0, 0, 0, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6], [1, 1, 4, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1], [1, 1, 4, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 0, 0, 0, 0, 0, 2, 4, 6, 1, 3], [1, 1, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 0, 0, 0, 0, 0, 4, 6, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 0, 0, 0, 0, 0, 6, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 0, 0, 0, 0, 0, 1, 3, 5, 7, 2], [1, 1, 4, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 0, 0, 0, 0, 0, 3, 5, 7, 2, 4], [1, 1, 4, 7, 0, 0, 0, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 0, 0, 0, 0, 0, 5, 7, 2, 4, 6], [1, 1, 4, 2, 0, 0, 0, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1], [1, 1, 4, 4, 0, 0, 0, 0, 0, 0, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3], [1, 1, 4, 6, 0, 0, 0, 0, 0, 0, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5], [1, 1, 4, 1, 0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7], [1, 1, 4, 3, 0, 0, 0, 0, 0, 0, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2], [1, 1, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4], [1, 1, 4, 7, 2, 4, 6, 0, 0, 0, 0, 0, 0, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6], [1, 1, 4, 2, 4, 6, 1, 0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1], [1, 1, 4, 4, 6, 1, 3, 0, 0, 0, 0, 0, 0, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3], [1, 1, 4, 6, 1, 3, 5, 0, 0, 0, 0, 0, 0, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 0, 0, 0, 0, 0, 0, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2], [1, 1, 4, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4]],
then this grids change to output grids below
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5], [1, 1, 4, 2, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7], [1, 1, 4, 1, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2], [1, 1, 4, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4], [1, 1, 4, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6], [1, 1, 4, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1], [1, 1, 4, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3], [1, 1, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2], [1, 1, 4, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4], [1, 1, 4, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6], [1, 1, 4, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1], [1, 1, 4, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3], [1, 1, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2], [1, 1, 4, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4], [1, 1, 4, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6], [1, 1, 4, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1], [1, 1, 4, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3], [1, 1, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7], [1, 1, 4, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2], [1, 1, 4, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4, 6, 1, 3, 5, 7, 2, 4]].

Example 2
If input grids are like that
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 3, 5, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 2, 1, 3, 5, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 0, 0, 0, 0, 0, 0, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 0, 0, 0, 0, 0, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 0, 0, 0, 0, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 0, 0, 0, 0, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 0, 0, 0, 0, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 0, 0, 0, 0, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 0, 0, 0, 0, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 0, 0, 0, 0, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5]],
then this grids change to output grids below
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 2, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5]].

Quiz
If input grids are like that
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 9, 1, 3, 5, 7, 0, 0, 0, 0, 0, 0, 0, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 1, 4, 2, 7, 9, 1, 3, 5, 7, 9, 0, 0, 0, 0, 0, 0, 0, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 1, 9, 1, 3, 5, 7, 9, 1, 0, 0, 0, 0, 0, 0, 0, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 0, 0, 0, 0, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 0, 0, 0, 0, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 0, 0, 0, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 0, 0, 0, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [0, 0, 0, 0, 0, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [0, 0, 0, 0, 0, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [0, 0, 0, 0, 0, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [0, 0, 0, 0, 0, 9, 1, 3, 5, 0, 0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [0, 0, 0, 0, 0, 1, 3, 5, 7, 0, 0, 0, 0, 0, 0, 0, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [0, 0, 0, 0, 0, 3, 5, 7, 9, 0, 0, 0, 0, 0, 0, 0, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [0, 0, 0, 0, 0, 5, 7, 9, 1, 0, 0, 0, 0, 0, 0, 0, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 9, 1, 3, 0, 0, 0, 0, 0, 0, 0, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 9, 1, 3, 5, 0, 0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9]],
then output grids?

=========","The output grids would be:

[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 2, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 1, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9], [1, 1, 4, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9]]","[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 2, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 1, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9], [1, 1, 4, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9]]","[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 2, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 1, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 3, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9], [1, 1, 4, 5, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 7, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9]]","[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 4, 3, 2, 1, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 1, 4, 2, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 1, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], [1, 1, 4, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1], [1, 1, 4, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3], [1, 1, 4, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5], [1, 1, 4, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7], [1, 1, 4, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9]]",False,,Tedious
4acc7107,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0, 0], [6, 6, 0, 0, 0, 0, 6, 6, 0, 0], [6, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 1, 0, 0, 0, 0, 0], [6, 6, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 0, 0, 1, 1, 1, 0, 0, 0], [6, 6, 0, 1, 1, 1, 1, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 0, 0, 3, 3, 3], [0, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [3, 3, 3, 0, 0, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 0, 4, 4, 4, 0, 0], [3, 3, 0, 0, 0, 0, 4, 4, 0, 0], [3, 3, 0, 0, 0, 0, 4, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 3, 3, 3, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 0, 2, 2, 2, 0], [0, 0, 0, 3, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 3, 3, 3, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 2, 2, 2, 0], [3, 3, 3, 3, 0, 0, 2, 2, 2, 0]]

The pattern in this problem is that the objects in the grid move down.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 3, 3, 3, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 2, 2, 2, 0], [3, 3, 3, 3, 0, 0, 2, 2, 2, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 3, 3, 3, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 2, 2, 2, 0], [3, 3, 3, 3, 0, 0, 2, 2, 2, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 3, 3, 0], [0, 0, 0, 2, 0, 3, 3, 3, 3, 0], [0, 0, 2, 2, 0, 0, 0, 3, 0, 0]]",False,,Medium
4b6b68e5,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 8, 0, 0, 8, 2, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 3, 0, 8, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 5, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 1, 1, 1, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 6, 6, 6, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 6, 0, 3, 0, 0], [0, 0, 2, 2, 2, 0, 3, 0, 0, 0, 2, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 6, 6, 6, 6, 6], [0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0], [3, 0, 0, 0, 0, 0, 0, 4, 8, 0, 3, 0, 8, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 4, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0, 6, 6, 6, 0, 0], [0, 0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0, 6, 0, 0, 0, 0], [0, 0, 2, 2, 2, 3, 3, 3, 3, 3, 2, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 2, 0, 0, 6, 6, 6, 6, 6], [0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 8, 8, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 8, 8, 8, 8, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 8, 8, 8, 8, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 8, 8, 8, 8, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 8, 8, 8, 8, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 8, 8, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 3, 3, 0, 1], [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 2, 0, 6, 0, 0, 8, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 6, 0, 3, 0, 0], [0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 0, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 3, 0, 0, 0, 0, 8, 0, 3, 0, 0], [0, 2, 0, 0, 1, 0, 6, 0, 0, 0, 0, 2, 0, 0, 3, 8, 0, 0, 0, 0, 0, 3, 0, 0], [0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 3, 0, 0, 0, 8, 0, 0, 3, 0, 0], [0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 3, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 3, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 8, 0, 4, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 0, 3, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 7, 0, 2, 0, 1, 0, 7, 0, 0], [0, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0, 7, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 3, 3, 0, 1], [0, 0, 0, 2, 8, 8, 8, 8, 8, 8, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 3, 0, 0, 6, 0, 3, 0, 0], [0, 0, 0, 2, 8, 8, 1, 8, 8, 8, 8, 2, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 0, 0], [0, 2, 2, 2, 8, 8, 1, 8, 8, 8, 1, 2, 0, 0, 3, 0, 0, 0, 0, 8, 0, 3, 0, 0], [0, 2, 8, 8, 1, 8, 6, 8, 8, 8, 8, 2, 0, 0, 3, 8, 0, 0, 0, 0, 0, 3, 0, 0], [0, 2, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 0, 0, 3, 0, 0, 0, 8, 0, 0, 3, 0, 0], [0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 3, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 3, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 8, 0, 4, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 0, 3, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 7, 0, 2, 0, 1, 0, 7, 0, 0], [0, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0, 7, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 3, 3, 0, 1], [0, 0, 0, 2, 8, 8, 8, 8, 8, 8, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 3, 0, 0, 6, 0, 3, 0, 0], [0, 0, 0, 2, 8, 8, 1, 8, 8, 8, 8, 2, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 0, 0], [0, 2, 2, 2, 8, 8, 1, 8, 8, 8, 1, 2, 0, 0, 3, 0, 0, 0, 0, 8, 0, 3, 0, 0], [0, 2, 8, 8, 1, 8, 6, 8, 8, 8, 8, 2, 0, 0, 3, 8, 0, 0, 0, 0, 0, 3, 0, 0], [0, 2, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 0, 0, 3, 0, 0, 0, 8, 0, 0, 3, 0, 0], [0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 3, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 3, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 8, 0, 4, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 0, 3, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 7, 0, 2, 0, 1, 0, 7, 0, 0], [0, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0, 7, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 3, 3, 0, 1], [0, 0, 0, 2, 8, 8, 8, 8, 8, 8, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 2, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 3, 0, 0, 6, 0, 3, 0, 0], [0, 0, 0, 2, 8, 8, 1, 8, 8, 8, 8, 2, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 0, 0], [0, 2, 2, 2, 8, 8, 1, 8, 8, 8, 1, 2, 0, 0, 3, 0, 0, 0, 0, 8, 0, 3, 0, 0], [0, 2, 8, 8, 1, 8, 6, 8, 8, 8, 8, 2, 0, 0, 3, 8, 0, 0, 0, 0, 0, 3, 0, 0], [0, 2, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 0, 0, 3, 0, 0, 0, 8, 0, 0, 3, 0, 0], [0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 3, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 3, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 8, 0, 4, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 0, 3, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 7, 0, 2, 0, 1, 0, 7, 0, 0], [0, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0, 7, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 3, 3, 3, 8, 8, 8, 8, 3, 0, 0], [0, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 3, 8, 8, 8, 8, 8, 8, 3, 0, 0], [0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 3, 8, 8, 8, 8, 8, 8, 3, 0, 0], [0, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 0, 0, 3, 8, 8, 8, 8, 8, 8, 3, 0, 0], [0, 2, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 8, 8, 3, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 8, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 8, 8, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 8, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 8, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 4, 4, 4, 4, 4, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 4, 4, 4, 4, 4, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 4, 4, 4, 4, 4, 4, 4, 4, 8, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 4, 4, 4, 4, 4, 4, 4, 4, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 4, 4, 4, 4, 4, 4, 4, 4, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 4, 4, 8, 8, 8, 8, 4, 4, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Medium
4c177718,"
Do you know ARC problem?

It is similary below.

=========
Example 1

If input grids are like that
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

=========

You can understand the pattern of this problem with input-output pair about example1.
In above case, you can inference like below.

In example 1 case, all obejct move right. So if given input is below,
[[0, 3, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 2, 2], [0, 0, 0, 0, 2, 2], [6, 6, 6, 0, 0, 0]],
then you can move object to right side.
[[0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 2], [0, 0, 0, 0, 0, 2], [0, 0, 0, 8, 2, 2], [0, 0, 0, 0, 2, 2], [0, 0, 0, 6, 6, 6]].

Like this concept, 'object', 'count', 'color', 'move', 'row', 'column' and etc, helps you to understand patterns of problem and solve it.

Below problem is other pattern to solve. So you can understand below pattern with several examples and apply quiz's input to get right output.

=========
Example 1
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 2, 0, 0, 3, 3, 3, 0, 0], [0, 0, 1, 1, 1, 0, 2, 2, 2, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Example 2
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 2, 0, 0, 4, 4, 4, 0, 0], [0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 4, 4, 4, 0, 0], [0, 0, 1, 0, 1, 0, 2, 2, 2, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then this grids change to output grids below
[[0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

Quiz
If input grids are like that
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 8, 8, 0, 0, 0], [0, 0, 1, 1, 0, 0, 2, 2, 2, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
then output grids?

=========","The output grids would be:

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

The pattern in this problem is that the objects in the grid are moved up, and the rows that only contain the number 5 are removed.","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]","[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]",False,,Multiple solutions
